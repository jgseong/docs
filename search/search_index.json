{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"api/c/","text":"Primitive System Data Type \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc758 \uc774\uc2dd\uc131\uc744 \uc704\ud574 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc790\ub8cc\ud615(\uc815\uc218 \uc790\ub8cc\ud615)\uc744 \uc0ac\uc6a9. \ud50c\ub7ab\ud3fc(platform)\ub9c8\ub2e4 \uc790\ub8cc\ud615(data type)\uc758 \ud06c\uae30\uac00 \ub2e4\ub97c \uc218\uc788\uc74c. e.g. C\uc5b8\uc5b4\uc758 \uae30\ubcf8 \uc790\ub8cc\ud615 \uc911 long \ud0c0\uc785\uc740 32-bit Linux gcc \ucef4\ud30c\uc77c\ub7ec\uc5d0\uc11c 4 bytes (32-bit), 64-bit Linux gcc \ucef4\ud30c\uc77c\ub7ec\uc5d0\uc11c 8 bytes (64-bit). \uc815\uc218 \ube44\ud2b8 \uae38\uc774\uc640 \ubc14\uc774\ud2b8 \uae38\uc774\uac00 \ubb38\uc81c\uac00 \ub420 \ub54c, char \ub610\ub294 short , int , long , long long \uacfc \uac19\uc740 \uc790\ub8cc\ud615 \ub300\uc2e0 \uace0\uc815 \uae38\uc774 \uc790\ub8cc\ud615\uc744 \uc774\uc6a9. [1] ISO \uac00 \uac1c\ubc1c\ud55c C \uc5b8\uc5b4 \ud45c\uc900 ISO/IEC 9899 \uc5d0\uc11c\ub294 char \ub610\ub294 short , int , long , long long \uac19\uc740 \uc790\ub8cc\ud615\uc758 \uae38\uc774(\ube44\ud2b8 \uae38\uc774)\uc5d0 \ub300\ud55c \ucc98\ub9ac \uc2dc\uc2a4\ud15c\ub9c8\ub2e4 \uc815\uc758\ud558\ub294 \uac83\uc774 \ud5c8\uc6a9\ub418\uba70, \uc774\uac83\uc740 \uc774\uc2dd\uc131 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0b4. [1] 1999\ub144\uc5d0 \uac1c\uc815\ub41c ISO/IEC 9899: 1999 \uc5d0\uc11c\ub3c4 \uc774 \ubb38\uc81c\uc758 \uc7a0\uc7ac\uc801\uc778 \uc6d0\uc778\uc740 \ud574\uacb0\ub418\uc9c0 \uc54a\uc558\uc9c0\ub9cc, \ube44\ud2b8 \uae38\uc774\ub97c \uace0\uc720\ud558\uac8c \uc815\uc758\ud55c \uc790\ub8cc\ud615\uc774 \ucd94\uac00. \uc774 \ud615\uc2dd\uc740 stdint.h \uc5d0 \uc815\uc758. [1] # include stdint.h [u]intN_t : \uc694\uad6c\ub418\ub294 bit\uc758 \uae38\uc774\ub97c N\uc5d0 \uba85\uc2dc\ud558\uc5ec \uc0ac\uc6a9\ud558\uba70, u\ub294 unsigned. \uc774\ub7ec\ud55c \ubc29\uc2dd\uc740 C99 \ud45c\uc900\uc5d0 \uc815\uc758. Exact-width integer types. Integer types having exactly the specified width typedef singed char int8_t; // signed 8-bit integer typedef unsigned char uint8_t; // unsigned 8-bit integer typedef singed int int16_t; // signed 16-bit integer typedef unsigned int uint16_t; // unsigned 16-bit integer typedef singed long int int32_t; // signed 32-bit integer typedef unsigned long int uint32_t; // unsigned 32-bit integer typedef singed long long int int64_t; // signed 64-bit integer typedef unsigned long long int uint64_t; // unsigned 64-bit integer Reference [1] http://blog.daum.net/_blog/BlogTypeView.do?blogid=09ehJ articleno=18230429 categoryId=884391 regdt=20100414204400 [2] http://mgoons.tistory.com/4 About getopt() \uc2e4\ud589 \uba85\ub839(execution command)\uc758 \uc778\uc790(arguments) \ud30c\uc2f1(parsing)\ub97c \ub3c4\uc640\uc8fc\ub294 \ud568\uc218 \uac01 \uc778\uc790\ub4e4\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uacf5\ubc31 ' '\uacfc single/double quotation mark ' , \" \ub85c \uad6c\ubd84 C/C++ \uc18c\uc2a4 \ucf54\ub4dc\uc758 main(int argc, char *argv[]) \uc758 parameter\ub85c \uc0ac\uc6a9 int argc : \uc778\uc790\uc758 \uac2f\uc218, 0\ubc88\uc9f8\ub294 \uc2e4\ud589\uba85\ub839\uc744 \ud3ec\ud568 char *argv[] : \uc778\uc790 vector, \ubb38\uc790\uc5f4 \ubc30\uc5f4 main(int argc, char *argv[]) { #if 0 e.g. argc, argv\uc758 \uac12. $ ./a.out -a -b -c data -d e.txt argc=7 argv[0]= ./a.out , argv[1]= -a , argv[2]= -b , argv[3]= -c argv[4]= data , argv[5]= -d , argv[6]= e.txt #endif } \ub9ac\ub205\uc2a4\uc5d0\uc11c \ubcf4\ud1b5 - (dash)\ub85c \uc635\uc158\uc744 \uc0ac\uc6a9, \uc635\uc158 \uc778\uc790\uc758 \uc2dc\uc791\ud558\ub294 - \ub294 \ubb38\uc790, -- \ub294 \ubb38\uc790\uc5f4\ub85c \uad6c\ubd84. \uc774\ub7f0 \ud615\uc2dd\uc758 \uc635\uc158 \uc778\uc790\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub85c getopt() \uc0ac\uc6a9. ( - \ub85c \uc2dc\uc791\ud558\ub294 \ubb38\uc790 \uc635\uc158; short option ) GNU extension\uc73c\ub85c getopt_long() , getopt_long_only() \uc0ac\uc6a9. ( -- \ub85c \uc2dc\uc791\ud558\ub294 \ubb38\uc790\uc5f4 \uc635\uc158; long option ) man getopt man 3 getopt GETOPT(3) NAME getopt, getopt_long, getopt_long_only, optarg, optind, opterr, optopt - Parse command-line options SYNOPSIS #include unistd.h int getopt(int argc, char * const argv[], const char *optstring); extern char *optarg; extern int optind, opterr, optopt; #include getopt.h int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); int getopt_long_only(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); Feature Test Macro Requirements for glibc (see feature_test_macros(7)): getopt(): _POSIX_C_SOURCE = 2 || _XOPEN_SOURCE getopt_long(), getopt_long_only(): _GNU_SOURCE \uc678\ubd80 \uc804\uc5ed \ubcc0\uc218 optarg : \ud574\ub2f9 \uc635\uc158\uc758 \ucd94\uac00\uc801\uc778 \uc778\uc790(\ubb38\uc790\uc5f4). optind : \ud604\uc7ac argv\ub97c \uac00\ub9ac\ud0a4\ub294 index, 1\ubd80\ud130 \uc2dc\uc791. opterr : getopt()\uc758 \uc5d0\ub7ec \ucd9c\ub825 flag, opterr=1\uc774\uba74 \ucd9c\ub825, 0\uc774\uba74 \ucd9c\ub825 \uc548\ud568. optopt : \uc5d0\ub7ec\uac00 \ub09c \ubb38\uc790\ub97c \uc800\uc7a5. e.g. \uc635\uc158 \uc778\uc790\uac00 d \uc774\uace0 optsring=\"abc\" \ub77c\uba74, ? \ub97c \ub9ac\ud134\ud558\uace0 optopt='d' . getopt() int getopt(int argc, char * const argv[], const char *optstring); it parses short option in a argument vector. argc : \uc778\uc790\uc758 \ucd1d \uac1c\uc218, \ubcf4\ud1b5 main() \uc758 argc\ub97c \uc0ac\uc6a9. argv : \uc778\uc790\uc758 \ubb38\uc790\uc5f4 \ubc30\uc5f4, \ubcf4\ud1b5 main() \uc758 argv \ub97c \uc0ac\uc6a9. optstring : \uc635\uc158\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ubb38\uc790\ub4e4\ub85c \uad6c\uc131\ub41c \ubb38\uc790\uc5f4. \ucd94\uac00\uc801\uc778 \uc778\uc790\uac00 \ud544\uc694\ud55c \uc635\uc158 \ubb38\uc790\ub294 \ub4a4\uc5d0 : \ub610\ub294 :: \ub97c \uc0ac\uc6a9. : \ub294 \uc635\uc158\uc758 \ucd94\uac00 \uc778\uc790\ub97c \uacf5\ubc31 (' ') \ub610\ub294 \ub2e4\uc74c \ubb38\uc790\ubd80\ud130 \uc778\uc790\ub85c \ucde8\uae09\ud558\uc5ec optarg \uc5d0 \uc800\uc7a5 :: \ub294 \uc635\uc158\uc758 \ucd94\uac00 \uc778\uc790\ub97c \ub2e4\uc74c \ubb38\uc790\ubd80\ud130 \ubb38\uc790\uc5f4\ub85c \ucde8\uae09 optarg \uc5d0 \uc800\uc7a5. \uacf5\ubc31 (' ')\uc740 \ud5c8\uc6a9\uc548\ud568. optstring \uc758 \uccab \ubb38\uc790\uac00 - \uc778 \uacbd\uc6b0, ? \ub300\uc2e0 1 \ub97c \ub9ac\ud134\ud558\uba70, \uc624\ub958 \ucd9c\ub825\uc744 \ud558\uc9c0 \uc54a\uc74c. optstring \uc758 \uccab \ubb38\uc790\uac00 + \uc778 \uacbd\uc6b0, \uc778\uc790\uc5d0 \ub300\ud574 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uba74 \ubc14\ub85c \ud30c\uc2f1\uc744 \uc911\uc9c0( -1 \ub97c \ub9ac\ud134). optstring \uc758 \uccab \ubb38\uc790\uac00 : \uc778 \uacbd\uc6b0( - , + \ub2e4\uc74c\uc5d0 \uc0ac\uc6a9\ud558\uba74 \uc911\ubcf5 \uac00\ub2a5), \uc624\ub958\ub97c \ucd9c\ub825\ud558\uc9c0 \uc54a\uc74c. optstring \uc758 \uccab \ubb38\uc790\uac00 ':'\uc778 \uacbd\uc6b0, man 3 getopt \uc5d0\uc11c\ub294 ? \ub300\uc2e0 : \ub97c \ub9ac\ud134\ud55c\ub2e4\uace0 \ub418\uc5b4 \uc788\uc73c\ub098, \ub3d9\uc791\ub418\uc9c0 \uc54a\uc74c. (ubuntu 16 lts, glibc 2.23 \uae30\uc900) e.g. \uc635\uc158\uc774 a , b , c \uc774\uace0 b \ub294 \ucd94\uac00\uc801\uc778 \uc778\uc790\uac00 \ud544\uc694\ud558\ub2e4\uba74 b \ub4a4\uc5d0 : \ub97c \uc0ac\uc6a9, optstring=\"ab:c\" . argv \uc5d0\uc11c \uc635\uc158 \uc694\uc18c(element)\ub97c \uac80\uc0c9, optnid \uc640 \ud568\uc218 \ub0b4\ubd80\uc758 static \ubcc0\uc218 nextchar (\ub2e4\uc74c \ubb38\uc790(\uc5f4)\ub97c \uac00\ub9ac\ud0b4)\ub97c \uc774\uc6a9. \ubc18\ubcf5\uc801\uc73c\ub85c \uc218\ud589\ub418\uba70, \ubaa8\ub4e0 \uc635\uc158\uc744 \ud30c\uc2f1\ud558\uba74 -1 \uc744 \ub9ac\ud134. getopt() \uc758 \ub3d9\uc791\uc744 \ucd08\uae30\ud654\ud558\ub824\uba74 optind=1 \ub85c \uc124\uc815. \uc778\uc790\uac00 optstring \uc5d0 \ud3ec\ud568\ub41c \uc635\uc158(\ubb38\uc790)\uac00 \uc544\ub2c8\uba74 ? \ub97c \ub9ac\ud134\ud558\uace0, \uc5d0\ub7ec\ub97c \ucd9c\ub825. \uadf8\ub9ac\uace0 optopt \uc5d0 \ud604\uc7ac \uc635\uc158 \uc778\uc790(\ubb38\uc790)\ub97c \uc800\uc7a5. \uc778\uc790\uac00 optstring \uc5d0 \ud574\ub2f9\ud558\ub294 \uc635\uc158\uc774\ub77c\uba74, \ud574\ub2f9\ud558\ub294 \uc635\uc158 \ubb38\uc790\ub97c \ub9ac\ud134. \ub9cc\uc77c \ucd94\uac00 \uc778\uc790\uac00 \ud544\uc694\ud55c \uc635\uc158\uc774\ub77c\uba74 optarg \uc5d0 \ucd94\uac00 \uc778\uc790\ub294 optarg \uc5d0 \uc800\uc7a5(\ubcf5\uc81c\uac00 \uc544\ub2cc, \ubb38\uc790\uc5f4\uc758 \uc8fc\uc18c\ub97c \uc800\uc7a5). \ub9ac\ud134 \uac12: \ubaa8\ub4e0 \uc635\uc158\uc744 \ud30c\uc2f1\ud558\uba74 -1 \uc744 \ub9ac\ud134. \ud574\ub2f9\ud558\ub294 \uc635\uc158\uc774 \uc544\ub2c8\uba74, ? \ub97c \ub9ac\ud134\ud558\uace0 optopt \uc5d0 \uc5d0\ub7ec \ubb38\uc790\ub97c \uc800\uc7a5. \ud574\ub2f9\ud558\ub294 \uc635\uc158\uc774\ub77c\uba70, \ud574\ub2f9 \uc635\uc158 \ubb38\uc790\ub97c \ub9ac\ud134\ud558\uace0, \ucd94\uac00 \uc778\uc790\uac00 \ud544\uc694\ud55c \uc635\uc158\uc740 optarg \uc5d0 \ucd94\uac00 \uc778\uc790\uac00 \uc800\uc7a5. e.g. shell\uc5d0\uc11c ./a.out -a -b \ub97c \uc218\ud589\ud55c \uacbd\uc6b0, a.out \uc5d0\uc11c getopt() \ub97c \uc218\ud589\ud558\uba74, \ucc98\uc74c\uc5d0 a , \ub450\ubc88\uc9f8\uc5d0 b , \uc138\ubc88\uc9f8\uc5d0 -1 \ub9ac\ud134. char c; while((c=getopt(argc, argv, hvf: ))==-1) { switch(c) { case 'h': printf( option 'h' ); break; case 'v': printf( option 'v' ); break; case 'f': printf( option 'f' ); printf( option argument is %s , optarg); // f\uc758 \ucd94\uac00 \uc778\uc790(argument) break; case '?': default: printf( unknown option %c , optopt); } } Example - getopt_example.c /* getopt_example.c */ #include stdio.h #include stdlib.h #include string.h #include getopt.h // optarg and optopt are already decleared getopt.h #define OPTFLG_H 0x01 #define OPTFLG_V 0x02 #define OPTFLG_F 0x04 void main(int argc, char* const *argv) { int c; unsigned char flags=0x00; char farg[128]; while((c=getopt(argc, argv, hvf: ))!=-1) { switch(c) { case 'h': flags|=OPTFLG_H; break; case 'v': flags|=OPTFLG_V; break; case 'f': flags|=OPTFLG_F; memset(farg, 0, sizeof(farg)); memcpy(farg, optarg, strlen(optarg)); break; case '?': printf( Unknown flag : %c.\\n , optopt); break; } } if(flags OPTFLG_H) printf( option 'h'\\n ); if(flags OPTFLG_V) printf( option 'v'\\n ); if(flags OPTFLG_F) printf( option 'f' : %s\\n , farg); } \uc2e4\ud589 \uacb0\uacfc - getopt_example.c $ ./a.out -hf abc -v option 'h' option 'v' option 'f' : abc $ getopt_long() int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); it parse short option and long option in a argument vector. getopt() \uc640 \uc720\uc0ac\ud558\uac8c \ub3d9\uc791. -- \ub85c \uc2dc\uc791\ud558\ub294 \ubb38\uc790\uc5f4 \uc635\uc158\uc744 \ud30c\uc2f1. (GNU extension) --arg=pram \ub610\ub294 --arg pram \ucc98\ub7fc \ucd94\uac00 \uc778\uc790\ub97c \uc0ac\uc6a9 \uac00\ub2a5. - \ub85c \uc2dc\uc791\ud55c \uc778\uc790\uc778 \uacbd\uc6b0, short option \uc774 \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc74c. longopts : \uc0ac\uc6a9\ud560 struct option \ubc30\uc5f4, long \uc635\uc158\uc744 \uc815\uc758, struct option \uc740 getopt.h \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\uc74c. struct option { const char *name; int has_arg; int *flag; int val; } name : long \uc635\uc158\uc758 \uc774\ub984(\ubb38\uc790\uc5f4). e.g. --arg \uc774\uba74 arg . has_arg : \ucd94\uac00\uc801\uc778 \uc778\uc790\uc758 \uc0ac\uc6a9 \uc720\ubb34 no_argument : defined 0, \ucd94\uac00 \uc778\uc790\uac00 \uc5c6\uc74c. required_argument : defined 1, \ucd94\uac00 \uc778\uc790\uac00 \ubc18\ub4dc\uc2dc \uc0ac\uc6a9. optional_argument : defined 2, \ucd94\uac00 \uc778\uc790\uac00 \uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9. flag : getopt_long() \uc758 \ub9ac\ud134 \ubc29\ubc95\uc744 \uc9c0\uc815. NULL : getopt_long() \uc740 val \uc744 \ub9ac\ud134. (\ubcf4\ud1b5 val \uc740 name \uc5d0 \ud574\ub2f9\ud558\ub294 short option \ubb38\uc790) non-zero : getopt_long() \uc740 0 \uc744 \ub9ac\ud134\ud558\uace0, val \uc758 \uac12\uc744 flag \uac00 \uac00\ub9ac\ud0a4\ub294 \ubcc0\uc218\uc5d0 \uc800\uc7a5. \uc5d0\ub7ec \uc2dc, \uc800\uc7a5 \uc548\ud568. val : getopt_long() \uc774 \ub9ac\ud134\ud558\ub294 \uac12. flag \uc0ac\uc6a9\uc2dc, flag \uac00 \uac00\ub9ac\ud0a4\ub294 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ub420 \uac12. option \uad6c\uc870\uccb4 \ubc30\uc5f4 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub294 \ubaa8\ub450 0\uc73c\ub85c \uc124\uc815\ub418\uc5b4\uc57c \ud55c\ub2e4. longindex : NULL \uc774\uba74 \uc548\ub428. \ub9e4\uce6d\ub41c \uc635\uc158\uc774 longopts \uc5d0\uc11c \uc120\ud0dd\ub41c \uc635\uc158\uc758 index \ub97c \uc800\uc7a5\ud560 \ubcc0\uc218\uc758 \uc8fc\uc18c. \ub9ac\ud134 \uac12 : \ubaa8\ub4e0 \uc635\uc158\uc744 \ud30c\uc2f1\ud558\uba74 -1\uc744 \ub9ac\ud134. \ud574\ub2f9\ud558\ub294 \uc635\uc158( short/long option )\uc774 \uc544\ub2c8\uba74, ? \ub97c \ub9ac\ud134\ud558\uace0 optopt \uc5d0 \uc5d0\ub7ec \ubb38\uc790\ub97c \uc800\uc7a5. \ud574\ub2f9\ud558\ub294 \uc635\uc158\uc774\ub77c\uba70, val\ub97c \ub9ac\ud134\ud558\uace0, \ucd94\uac00 \uc778\uc790\uac00 \ud544\uc694\ud55c \uc635\uc158\uc740 optarg \uc5d0 \ucd94\uac00 \uc778\uc790\uac00 \uc800\uc7a5. flag \uac00 \uc9c0\uc815\ub41c \uc635\uc158\uc774 \ub9e4\uce6d\ud558\uba74 0 \uc744 \ub9ac\ud134\ud558\uace0, flag \uac00 \uc9c0\uc815\ud55c \ubcc0\uc218\uc5d0 val \uc744 \uc800\uc7a5. Example - getopt_long_example.c /* getopt_long_example.c */ #include stdio.h #include stdlib.h #include string.h #include getopt.h #define MAJOR_VER 1 #define MINOR_VER 0 #define OPTFLG_H 0x01 #define OPTFLG_V 0x02 #define OPTFLG_P 0x04 void help() { printf( -h, --help print help.\\n -v, --version print version.\\n -p, --print print optarg.\\n -d, --debug print debug message\\n ); } void main(int argc, char* const *argv) { int o, debug=0, optflg=0, optlind=0; char arg[128]; struct option lopts[]={ { help , no_argument, 0, 'h'}, { version , no_argument, 0, 'v'}, { print , required_argument, 0, 'p'}, { debug , no_argument, debug, 1}, {0, 0, 0, 0} }; while((o=getopt_long(argc, argv, hvp: , lopts, optlind))!=-1) { switch(o) { case 0: break; case 'h': optflg|=OPTFLG_H; break; case 'v': optflg|=OPTFLG_V; break; case 'p': optflg|=OPTFLG_P; memset(arg, 0, sizeof(arg)); memcpy(arg, optarg, strlen(optarg)); break; case '?': default: printf( unknown option %c\\n , optopt); } } if(debug) printf( DEBUG!!!\\n ); if(optflg OPTFLG_H) help(); if(optflg OPTFLG_V) printf( getopt_long example ver.%d.%d\\n , MAJOR_VER, MINOR_VER); if(optflg OPTFLG_P) printf( optional argument is \\ %s\\ .\\n , arg); } \uc2e4\ud589 \uacb0\uacfc - getopt_long_example.c $ ./a.out --debug -vh --print Hello DEBUG!!! -h, --help print help. -v, --version print version. -p, --print print optarg. -d, --debug print debug message getopt_long example ver.1.0 optional argument is Hello . $ getopt_long_only int getopt_long_only(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); getopt_long() \uc640 \uac70\uc758 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791. getopt_long_only() \uc5d0\uc11c\ub294 - \uc640 -- \ub85c long option \uc0ac\uc6a9. getopt_long_only() \uc5d0\uc11c\ub294 - \uc5d0 short option \uc774 \uc788\uc73c\uba74 long option \ud30c\uc2f1 \uc548\ub428. getopt_long_only() \uc5d0\uc11c\ub294 - \uc5d0\uc11c \uc5f0\uc18d\ub41c short option \ud30c\uc2f1 \uc548\ub428(\ud558\ub098\ub9cc \uac00\ub2a5). long option \ub9cc \uc0ac\uc6a9\ud560\uac70\ub77c\uba74, optstring \uc744 \"\" (double quotation mark pair)\ub85c \uc9c0\uc815. \"\" \uc740 NULL\uc774 \uc544\ub2cc empty-string . Example - getopt_long_only_example.c /* getopt_long_only_example.c */ #include stdio.h #include stdlib.h #include string.h #include getopt.h #define MAJOR_VER 1 #define MINOR_VER 0 #define OPTFLG_H 0x01 #define OPTFLG_V 0x02 #define OPTFLG_P 0x04 void help() { printf( -h, --help print help.\\n -v, --version print version.\\n -p, --print print optarg.\\n -d, --debug print debug message\\n ); } void main(int argc, char* const *argv) { int o, debug=0, optflg=0, optlind=0; char arg[128]; struct option lopts[]={ { help , no_argument, 0, 'h'}, { version , no_argument, 0, 'v'}, { print , required_argument, 0, 'p'}, { debug , no_argument, debug, 1}, {0, 0, 0, 0} }; while((o=getopt_long_only(argc, argv, , lopts, optlind))!=-1) { switch(o) { case 0: break; case 'h': optflg|=OPTFLG_H; break; case 'v': optflg|=OPTFLG_V; break; case 'p': optflg|=OPTFLG_P; memset(arg, 0, sizeof(arg)); memcpy(arg, optarg, strlen(optarg)); break; case '?': default: printf( unknown option %c\\n , optopt); } } if(debug) printf( DEBUG!!!\\n ); if(optflg OPTFLG_H) help(); if(optflg OPTFLG_V) printf( getopt_long example ver.%d.%d\\n , MAJOR_VER, MINOR_VER); if(optflg OPTFLG_P) printf( optional argument is \\ %s\\ .\\n , arg); } \uc2e4\ud589 \uacb0\uacfc - getopt_long_only_example.c $ ./a.out -debug -version --help -print=Hello DEBUG!!! -h, --help print help. -v, --version print version. -p, --print print optarg. -d, --debug print debug message getopt_long example ver.1.0 optional argument is Hello . $ \ucd94\uac00\uc0ac\ud56d getsubopt() : getopt() , getopt_long() \uc73c\ub85c \ud30c\uc2f1\ub41c \uc778\uc790\uc5d0\uc11c \ud1a0\ud070\uc744 \uae30\uc900\uc73c\ub85c \ubb38\uc790\uc5f4\uc744 \ud30c\uc2f1. References [1] http://www.joinc.co.kr/w/man/3/getopt [2] http://soooprmx.com/wp/archives/4993","title":"C"},{"location":"api/c/#primitive-system-data-type","text":"\uc18c\ud504\ud2b8\uc6e8\uc5b4\uc758 \uc774\uc2dd\uc131\uc744 \uc704\ud574 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc790\ub8cc\ud615(\uc815\uc218 \uc790\ub8cc\ud615)\uc744 \uc0ac\uc6a9. \ud50c\ub7ab\ud3fc(platform)\ub9c8\ub2e4 \uc790\ub8cc\ud615(data type)\uc758 \ud06c\uae30\uac00 \ub2e4\ub97c \uc218\uc788\uc74c. e.g. C\uc5b8\uc5b4\uc758 \uae30\ubcf8 \uc790\ub8cc\ud615 \uc911 long \ud0c0\uc785\uc740 32-bit Linux gcc \ucef4\ud30c\uc77c\ub7ec\uc5d0\uc11c 4 bytes (32-bit), 64-bit Linux gcc \ucef4\ud30c\uc77c\ub7ec\uc5d0\uc11c 8 bytes (64-bit). \uc815\uc218 \ube44\ud2b8 \uae38\uc774\uc640 \ubc14\uc774\ud2b8 \uae38\uc774\uac00 \ubb38\uc81c\uac00 \ub420 \ub54c, char \ub610\ub294 short , int , long , long long \uacfc \uac19\uc740 \uc790\ub8cc\ud615 \ub300\uc2e0 \uace0\uc815 \uae38\uc774 \uc790\ub8cc\ud615\uc744 \uc774\uc6a9. [1] ISO \uac00 \uac1c\ubc1c\ud55c C \uc5b8\uc5b4 \ud45c\uc900 ISO/IEC 9899 \uc5d0\uc11c\ub294 char \ub610\ub294 short , int , long , long long \uac19\uc740 \uc790\ub8cc\ud615\uc758 \uae38\uc774(\ube44\ud2b8 \uae38\uc774)\uc5d0 \ub300\ud55c \ucc98\ub9ac \uc2dc\uc2a4\ud15c\ub9c8\ub2e4 \uc815\uc758\ud558\ub294 \uac83\uc774 \ud5c8\uc6a9\ub418\uba70, \uc774\uac83\uc740 \uc774\uc2dd\uc131 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0b4. [1] 1999\ub144\uc5d0 \uac1c\uc815\ub41c ISO/IEC 9899: 1999 \uc5d0\uc11c\ub3c4 \uc774 \ubb38\uc81c\uc758 \uc7a0\uc7ac\uc801\uc778 \uc6d0\uc778\uc740 \ud574\uacb0\ub418\uc9c0 \uc54a\uc558\uc9c0\ub9cc, \ube44\ud2b8 \uae38\uc774\ub97c \uace0\uc720\ud558\uac8c \uc815\uc758\ud55c \uc790\ub8cc\ud615\uc774 \ucd94\uac00. \uc774 \ud615\uc2dd\uc740 stdint.h \uc5d0 \uc815\uc758. [1] # include stdint.h [u]intN_t : \uc694\uad6c\ub418\ub294 bit\uc758 \uae38\uc774\ub97c N\uc5d0 \uba85\uc2dc\ud558\uc5ec \uc0ac\uc6a9\ud558\uba70, u\ub294 unsigned. \uc774\ub7ec\ud55c \ubc29\uc2dd\uc740 C99 \ud45c\uc900\uc5d0 \uc815\uc758. Exact-width integer types. Integer types having exactly the specified width typedef singed char int8_t; // signed 8-bit integer typedef unsigned char uint8_t; // unsigned 8-bit integer typedef singed int int16_t; // signed 16-bit integer typedef unsigned int uint16_t; // unsigned 16-bit integer typedef singed long int int32_t; // signed 32-bit integer typedef unsigned long int uint32_t; // unsigned 32-bit integer typedef singed long long int int64_t; // signed 64-bit integer typedef unsigned long long int uint64_t; // unsigned 64-bit integer","title":"Primitive System Data Type"},{"location":"api/c/#reference","text":"[1] http://blog.daum.net/_blog/BlogTypeView.do?blogid=09ehJ articleno=18230429 categoryId=884391 regdt=20100414204400 [2] http://mgoons.tistory.com/4","title":"Reference"},{"location":"api/c/#about-getopt","text":"\uc2e4\ud589 \uba85\ub839(execution command)\uc758 \uc778\uc790(arguments) \ud30c\uc2f1(parsing)\ub97c \ub3c4\uc640\uc8fc\ub294 \ud568\uc218 \uac01 \uc778\uc790\ub4e4\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uacf5\ubc31 ' '\uacfc single/double quotation mark ' , \" \ub85c \uad6c\ubd84 C/C++ \uc18c\uc2a4 \ucf54\ub4dc\uc758 main(int argc, char *argv[]) \uc758 parameter\ub85c \uc0ac\uc6a9 int argc : \uc778\uc790\uc758 \uac2f\uc218, 0\ubc88\uc9f8\ub294 \uc2e4\ud589\uba85\ub839\uc744 \ud3ec\ud568 char *argv[] : \uc778\uc790 vector, \ubb38\uc790\uc5f4 \ubc30\uc5f4 main(int argc, char *argv[]) { #if 0 e.g. argc, argv\uc758 \uac12. $ ./a.out -a -b -c data -d e.txt argc=7 argv[0]= ./a.out , argv[1]= -a , argv[2]= -b , argv[3]= -c argv[4]= data , argv[5]= -d , argv[6]= e.txt #endif } \ub9ac\ub205\uc2a4\uc5d0\uc11c \ubcf4\ud1b5 - (dash)\ub85c \uc635\uc158\uc744 \uc0ac\uc6a9, \uc635\uc158 \uc778\uc790\uc758 \uc2dc\uc791\ud558\ub294 - \ub294 \ubb38\uc790, -- \ub294 \ubb38\uc790\uc5f4\ub85c \uad6c\ubd84. \uc774\ub7f0 \ud615\uc2dd\uc758 \uc635\uc158 \uc778\uc790\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub85c getopt() \uc0ac\uc6a9. ( - \ub85c \uc2dc\uc791\ud558\ub294 \ubb38\uc790 \uc635\uc158; short option ) GNU extension\uc73c\ub85c getopt_long() , getopt_long_only() \uc0ac\uc6a9. ( -- \ub85c \uc2dc\uc791\ud558\ub294 \ubb38\uc790\uc5f4 \uc635\uc158; long option )","title":"About getopt()"},{"location":"api/c/#man-getopt","text":"man 3 getopt GETOPT(3) NAME getopt, getopt_long, getopt_long_only, optarg, optind, opterr, optopt - Parse command-line options SYNOPSIS #include unistd.h int getopt(int argc, char * const argv[], const char *optstring); extern char *optarg; extern int optind, opterr, optopt; #include getopt.h int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); int getopt_long_only(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); Feature Test Macro Requirements for glibc (see feature_test_macros(7)): getopt(): _POSIX_C_SOURCE = 2 || _XOPEN_SOURCE getopt_long(), getopt_long_only(): _GNU_SOURCE","title":"man getopt"},{"location":"api/c/#_1","text":"optarg : \ud574\ub2f9 \uc635\uc158\uc758 \ucd94\uac00\uc801\uc778 \uc778\uc790(\ubb38\uc790\uc5f4). optind : \ud604\uc7ac argv\ub97c \uac00\ub9ac\ud0a4\ub294 index, 1\ubd80\ud130 \uc2dc\uc791. opterr : getopt()\uc758 \uc5d0\ub7ec \ucd9c\ub825 flag, opterr=1\uc774\uba74 \ucd9c\ub825, 0\uc774\uba74 \ucd9c\ub825 \uc548\ud568. optopt : \uc5d0\ub7ec\uac00 \ub09c \ubb38\uc790\ub97c \uc800\uc7a5. e.g. \uc635\uc158 \uc778\uc790\uac00 d \uc774\uace0 optsring=\"abc\" \ub77c\uba74, ? \ub97c \ub9ac\ud134\ud558\uace0 optopt='d' .","title":"\uc678\ubd80 \uc804\uc5ed \ubcc0\uc218"},{"location":"api/c/#getopt","text":"int getopt(int argc, char * const argv[], const char *optstring); it parses short option in a argument vector. argc : \uc778\uc790\uc758 \ucd1d \uac1c\uc218, \ubcf4\ud1b5 main() \uc758 argc\ub97c \uc0ac\uc6a9. argv : \uc778\uc790\uc758 \ubb38\uc790\uc5f4 \ubc30\uc5f4, \ubcf4\ud1b5 main() \uc758 argv \ub97c \uc0ac\uc6a9. optstring : \uc635\uc158\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ubb38\uc790\ub4e4\ub85c \uad6c\uc131\ub41c \ubb38\uc790\uc5f4. \ucd94\uac00\uc801\uc778 \uc778\uc790\uac00 \ud544\uc694\ud55c \uc635\uc158 \ubb38\uc790\ub294 \ub4a4\uc5d0 : \ub610\ub294 :: \ub97c \uc0ac\uc6a9. : \ub294 \uc635\uc158\uc758 \ucd94\uac00 \uc778\uc790\ub97c \uacf5\ubc31 (' ') \ub610\ub294 \ub2e4\uc74c \ubb38\uc790\ubd80\ud130 \uc778\uc790\ub85c \ucde8\uae09\ud558\uc5ec optarg \uc5d0 \uc800\uc7a5 :: \ub294 \uc635\uc158\uc758 \ucd94\uac00 \uc778\uc790\ub97c \ub2e4\uc74c \ubb38\uc790\ubd80\ud130 \ubb38\uc790\uc5f4\ub85c \ucde8\uae09 optarg \uc5d0 \uc800\uc7a5. \uacf5\ubc31 (' ')\uc740 \ud5c8\uc6a9\uc548\ud568. optstring \uc758 \uccab \ubb38\uc790\uac00 - \uc778 \uacbd\uc6b0, ? \ub300\uc2e0 1 \ub97c \ub9ac\ud134\ud558\uba70, \uc624\ub958 \ucd9c\ub825\uc744 \ud558\uc9c0 \uc54a\uc74c. optstring \uc758 \uccab \ubb38\uc790\uac00 + \uc778 \uacbd\uc6b0, \uc778\uc790\uc5d0 \ub300\ud574 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uba74 \ubc14\ub85c \ud30c\uc2f1\uc744 \uc911\uc9c0( -1 \ub97c \ub9ac\ud134). optstring \uc758 \uccab \ubb38\uc790\uac00 : \uc778 \uacbd\uc6b0( - , + \ub2e4\uc74c\uc5d0 \uc0ac\uc6a9\ud558\uba74 \uc911\ubcf5 \uac00\ub2a5), \uc624\ub958\ub97c \ucd9c\ub825\ud558\uc9c0 \uc54a\uc74c. optstring \uc758 \uccab \ubb38\uc790\uac00 ':'\uc778 \uacbd\uc6b0, man 3 getopt \uc5d0\uc11c\ub294 ? \ub300\uc2e0 : \ub97c \ub9ac\ud134\ud55c\ub2e4\uace0 \ub418\uc5b4 \uc788\uc73c\ub098, \ub3d9\uc791\ub418\uc9c0 \uc54a\uc74c. (ubuntu 16 lts, glibc 2.23 \uae30\uc900) e.g. \uc635\uc158\uc774 a , b , c \uc774\uace0 b \ub294 \ucd94\uac00\uc801\uc778 \uc778\uc790\uac00 \ud544\uc694\ud558\ub2e4\uba74 b \ub4a4\uc5d0 : \ub97c \uc0ac\uc6a9, optstring=\"ab:c\" . argv \uc5d0\uc11c \uc635\uc158 \uc694\uc18c(element)\ub97c \uac80\uc0c9, optnid \uc640 \ud568\uc218 \ub0b4\ubd80\uc758 static \ubcc0\uc218 nextchar (\ub2e4\uc74c \ubb38\uc790(\uc5f4)\ub97c \uac00\ub9ac\ud0b4)\ub97c \uc774\uc6a9. \ubc18\ubcf5\uc801\uc73c\ub85c \uc218\ud589\ub418\uba70, \ubaa8\ub4e0 \uc635\uc158\uc744 \ud30c\uc2f1\ud558\uba74 -1 \uc744 \ub9ac\ud134. getopt() \uc758 \ub3d9\uc791\uc744 \ucd08\uae30\ud654\ud558\ub824\uba74 optind=1 \ub85c \uc124\uc815. \uc778\uc790\uac00 optstring \uc5d0 \ud3ec\ud568\ub41c \uc635\uc158(\ubb38\uc790)\uac00 \uc544\ub2c8\uba74 ? \ub97c \ub9ac\ud134\ud558\uace0, \uc5d0\ub7ec\ub97c \ucd9c\ub825. \uadf8\ub9ac\uace0 optopt \uc5d0 \ud604\uc7ac \uc635\uc158 \uc778\uc790(\ubb38\uc790)\ub97c \uc800\uc7a5. \uc778\uc790\uac00 optstring \uc5d0 \ud574\ub2f9\ud558\ub294 \uc635\uc158\uc774\ub77c\uba74, \ud574\ub2f9\ud558\ub294 \uc635\uc158 \ubb38\uc790\ub97c \ub9ac\ud134. \ub9cc\uc77c \ucd94\uac00 \uc778\uc790\uac00 \ud544\uc694\ud55c \uc635\uc158\uc774\ub77c\uba74 optarg \uc5d0 \ucd94\uac00 \uc778\uc790\ub294 optarg \uc5d0 \uc800\uc7a5(\ubcf5\uc81c\uac00 \uc544\ub2cc, \ubb38\uc790\uc5f4\uc758 \uc8fc\uc18c\ub97c \uc800\uc7a5). \ub9ac\ud134 \uac12: \ubaa8\ub4e0 \uc635\uc158\uc744 \ud30c\uc2f1\ud558\uba74 -1 \uc744 \ub9ac\ud134. \ud574\ub2f9\ud558\ub294 \uc635\uc158\uc774 \uc544\ub2c8\uba74, ? \ub97c \ub9ac\ud134\ud558\uace0 optopt \uc5d0 \uc5d0\ub7ec \ubb38\uc790\ub97c \uc800\uc7a5. \ud574\ub2f9\ud558\ub294 \uc635\uc158\uc774\ub77c\uba70, \ud574\ub2f9 \uc635\uc158 \ubb38\uc790\ub97c \ub9ac\ud134\ud558\uace0, \ucd94\uac00 \uc778\uc790\uac00 \ud544\uc694\ud55c \uc635\uc158\uc740 optarg \uc5d0 \ucd94\uac00 \uc778\uc790\uac00 \uc800\uc7a5. e.g. shell\uc5d0\uc11c ./a.out -a -b \ub97c \uc218\ud589\ud55c \uacbd\uc6b0, a.out \uc5d0\uc11c getopt() \ub97c \uc218\ud589\ud558\uba74, \ucc98\uc74c\uc5d0 a , \ub450\ubc88\uc9f8\uc5d0 b , \uc138\ubc88\uc9f8\uc5d0 -1 \ub9ac\ud134. char c; while((c=getopt(argc, argv, hvf: ))==-1) { switch(c) { case 'h': printf( option 'h' ); break; case 'v': printf( option 'v' ); break; case 'f': printf( option 'f' ); printf( option argument is %s , optarg); // f\uc758 \ucd94\uac00 \uc778\uc790(argument) break; case '?': default: printf( unknown option %c , optopt); } }","title":"getopt()"},{"location":"api/c/#example-getopt_examplec","text":"/* getopt_example.c */ #include stdio.h #include stdlib.h #include string.h #include getopt.h // optarg and optopt are already decleared getopt.h #define OPTFLG_H 0x01 #define OPTFLG_V 0x02 #define OPTFLG_F 0x04 void main(int argc, char* const *argv) { int c; unsigned char flags=0x00; char farg[128]; while((c=getopt(argc, argv, hvf: ))!=-1) { switch(c) { case 'h': flags|=OPTFLG_H; break; case 'v': flags|=OPTFLG_V; break; case 'f': flags|=OPTFLG_F; memset(farg, 0, sizeof(farg)); memcpy(farg, optarg, strlen(optarg)); break; case '?': printf( Unknown flag : %c.\\n , optopt); break; } } if(flags OPTFLG_H) printf( option 'h'\\n ); if(flags OPTFLG_V) printf( option 'v'\\n ); if(flags OPTFLG_F) printf( option 'f' : %s\\n , farg); }","title":"Example - getopt_example.c"},{"location":"api/c/#-getopt_examplec","text":"$ ./a.out -hf abc -v option 'h' option 'v' option 'f' : abc $","title":"\uc2e4\ud589 \uacb0\uacfc - getopt_example.c"},{"location":"api/c/#getopt_long","text":"int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); it parse short option and long option in a argument vector. getopt() \uc640 \uc720\uc0ac\ud558\uac8c \ub3d9\uc791. -- \ub85c \uc2dc\uc791\ud558\ub294 \ubb38\uc790\uc5f4 \uc635\uc158\uc744 \ud30c\uc2f1. (GNU extension) --arg=pram \ub610\ub294 --arg pram \ucc98\ub7fc \ucd94\uac00 \uc778\uc790\ub97c \uc0ac\uc6a9 \uac00\ub2a5. - \ub85c \uc2dc\uc791\ud55c \uc778\uc790\uc778 \uacbd\uc6b0, short option \uc774 \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc74c. longopts : \uc0ac\uc6a9\ud560 struct option \ubc30\uc5f4, long \uc635\uc158\uc744 \uc815\uc758, struct option \uc740 getopt.h \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\uc74c. struct option { const char *name; int has_arg; int *flag; int val; } name : long \uc635\uc158\uc758 \uc774\ub984(\ubb38\uc790\uc5f4). e.g. --arg \uc774\uba74 arg . has_arg : \ucd94\uac00\uc801\uc778 \uc778\uc790\uc758 \uc0ac\uc6a9 \uc720\ubb34 no_argument : defined 0, \ucd94\uac00 \uc778\uc790\uac00 \uc5c6\uc74c. required_argument : defined 1, \ucd94\uac00 \uc778\uc790\uac00 \ubc18\ub4dc\uc2dc \uc0ac\uc6a9. optional_argument : defined 2, \ucd94\uac00 \uc778\uc790\uac00 \uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9. flag : getopt_long() \uc758 \ub9ac\ud134 \ubc29\ubc95\uc744 \uc9c0\uc815. NULL : getopt_long() \uc740 val \uc744 \ub9ac\ud134. (\ubcf4\ud1b5 val \uc740 name \uc5d0 \ud574\ub2f9\ud558\ub294 short option \ubb38\uc790) non-zero : getopt_long() \uc740 0 \uc744 \ub9ac\ud134\ud558\uace0, val \uc758 \uac12\uc744 flag \uac00 \uac00\ub9ac\ud0a4\ub294 \ubcc0\uc218\uc5d0 \uc800\uc7a5. \uc5d0\ub7ec \uc2dc, \uc800\uc7a5 \uc548\ud568. val : getopt_long() \uc774 \ub9ac\ud134\ud558\ub294 \uac12. flag \uc0ac\uc6a9\uc2dc, flag \uac00 \uac00\ub9ac\ud0a4\ub294 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ub420 \uac12. option \uad6c\uc870\uccb4 \ubc30\uc5f4 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub294 \ubaa8\ub450 0\uc73c\ub85c \uc124\uc815\ub418\uc5b4\uc57c \ud55c\ub2e4. longindex : NULL \uc774\uba74 \uc548\ub428. \ub9e4\uce6d\ub41c \uc635\uc158\uc774 longopts \uc5d0\uc11c \uc120\ud0dd\ub41c \uc635\uc158\uc758 index \ub97c \uc800\uc7a5\ud560 \ubcc0\uc218\uc758 \uc8fc\uc18c. \ub9ac\ud134 \uac12 : \ubaa8\ub4e0 \uc635\uc158\uc744 \ud30c\uc2f1\ud558\uba74 -1\uc744 \ub9ac\ud134. \ud574\ub2f9\ud558\ub294 \uc635\uc158( short/long option )\uc774 \uc544\ub2c8\uba74, ? \ub97c \ub9ac\ud134\ud558\uace0 optopt \uc5d0 \uc5d0\ub7ec \ubb38\uc790\ub97c \uc800\uc7a5. \ud574\ub2f9\ud558\ub294 \uc635\uc158\uc774\ub77c\uba70, val\ub97c \ub9ac\ud134\ud558\uace0, \ucd94\uac00 \uc778\uc790\uac00 \ud544\uc694\ud55c \uc635\uc158\uc740 optarg \uc5d0 \ucd94\uac00 \uc778\uc790\uac00 \uc800\uc7a5. flag \uac00 \uc9c0\uc815\ub41c \uc635\uc158\uc774 \ub9e4\uce6d\ud558\uba74 0 \uc744 \ub9ac\ud134\ud558\uace0, flag \uac00 \uc9c0\uc815\ud55c \ubcc0\uc218\uc5d0 val \uc744 \uc800\uc7a5.","title":"getopt_long()"},{"location":"api/c/#example-getopt_long_examplec","text":"/* getopt_long_example.c */ #include stdio.h #include stdlib.h #include string.h #include getopt.h #define MAJOR_VER 1 #define MINOR_VER 0 #define OPTFLG_H 0x01 #define OPTFLG_V 0x02 #define OPTFLG_P 0x04 void help() { printf( -h, --help print help.\\n -v, --version print version.\\n -p, --print print optarg.\\n -d, --debug print debug message\\n ); } void main(int argc, char* const *argv) { int o, debug=0, optflg=0, optlind=0; char arg[128]; struct option lopts[]={ { help , no_argument, 0, 'h'}, { version , no_argument, 0, 'v'}, { print , required_argument, 0, 'p'}, { debug , no_argument, debug, 1}, {0, 0, 0, 0} }; while((o=getopt_long(argc, argv, hvp: , lopts, optlind))!=-1) { switch(o) { case 0: break; case 'h': optflg|=OPTFLG_H; break; case 'v': optflg|=OPTFLG_V; break; case 'p': optflg|=OPTFLG_P; memset(arg, 0, sizeof(arg)); memcpy(arg, optarg, strlen(optarg)); break; case '?': default: printf( unknown option %c\\n , optopt); } } if(debug) printf( DEBUG!!!\\n ); if(optflg OPTFLG_H) help(); if(optflg OPTFLG_V) printf( getopt_long example ver.%d.%d\\n , MAJOR_VER, MINOR_VER); if(optflg OPTFLG_P) printf( optional argument is \\ %s\\ .\\n , arg); }","title":"Example - getopt_long_example.c"},{"location":"api/c/#-getopt_long_examplec","text":"$ ./a.out --debug -vh --print Hello DEBUG!!! -h, --help print help. -v, --version print version. -p, --print print optarg. -d, --debug print debug message getopt_long example ver.1.0 optional argument is Hello . $","title":"\uc2e4\ud589 \uacb0\uacfc - getopt_long_example.c"},{"location":"api/c/#getopt_long_only","text":"int getopt_long_only(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); getopt_long() \uc640 \uac70\uc758 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791. getopt_long_only() \uc5d0\uc11c\ub294 - \uc640 -- \ub85c long option \uc0ac\uc6a9. getopt_long_only() \uc5d0\uc11c\ub294 - \uc5d0 short option \uc774 \uc788\uc73c\uba74 long option \ud30c\uc2f1 \uc548\ub428. getopt_long_only() \uc5d0\uc11c\ub294 - \uc5d0\uc11c \uc5f0\uc18d\ub41c short option \ud30c\uc2f1 \uc548\ub428(\ud558\ub098\ub9cc \uac00\ub2a5). long option \ub9cc \uc0ac\uc6a9\ud560\uac70\ub77c\uba74, optstring \uc744 \"\" (double quotation mark pair)\ub85c \uc9c0\uc815. \"\" \uc740 NULL\uc774 \uc544\ub2cc empty-string .","title":"getopt_long_only"},{"location":"api/c/#example-getopt_long_only_examplec","text":"/* getopt_long_only_example.c */ #include stdio.h #include stdlib.h #include string.h #include getopt.h #define MAJOR_VER 1 #define MINOR_VER 0 #define OPTFLG_H 0x01 #define OPTFLG_V 0x02 #define OPTFLG_P 0x04 void help() { printf( -h, --help print help.\\n -v, --version print version.\\n -p, --print print optarg.\\n -d, --debug print debug message\\n ); } void main(int argc, char* const *argv) { int o, debug=0, optflg=0, optlind=0; char arg[128]; struct option lopts[]={ { help , no_argument, 0, 'h'}, { version , no_argument, 0, 'v'}, { print , required_argument, 0, 'p'}, { debug , no_argument, debug, 1}, {0, 0, 0, 0} }; while((o=getopt_long_only(argc, argv, , lopts, optlind))!=-1) { switch(o) { case 0: break; case 'h': optflg|=OPTFLG_H; break; case 'v': optflg|=OPTFLG_V; break; case 'p': optflg|=OPTFLG_P; memset(arg, 0, sizeof(arg)); memcpy(arg, optarg, strlen(optarg)); break; case '?': default: printf( unknown option %c\\n , optopt); } } if(debug) printf( DEBUG!!!\\n ); if(optflg OPTFLG_H) help(); if(optflg OPTFLG_V) printf( getopt_long example ver.%d.%d\\n , MAJOR_VER, MINOR_VER); if(optflg OPTFLG_P) printf( optional argument is \\ %s\\ .\\n , arg); }","title":"Example - getopt_long_only_example.c"},{"location":"api/c/#-getopt_long_only_examplec","text":"$ ./a.out -debug -version --help -print=Hello DEBUG!!! -h, --help print help. -v, --version print version. -p, --print print optarg. -d, --debug print debug message getopt_long example ver.1.0 optional argument is Hello . $","title":"\uc2e4\ud589 \uacb0\uacfc - getopt_long_only_example.c"},{"location":"api/c/#_2","text":"getsubopt() : getopt() , getopt_long() \uc73c\ub85c \ud30c\uc2f1\ub41c \uc778\uc790\uc5d0\uc11c \ud1a0\ud070\uc744 \uae30\uc900\uc73c\ub85c \ubb38\uc790\uc5f4\uc744 \ud30c\uc2f1.","title":"\ucd94\uac00\uc0ac\ud56d"},{"location":"api/c/#references","text":"[1] http://www.joinc.co.kr/w/man/3/getopt [2] http://soooprmx.com/wp/archives/4993","title":"References"},{"location":"openssl/api/","text":"Message Digest dgst \uba85\ub839 \ud574\uc2dc(Hash), \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8(Message Digest) HMAC(Hashed MAC) \uc11c\uba85(Sign) \ubc0f \uac80\uc99d(Verify) Default \uc785/\ucd9c\ub825\uc740 stdin/stdout (\ud30c\uc77c \ubbf8\uc9c0\uc815 \uc2dc), hex \ucd9c\ub825 : default dgst \uac00 \uc544\ub2cc sha, sha1, ... \ub4f1 \ud2b9\uc815 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5, ( man \ucc38\uace0) \uc9c0\uc6d0\ud558\ub294 \uc54c\uace0\ub9ac\uc998 \ubaa9\ub85d\uc740 openssl list-message-digest-algorithms \ub85c \ud655\uc778 \uac00\ub2a5 \uc0ac\uc6a9\ud558\ub294 algorithm \uc740 openssl dgst -help (\ub610\ub294 man \ucc38\uace0) \uc0ac\uc6a9\ub418\ub294 \uc785\ub825 \ud30c\uc77c, ' infiles ...'\ub294 \uba85\ub839\ubb38 \ub9c8\uc9c0\ub9c9\uc5d0 \uc704\uce58\ud574\uc57c \ud568 man dgst \ucc38\uace0 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-hmac 'key'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-sign 'key file'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-verify 'key file'] [-signature 'outfile'] ['infiles ...'] ... Options are -c to output the digest with separating colons -r to output the digest in coreutils format -d to output debug info -hex output as hex dump -binary output in binary form -hmac arg set the HMAC key to arg -non-fips-allow allow use of non FIPS digest -sign file sign digest using private key in file -verify file verify a signature using public key in file -prverify file verify a signature using private key in file -keyform arg key file format (PEM or ENGINE) -out filename output to filename rather than stdout -signature file signature to verify -sigopt nm:v signature parameter -hmac key create hashed MAC with key -mac algorithm create MAC (not neccessarily HMAC) -macopt nm:v MAC algorithm parameters or key -engine e use engine e, possibly a hardware device. -gost-mac to use the gost-mac message digest algorithm -md_gost94 to use the md_gost94 message digest algorithm -md4 to use the md4 message digest algorithm -md5 to use the md5 message digest algorithm -mdc2 to use the mdc2 message digest algorithm -ripemd160 to use the ripemd160 message digest algorithm -sha to use the sha message digest algorithm -sha1 to use the sha1 message digest algorithm -sha224 to use the sha224 message digest algorithm -sha256 to use the sha256 message digest algorithm -sha384 to use the sha384 message digest algorithm -sha512 to use the sha512 message digest algorithm -whirlpool to use the whirlpool message digest algorithm \ud574\uc2dc(hash) \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8 \uac01 \ud30c\uc77c\uc5d0 \ub300\ud55c \ud574\uc2dc \uac12\uc744 \ucd9c\ub825, 3\uac1c \ud30c\uc77c\uc774 \uc785\ub825\uc774\uba74 3\uac1c\uc758 \ud574\uc2dc \uac12 \ucd9c\ub825 -binary \uc640 -hex \ub294 \ubca0\ud0c0\uc801\uc73c\ub85c \uc0ac\uc6a9 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] # e.g.1 openssl dgst -sha256 -out text.md text.txt # e.g.2 openssl sha256 -hex text.txt text2.txt text3.txt # output example for e.g.2 SHA256(text.txt)= a5532c7f2c9a18ae3976a91eddf93faf7f6ed1653fe7bf73daee1eddfc999577 SHA256(text2.txt)= 6be9867ae05e7505fb9bf3d59cfd2af13337fc17915cdeb099286b082f85bb39 SHA256(text3.txt)= a4c6d0d073ff1c3405bcd49d96d8c5dc3f4905402e254ffe725c55f8746e0aec # e.g.3 openssl dgst -sha256 -binary -out text.md text.txt # output example for e.g.3 hexdump text.md 0000000 53a5 7f2c 9a2c ae18 7639 1ea9 f9dd af3f 0000010 6e7f 65d1 e73f 73bf eeda dd1e 99fc 7795 0000020 HMAC \ud0a4(key) \uac00 \ud544\uc694 'key' \ub294 hex \uac12 openssl dgst 'algorithm' -hmac 'key' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst -sha256 -hmac hmackey1234 -out text.hmac text.txt \uc11c\uba85 \ubc0f \uac80\uc99d \ud0a4 \ud30c\uc77c(.pem, .key, ...)\uc774 \ud544\uc694, \ud0a4 \uc30d \ub610\ub294 \uac1c\uc778 \ud0a4 Default key encoding is PEM EC key pair \uc0dd\uc131 \ucc38\uace0 \ubc14\uc774\ub108\ub9ac(binary) \ub85c \ucd9c\ub825, dafault \uc11c\uba85(sign) openssl dgst 'algorithm' -sign 'privkey file' [-out 'outfile'] ['infiles ...'] \uac80\uc99d(verify) openssl dgst 'algorithm' -verify 'pubkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' openssl dgst 'algorithm' -prverify 'privkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' Example output for signing message(or file) # \uc11c\uba85 \uc608) openssl dgst -sha224 -binary -out text.md text.txt openssl dgst -sha224 -sign ecprivkey.pem -out text.sign text.md Example output for verifying signature # \uac80\uc99d \uc6081) \uacf5\uac1c \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -verify ecpubkey.pem -signature text.sign text.md Verified OK # \uac80\uc99d \uc6082) \uac1c\uc778 \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -prverify ecprivkey.pem -signature text.sign text.md Verified OK enc About enc \ub300\uce6d \uc554\ud638 \uae30\ub2a5 (Symmetric cipher routines) \ud30c\uc77c \uc554\ud638\ud654/\ubcf5\ud638\ud654 \uae30\ubcf8\uc801\uc73c\ub85c stdin/stdout \uc0ac\uc6a9 man enc \ucc38\uace0 openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... Options are -in 'file' input file -out file output file -pass arg pass phrase source -e encrypt -d decrypt -a/-base64 base64 encode/decode, depending on encryption flag -k passphrase is the next argument -kfile passphrase is the first line of the file argument -md the next argument is the md to use to create a key from a passphrase. One of md2, md5, sha or sha1 -S salt in hex is the next argument -K/-iv key/iv in hex is the next argument -[pP] print the iv/key (then exit if -P) -bufsize n buffer size -nopad disable standard block padding -engine e use engine e, possibly a hardware device. \uc554\ud638\ud654 -e \uc635\uc158\uc774 \uae30\ubcf8\uac12, -e \uc774 \uc5c6\uc73c\uba74 \uae30\ubcf8\uc801\uc73c\ub85c \uc554\ud638\ud654 'cipher type' \ubaa9\ub85d\uc740 man enc \ub610\ub294 openssl enc -help \ub85c \ud655\uc778 \uac00\ub2a5 -help \ub294 \uc798\ubabb\ub41c \uc635\uc158\uc73c\ub85c openssl \uc5d0\uc11c \uc798\ubabb\ub41c \uc635\uc158\uc744 \uc2e4\ud589\ud558\uba74 'usage'\uac00 \ucd9c\ub825 openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) text.txt\ub97c AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc554\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.bin \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -e -aes-128-cbc -in text.txt -out text.bin # (2) key= password1234 \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin \\ -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5 \ubcf5\ud638\ud654 -d \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc57c \ubcf5\ud638\ud654 \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub294 \uc554\ud638\ud654\uc5d0 \uc0ac\uc6a9\ub41c \uc54c\uace0\ub9ac\uc998\uacfc \ud0a4 \uac12\uc774 \ub3d9\uc77c\ud574\uc57c \uc815\uc0c1\uc801\uc73c\ub85c \ubcf5\ud638\ud654\uac00 \uc774\ub8e8\uc5b4\uc9d0 IV\uc640 salt \uc9c0\uc815\ud574\uc11c \uc554\ud638\ud654\ud55c \uacbd\uc6b0, IV\uc640 salt\uac12\ub3c4 \ub3d9\uc77c\ud574\uc57c \ud568 key \uac12\ub9cc \uc785\ub825\ud55c \uacbd\uc6b0, key\uac12\uc744 \uae30\uc900\uc73c\ub85c IV\uc640 salt\uac00 \uc0dd\uc131\ub418\uc5b4 \uc554\ud638\ud654\ub418\ubbc0\ub85c, \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub3c4 key\uac12\ub9cc \uc785\ub825\ud574\uc57c \uc815\uc0c1\uc801\uc778 \ubcf5\ud638\ud654 \uac00\ub2a5 openssl enc -d 'cipher type' -in 'infile' -out 'outfile' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) \uc554\ud638\ud654\ub41c \ud30c\uc77c text.bin\uc744 AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud558\uc5ec \ubcf5\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.txt \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -d -aes-128-cbc -in text.bin -out text.txt # (2) key= password1234 \ub85c \uc554\ud638\ud654\ub41c \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5 EC key pair EC(Elliptic Curve) \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud55c \ud0a4 \uc0dd\uc131 Asymmetric key \uc54c\uace0\ub9ac\uc998\uc740 private key\ub97c \uc0dd\uc131\ud55c \ud6c4, private key\uc5d0 \ub300\uc751\ud558\ub294 public key\ub97c \uc0dd\uc131 Private key \uc0dd\uc131 default\ub85c PEM(Privacy-Enhanced Mail) \ud3ec\ub9f7\uc73c\ub85c \uc0dd\uc131 openssl ecparam -genkey -name 'curve name' -out 'outfile' Example openssl ecparam -genkey -name prime256v1 -out ecprivkey.pem Example - Encrypt private key openssl ec -aes-128-cbc -in ecprivkey.pem -out new_ecprivkey.pem # man enc \ucc38\uace0 Public key \uc0dd\uc131 openssl ec -in 'infile' -pubout -out 'outfile' * 'infile' : private key \ud30c\uc77c * -pubout : 'infile' \uc5d0 \ub300\uc751\ud558\ub294 \uacf5\uac1c \ud0a4 \ucd9c\ub825 * Example openssl ec -in ecprivkey.pem -pubout -out ecpubkey.pem ecparam \uc635\uc158 man ecparam \ucc38\uace0 ecparam [options] infile outfile where options are -inform arg input format - default PEM (DER or PEM) -outform arg output format - default PEM -in arg input file - default stdin -out arg output file - default stdout -noout do not print the ec parameter -text print the ec parameters in text form -check validate the ec parameters -C print a 'C' function creating the parameters -name arg use the ec parameters with 'short name' name -list_curves prints a list of all currently available curve 'short names' -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit -no_seed if 'explicit' parameters are chosen do not use the seed -genkey generate ec key -rand file files to use for random number input -engine e use engine e, possibly a hardware device ec \uc635\uc158 man ec \ucc38\uace0 ec [options] infile outfile where options are -inform arg input format - DER or PEM -outform arg output format - DER or PEM -in arg input file -passin arg input file pass phrase source -out arg output file -passout arg output file pass phrase source -engine e use engine e, possibly a hardware device. -des encrypt PEM output, instead of 'des' every other cipher supported by OpenSSL can be used -text print the key -noout dont print key out -param_out print the elliptic curve parameters -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit Settings for Root CA openssl\uc744 \uc774\uc6a9\ud558\uc5ec \uc778\uc99d\uc11c \ubc1c\uae09\uc744 \uc704\ud574 PKI \uc778\ud504\ub77c \uad6c\uc131 root CA \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ub514\ub809\ud130\ub9ac \ubc0f \ud30c\uc77c \uc900\ube44. Example sudo -s mkdir -p /opt/pki/root cd /opt/pki/root export ROOTCADIR=`pwd` mkdir certs crl newcerts private echo 1000 serial ; touch index.txt cp /etc/pki/tls/openssl.cnf $ROOTCADIR/openssl.cnf export OPENSSL_CONF=$ROOTCADIR/openssl.cnf Check root ca for files $ ls /opt/pki/root drwx------. 2 root 4096 Sep 20 21:23 private drwxr-xr-x. 2 root 4096 Sep 20 21:23 newcerts drwxr-xr-x. 2 root 4096 Sep 20 21:23 crl drwxr-xr-x. 2 root 4096 Sep 20 21:23 certs -rw-r--r--. 1 root 5 Sep 20 21:24 serial -rw-r--r--. 1 root 0 Sep 20 21:24 index.txt -rw-r--r--. 1 root 10923 Sep 20 21:24 openssl.cnf openssl.cnf \ub0b4\uc6a9 ... #################################################################### [ ca ] default_ca = CA_default # \uae30\ubcf8 CA \uc139\uc158 #################################################################### [ CA_default ] # default_ca \uc758 \uc9c0\uc815\ud55c \uc139\uc158 \uc2dc\uc791 \ubd80\ubd84 dir = /opt/pki/root # Where everything is kept # \uc704\uc5d0\uc11c \ub9cc\ub4e0 \uacbd\ub85c\ub85c \uc218\uc815 certs = $dir/certs # Where the issued certs are kept crl_dir = $dir/crl # Where the issued crl are kept database = $dir/index.txt # database index file. #unique_subject = no # Set to 'no' to allow creation of # several ctificates with same subject. new_certs_dir = $dir/newcerts # default place for new certs. certificate = $dir/cacert.pem # The CA certificate serial = $dir/serial # The current serial number crlnumber = $dir/crlnumber # the current crl number # must be commented out to leave a V1 CRL crl = $dir/crl.pem # The current CRL private_key = $dir/private/cakey.pem# The private key RANDFILE = $dir/private/.rand # private random number file x509_extensions = usr_cert # The extentions to add to the cert ... root CA key \uc0dd\uc131 \uc778\uc99d\uc11c \uc0dd\uc131\uc5d0 \ud544\uc694\ud55c CA\uc758 \uac1c\uc778\ud0a4 \ub97c \uc0dd\uc131. OpenSSL \uc758 \" EC key pair \uc0dd\uc131 \" \ucc38\uace0. Example cd $ROOTCA openssl ecparam -genkey -name prime256v1 -out private/cakey.pem openssl ec -in private/cakey.pem -out private/cakey.pem -aes256 chmod 400 private/cakey.pem root CA \uc778\uc99d\uc11c \uc0dd\uc131 \uc790\uac00 \uc11c\uba85(self-signed) \ub41c \uc778\uc99d\uc11c\ub97c \uc0dd\uc131. x509 \ud615\uc2dd\uc758 \uc778\uc99d\uc11c\ub85c \uc0dd\uc131. PEM\uc73c\ub85c \ucd9c\ub825(default) man req \ucc38\uace0. Example output openssl req -new -x509 -extensions v3_ca -key private/cakey.pem -out cacert.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Seoul Locality Name (eg, city) [Default City]:Seoul Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:root CA Common Name (eg, your name or your server's hostname) []:rootca.example.com Email Address []:rootca@example.com chmod 444 certs/ca.crt.pem \uc0ac\uc6a9\uc790 \uc778\uc99d\uc11c \uc0dd\uc131 CSR(Certificate Signing Request) \ub97c \uc0dd\uc131 \ud6c4, root CA\uc5d0\uac8c \uc778\uc99d\uc11c \ubc1c\ud589\uc744 \uc694\uccad. PEM\uc73c\ub85c \ucd9c\ub825(\uae30\ubcf8\uac12) \uc0ac\uc6a9\uc790 \uac1c\uc778 \ud0a4 \uc0dd\uc131 (at a host) \uc778\uc99d\uc11c\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uc778 \ud0a4\ub97c \uc0dd\uc131 \ud544\uc694. cd opt/pki mkdir host1 cd host1 openssl genrsa -out host1.key.pem CSR \uc0dd\uc131 (at a host) \uc0ac\uc6a9\uc790\uc758 \uac1c\uc778 \ud0a4\ub85c CSR \ud30c\uc77c \uc0dd\uc131. CSR \uc0dd\uc131 \uc2dc, Country, State, Locality, Organization \ub294 root CA\uc758 \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ud568(\uae30\ubcf8\uac12), openssl.cnf \uc5d0\uc11c \uc124\uc815 \uac00\ub2a5. openssl req -new -key host1.key.pem -out host1.csr.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Daejeon Locality Name (eg, city) [Default City]:Yuseong Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:host1 Common Name (eg, your name or your server's hostname) []:host1.example.com Email Address []:host1@example.com Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: \uc778\uc99d\uc11c \ubc1c\ud589 (at a root CA) CA\ub85c\ubd80\ud130 \uc778\uc99d\uc11c \ubc1c\ud589. \ubc1c\ud589 \uc131\uacf5 \uc2dc, serial \ubc88\ud638\uac00 \uc99d\uac00\ud558\uba70 index.txt\uc5d0 \ucd94\uac00. serial, index.txt\ub208 \uc784\uc758\ub85c \uc218\uc815\ud558\uba74 \uc548\ub428. man ca \ucc38\uace0. # \uae30\ubcf8\uc801\uc73c\ub85c 'serial\ubc88\ud638.pem' \ud615\uc2dd\uc73c\ub85c \uc0dd\uc131 openssl ca -in host1.csr.pem # \ucd9c\ub825 \ud30c\uc77c \uc774\ub984 \uc9c0\uc815 openssl ca -in host1.csr.pem -out host1.crt.pem \uc635\uc158 \uc5c6\uc774 \uc0ac\uc6a9\ud558\uba74 openssl.cnf\uc5d0\uc11c \uc815\uc758\ub41c CA\uc758 \ud0a4, \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9(\uae30\ubcf8\uac12). openssl.cnf \ucc38\uc870, -config \uc635\uc158\uc73c\ub85c openssl \uc124\uc815 \ud30c\uc77c \uc9c0\uc815 \uac00\ub2a5. \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 $ROOTCADIR/newcerts/\uc2dc\ub9ac\uc5bc\ubc88\ud638.pem \ud615\ud0dc\ub85c \uc0dd\uc131. \uc635\uc158\uc73c\ub85c CA \ud0a4, CA \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998, \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\uc758 \uc704\uce58\uc640 \uc774\ub984\uc744 \uc9c0\uc815 \uac00\ub2a5. MD \uc54c\uace0\ub9ac\uc998\uc740 CA \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ubc1c\ud589 \uac00\ub2a5. \uc778\uc99d\uc11c \ubc1c\ud589 \uc2dc ca \uba85\ub839 openssl ca -in 'csr infile' [-config 'config file'] [-keyfile 'CA keyfile'] [-cert 'CA certificate file'] [-notext] [-md 'md algorithm] [-out 'cert outfile'] ... openssl.cnf \ub0b4\uc6a9 dir = /opt/pki/root # root CA basedir. certs = $dir/certs new_certs_dir = $dir/newcerts # use if no -out option. certificate = $dir/cacert.pem # use if no -cert option. private_key = $dir/private/cakey.pem # use if no -keyfile option. default_days = 365 # use if no -days option. default_md = sha256 # use if no -md option. Example openssl ca -keyfile $ROOTCADIR/private/cakey.pem -cert $ROOTCADIR/cacert.pem -notext -md -sha1 -in host1.csr.pem -out host1.crt.pem X509 \uc778\uc99d\uc11c \ub0b4\uc6a9 \ucd9c\ub825 openssl x509 -in 'infile' -noout -text * Example openssl x509 -in host1.crt.pem -noout -text \uc778\uc99d\uc11c \ubc1c\ud589 \ud655\uc778 (at a root CA) $ cat $ROOTCADIR/index.txt V 170920145518Z 1000 unknown /C=KR/ST=Daejeon/O=example/OU=host1/CN=host1.example.com/emailAddress=host1@example.com \uc778\uc99d\uc11c \uac80\uc99d \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 CA \uc778\uc99d\uc11c\ub85c \uac80\uc99d(Verify)\ud55c\ub2e4. CA \uc778\uc99d\uc11c\ub9cc \uc788\uc73c\uba74 \uac80\uc99d \uac00\ub2a5 \uc778\uc99d\uc11c \uac80\uc99d openssl verify -CAfile 'CA certificate file' 'target certificate file' Example openssl verify -CAfile $ROOTCADIR/cacert.pem host1.crt.pem","title":"Openssl-api"},{"location":"openssl/api/#message-digest","text":"","title":"Message Digest"},{"location":"openssl/api/#dgst","text":"\ud574\uc2dc(Hash), \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8(Message Digest) HMAC(Hashed MAC) \uc11c\uba85(Sign) \ubc0f \uac80\uc99d(Verify) Default \uc785/\ucd9c\ub825\uc740 stdin/stdout (\ud30c\uc77c \ubbf8\uc9c0\uc815 \uc2dc), hex \ucd9c\ub825 : default dgst \uac00 \uc544\ub2cc sha, sha1, ... \ub4f1 \ud2b9\uc815 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5, ( man \ucc38\uace0) \uc9c0\uc6d0\ud558\ub294 \uc54c\uace0\ub9ac\uc998 \ubaa9\ub85d\uc740 openssl list-message-digest-algorithms \ub85c \ud655\uc778 \uac00\ub2a5 \uc0ac\uc6a9\ud558\ub294 algorithm \uc740 openssl dgst -help (\ub610\ub294 man \ucc38\uace0) \uc0ac\uc6a9\ub418\ub294 \uc785\ub825 \ud30c\uc77c, ' infiles ...'\ub294 \uba85\ub839\ubb38 \ub9c8\uc9c0\ub9c9\uc5d0 \uc704\uce58\ud574\uc57c \ud568 man dgst \ucc38\uace0 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-hmac 'key'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-sign 'key file'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-verify 'key file'] [-signature 'outfile'] ['infiles ...'] ... Options are -c to output the digest with separating colons -r to output the digest in coreutils format -d to output debug info -hex output as hex dump -binary output in binary form -hmac arg set the HMAC key to arg -non-fips-allow allow use of non FIPS digest -sign file sign digest using private key in file -verify file verify a signature using public key in file -prverify file verify a signature using private key in file -keyform arg key file format (PEM or ENGINE) -out filename output to filename rather than stdout -signature file signature to verify -sigopt nm:v signature parameter -hmac key create hashed MAC with key -mac algorithm create MAC (not neccessarily HMAC) -macopt nm:v MAC algorithm parameters or key -engine e use engine e, possibly a hardware device. -gost-mac to use the gost-mac message digest algorithm -md_gost94 to use the md_gost94 message digest algorithm -md4 to use the md4 message digest algorithm -md5 to use the md5 message digest algorithm -mdc2 to use the mdc2 message digest algorithm -ripemd160 to use the ripemd160 message digest algorithm -sha to use the sha message digest algorithm -sha1 to use the sha1 message digest algorithm -sha224 to use the sha224 message digest algorithm -sha256 to use the sha256 message digest algorithm -sha384 to use the sha384 message digest algorithm -sha512 to use the sha512 message digest algorithm -whirlpool to use the whirlpool message digest algorithm","title":"dgst \uba85\ub839"},{"location":"openssl/api/#hash","text":"\uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8 \uac01 \ud30c\uc77c\uc5d0 \ub300\ud55c \ud574\uc2dc \uac12\uc744 \ucd9c\ub825, 3\uac1c \ud30c\uc77c\uc774 \uc785\ub825\uc774\uba74 3\uac1c\uc758 \ud574\uc2dc \uac12 \ucd9c\ub825 -binary \uc640 -hex \ub294 \ubca0\ud0c0\uc801\uc73c\ub85c \uc0ac\uc6a9 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] # e.g.1 openssl dgst -sha256 -out text.md text.txt # e.g.2 openssl sha256 -hex text.txt text2.txt text3.txt # output example for e.g.2 SHA256(text.txt)= a5532c7f2c9a18ae3976a91eddf93faf7f6ed1653fe7bf73daee1eddfc999577 SHA256(text2.txt)= 6be9867ae05e7505fb9bf3d59cfd2af13337fc17915cdeb099286b082f85bb39 SHA256(text3.txt)= a4c6d0d073ff1c3405bcd49d96d8c5dc3f4905402e254ffe725c55f8746e0aec # e.g.3 openssl dgst -sha256 -binary -out text.md text.txt # output example for e.g.3 hexdump text.md 0000000 53a5 7f2c 9a2c ae18 7639 1ea9 f9dd af3f 0000010 6e7f 65d1 e73f 73bf eeda dd1e 99fc 7795 0000020","title":"\ud574\uc2dc(hash)"},{"location":"openssl/api/#hmac","text":"\ud0a4(key) \uac00 \ud544\uc694 'key' \ub294 hex \uac12 openssl dgst 'algorithm' -hmac 'key' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst -sha256 -hmac hmackey1234 -out text.hmac text.txt","title":"HMAC"},{"location":"openssl/api/#_1","text":"\ud0a4 \ud30c\uc77c(.pem, .key, ...)\uc774 \ud544\uc694, \ud0a4 \uc30d \ub610\ub294 \uac1c\uc778 \ud0a4 Default key encoding is PEM EC key pair \uc0dd\uc131 \ucc38\uace0 \ubc14\uc774\ub108\ub9ac(binary) \ub85c \ucd9c\ub825, dafault","title":"\uc11c\uba85 \ubc0f \uac80\uc99d"},{"location":"openssl/api/#sign","text":"openssl dgst 'algorithm' -sign 'privkey file' [-out 'outfile'] ['infiles ...']","title":"\uc11c\uba85(sign)"},{"location":"openssl/api/#verify","text":"openssl dgst 'algorithm' -verify 'pubkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' openssl dgst 'algorithm' -prverify 'privkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' Example output for signing message(or file) # \uc11c\uba85 \uc608) openssl dgst -sha224 -binary -out text.md text.txt openssl dgst -sha224 -sign ecprivkey.pem -out text.sign text.md Example output for verifying signature # \uac80\uc99d \uc6081) \uacf5\uac1c \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -verify ecpubkey.pem -signature text.sign text.md Verified OK # \uac80\uc99d \uc6082) \uac1c\uc778 \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -prverify ecprivkey.pem -signature text.sign text.md Verified OK","title":"\uac80\uc99d(verify)"},{"location":"openssl/api/#enc","text":"","title":"enc"},{"location":"openssl/api/#about-enc","text":"\ub300\uce6d \uc554\ud638 \uae30\ub2a5 (Symmetric cipher routines) \ud30c\uc77c \uc554\ud638\ud654/\ubcf5\ud638\ud654 \uae30\ubcf8\uc801\uc73c\ub85c stdin/stdout \uc0ac\uc6a9 man enc \ucc38\uace0 openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... Options are -in 'file' input file -out file output file -pass arg pass phrase source -e encrypt -d decrypt -a/-base64 base64 encode/decode, depending on encryption flag -k passphrase is the next argument -kfile passphrase is the first line of the file argument -md the next argument is the md to use to create a key from a passphrase. One of md2, md5, sha or sha1 -S salt in hex is the next argument -K/-iv key/iv in hex is the next argument -[pP] print the iv/key (then exit if -P) -bufsize n buffer size -nopad disable standard block padding -engine e use engine e, possibly a hardware device.","title":"About enc"},{"location":"openssl/api/#_2","text":"-e \uc635\uc158\uc774 \uae30\ubcf8\uac12, -e \uc774 \uc5c6\uc73c\uba74 \uae30\ubcf8\uc801\uc73c\ub85c \uc554\ud638\ud654 'cipher type' \ubaa9\ub85d\uc740 man enc \ub610\ub294 openssl enc -help \ub85c \ud655\uc778 \uac00\ub2a5 -help \ub294 \uc798\ubabb\ub41c \uc635\uc158\uc73c\ub85c openssl \uc5d0\uc11c \uc798\ubabb\ub41c \uc635\uc158\uc744 \uc2e4\ud589\ud558\uba74 'usage'\uac00 \ucd9c\ub825 openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) text.txt\ub97c AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc554\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.bin \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -e -aes-128-cbc -in text.txt -out text.bin # (2) key= password1234 \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin \\ -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5","title":"\uc554\ud638\ud654"},{"location":"openssl/api/#_3","text":"-d \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc57c \ubcf5\ud638\ud654 \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub294 \uc554\ud638\ud654\uc5d0 \uc0ac\uc6a9\ub41c \uc54c\uace0\ub9ac\uc998\uacfc \ud0a4 \uac12\uc774 \ub3d9\uc77c\ud574\uc57c \uc815\uc0c1\uc801\uc73c\ub85c \ubcf5\ud638\ud654\uac00 \uc774\ub8e8\uc5b4\uc9d0 IV\uc640 salt \uc9c0\uc815\ud574\uc11c \uc554\ud638\ud654\ud55c \uacbd\uc6b0, IV\uc640 salt\uac12\ub3c4 \ub3d9\uc77c\ud574\uc57c \ud568 key \uac12\ub9cc \uc785\ub825\ud55c \uacbd\uc6b0, key\uac12\uc744 \uae30\uc900\uc73c\ub85c IV\uc640 salt\uac00 \uc0dd\uc131\ub418\uc5b4 \uc554\ud638\ud654\ub418\ubbc0\ub85c, \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub3c4 key\uac12\ub9cc \uc785\ub825\ud574\uc57c \uc815\uc0c1\uc801\uc778 \ubcf5\ud638\ud654 \uac00\ub2a5 openssl enc -d 'cipher type' -in 'infile' -out 'outfile' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) \uc554\ud638\ud654\ub41c \ud30c\uc77c text.bin\uc744 AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud558\uc5ec \ubcf5\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.txt \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -d -aes-128-cbc -in text.bin -out text.txt # (2) key= password1234 \ub85c \uc554\ud638\ud654\ub41c \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5","title":"\ubcf5\ud638\ud654"},{"location":"openssl/api/#ec-key-pair","text":"EC(Elliptic Curve) \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud55c \ud0a4 \uc0dd\uc131 Asymmetric key \uc54c\uace0\ub9ac\uc998\uc740 private key\ub97c \uc0dd\uc131\ud55c \ud6c4, private key\uc5d0 \ub300\uc751\ud558\ub294 public key\ub97c \uc0dd\uc131","title":"EC key pair"},{"location":"openssl/api/#private-key","text":"default\ub85c PEM(Privacy-Enhanced Mail) \ud3ec\ub9f7\uc73c\ub85c \uc0dd\uc131 openssl ecparam -genkey -name 'curve name' -out 'outfile' Example openssl ecparam -genkey -name prime256v1 -out ecprivkey.pem Example - Encrypt private key openssl ec -aes-128-cbc -in ecprivkey.pem -out new_ecprivkey.pem # man enc \ucc38\uace0","title":"Private key \uc0dd\uc131"},{"location":"openssl/api/#public-key","text":"openssl ec -in 'infile' -pubout -out 'outfile' * 'infile' : private key \ud30c\uc77c * -pubout : 'infile' \uc5d0 \ub300\uc751\ud558\ub294 \uacf5\uac1c \ud0a4 \ucd9c\ub825 * Example openssl ec -in ecprivkey.pem -pubout -out ecpubkey.pem","title":"Public key \uc0dd\uc131"},{"location":"openssl/api/#ecparam","text":"man ecparam \ucc38\uace0 ecparam [options] infile outfile where options are -inform arg input format - default PEM (DER or PEM) -outform arg output format - default PEM -in arg input file - default stdin -out arg output file - default stdout -noout do not print the ec parameter -text print the ec parameters in text form -check validate the ec parameters -C print a 'C' function creating the parameters -name arg use the ec parameters with 'short name' name -list_curves prints a list of all currently available curve 'short names' -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit -no_seed if 'explicit' parameters are chosen do not use the seed -genkey generate ec key -rand file files to use for random number input -engine e use engine e, possibly a hardware device","title":"ecparam \uc635\uc158"},{"location":"openssl/api/#ec","text":"man ec \ucc38\uace0 ec [options] infile outfile where options are -inform arg input format - DER or PEM -outform arg output format - DER or PEM -in arg input file -passin arg input file pass phrase source -out arg output file -passout arg output file pass phrase source -engine e use engine e, possibly a hardware device. -des encrypt PEM output, instead of 'des' every other cipher supported by OpenSSL can be used -text print the key -noout dont print key out -param_out print the elliptic curve parameters -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit","title":"ec \uc635\uc158"},{"location":"openssl/api/#settings-for-root-ca","text":"openssl\uc744 \uc774\uc6a9\ud558\uc5ec \uc778\uc99d\uc11c \ubc1c\uae09\uc744 \uc704\ud574 PKI \uc778\ud504\ub77c \uad6c\uc131 root CA \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ub514\ub809\ud130\ub9ac \ubc0f \ud30c\uc77c \uc900\ube44. Example sudo -s mkdir -p /opt/pki/root cd /opt/pki/root export ROOTCADIR=`pwd` mkdir certs crl newcerts private echo 1000 serial ; touch index.txt cp /etc/pki/tls/openssl.cnf $ROOTCADIR/openssl.cnf export OPENSSL_CONF=$ROOTCADIR/openssl.cnf Check root ca for files $ ls /opt/pki/root drwx------. 2 root 4096 Sep 20 21:23 private drwxr-xr-x. 2 root 4096 Sep 20 21:23 newcerts drwxr-xr-x. 2 root 4096 Sep 20 21:23 crl drwxr-xr-x. 2 root 4096 Sep 20 21:23 certs -rw-r--r--. 1 root 5 Sep 20 21:24 serial -rw-r--r--. 1 root 0 Sep 20 21:24 index.txt -rw-r--r--. 1 root 10923 Sep 20 21:24 openssl.cnf openssl.cnf \ub0b4\uc6a9 ... #################################################################### [ ca ] default_ca = CA_default # \uae30\ubcf8 CA \uc139\uc158 #################################################################### [ CA_default ] # default_ca \uc758 \uc9c0\uc815\ud55c \uc139\uc158 \uc2dc\uc791 \ubd80\ubd84 dir = /opt/pki/root # Where everything is kept # \uc704\uc5d0\uc11c \ub9cc\ub4e0 \uacbd\ub85c\ub85c \uc218\uc815 certs = $dir/certs # Where the issued certs are kept crl_dir = $dir/crl # Where the issued crl are kept database = $dir/index.txt # database index file. #unique_subject = no # Set to 'no' to allow creation of # several ctificates with same subject. new_certs_dir = $dir/newcerts # default place for new certs. certificate = $dir/cacert.pem # The CA certificate serial = $dir/serial # The current serial number crlnumber = $dir/crlnumber # the current crl number # must be commented out to leave a V1 CRL crl = $dir/crl.pem # The current CRL private_key = $dir/private/cakey.pem# The private key RANDFILE = $dir/private/.rand # private random number file x509_extensions = usr_cert # The extentions to add to the cert ...","title":"Settings for Root CA"},{"location":"openssl/api/#root-ca-key","text":"\uc778\uc99d\uc11c \uc0dd\uc131\uc5d0 \ud544\uc694\ud55c CA\uc758 \uac1c\uc778\ud0a4 \ub97c \uc0dd\uc131. OpenSSL \uc758 \" EC key pair \uc0dd\uc131 \" \ucc38\uace0. Example cd $ROOTCA openssl ecparam -genkey -name prime256v1 -out private/cakey.pem openssl ec -in private/cakey.pem -out private/cakey.pem -aes256 chmod 400 private/cakey.pem","title":"root CA key \uc0dd\uc131"},{"location":"openssl/api/#root-ca","text":"\uc790\uac00 \uc11c\uba85(self-signed) \ub41c \uc778\uc99d\uc11c\ub97c \uc0dd\uc131. x509 \ud615\uc2dd\uc758 \uc778\uc99d\uc11c\ub85c \uc0dd\uc131. PEM\uc73c\ub85c \ucd9c\ub825(default) man req \ucc38\uace0. Example output openssl req -new -x509 -extensions v3_ca -key private/cakey.pem -out cacert.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Seoul Locality Name (eg, city) [Default City]:Seoul Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:root CA Common Name (eg, your name or your server's hostname) []:rootca.example.com Email Address []:rootca@example.com chmod 444 certs/ca.crt.pem","title":"root CA \uc778\uc99d\uc11c \uc0dd\uc131"},{"location":"openssl/api/#_4","text":"CSR(Certificate Signing Request) \ub97c \uc0dd\uc131 \ud6c4, root CA\uc5d0\uac8c \uc778\uc99d\uc11c \ubc1c\ud589\uc744 \uc694\uccad. PEM\uc73c\ub85c \ucd9c\ub825(\uae30\ubcf8\uac12)","title":"\uc0ac\uc6a9\uc790 \uc778\uc99d\uc11c \uc0dd\uc131"},{"location":"openssl/api/#at-a-host","text":"\uc778\uc99d\uc11c\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uc778 \ud0a4\ub97c \uc0dd\uc131 \ud544\uc694. cd opt/pki mkdir host1 cd host1 openssl genrsa -out host1.key.pem","title":"\uc0ac\uc6a9\uc790 \uac1c\uc778 \ud0a4 \uc0dd\uc131 (at a host)"},{"location":"openssl/api/#csr-at-a-host","text":"\uc0ac\uc6a9\uc790\uc758 \uac1c\uc778 \ud0a4\ub85c CSR \ud30c\uc77c \uc0dd\uc131. CSR \uc0dd\uc131 \uc2dc, Country, State, Locality, Organization \ub294 root CA\uc758 \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ud568(\uae30\ubcf8\uac12), openssl.cnf \uc5d0\uc11c \uc124\uc815 \uac00\ub2a5. openssl req -new -key host1.key.pem -out host1.csr.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Daejeon Locality Name (eg, city) [Default City]:Yuseong Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:host1 Common Name (eg, your name or your server's hostname) []:host1.example.com Email Address []:host1@example.com Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []:","title":"CSR \uc0dd\uc131 (at a host)"},{"location":"openssl/api/#at-a-root-ca","text":"CA\ub85c\ubd80\ud130 \uc778\uc99d\uc11c \ubc1c\ud589. \ubc1c\ud589 \uc131\uacf5 \uc2dc, serial \ubc88\ud638\uac00 \uc99d\uac00\ud558\uba70 index.txt\uc5d0 \ucd94\uac00. serial, index.txt\ub208 \uc784\uc758\ub85c \uc218\uc815\ud558\uba74 \uc548\ub428. man ca \ucc38\uace0. # \uae30\ubcf8\uc801\uc73c\ub85c 'serial\ubc88\ud638.pem' \ud615\uc2dd\uc73c\ub85c \uc0dd\uc131 openssl ca -in host1.csr.pem # \ucd9c\ub825 \ud30c\uc77c \uc774\ub984 \uc9c0\uc815 openssl ca -in host1.csr.pem -out host1.crt.pem \uc635\uc158 \uc5c6\uc774 \uc0ac\uc6a9\ud558\uba74 openssl.cnf\uc5d0\uc11c \uc815\uc758\ub41c CA\uc758 \ud0a4, \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9(\uae30\ubcf8\uac12). openssl.cnf \ucc38\uc870, -config \uc635\uc158\uc73c\ub85c openssl \uc124\uc815 \ud30c\uc77c \uc9c0\uc815 \uac00\ub2a5. \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 $ROOTCADIR/newcerts/\uc2dc\ub9ac\uc5bc\ubc88\ud638.pem \ud615\ud0dc\ub85c \uc0dd\uc131. \uc635\uc158\uc73c\ub85c CA \ud0a4, CA \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998, \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\uc758 \uc704\uce58\uc640 \uc774\ub984\uc744 \uc9c0\uc815 \uac00\ub2a5. MD \uc54c\uace0\ub9ac\uc998\uc740 CA \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ubc1c\ud589 \uac00\ub2a5. \uc778\uc99d\uc11c \ubc1c\ud589 \uc2dc ca \uba85\ub839 openssl ca -in 'csr infile' [-config 'config file'] [-keyfile 'CA keyfile'] [-cert 'CA certificate file'] [-notext] [-md 'md algorithm] [-out 'cert outfile'] ... openssl.cnf \ub0b4\uc6a9 dir = /opt/pki/root # root CA basedir. certs = $dir/certs new_certs_dir = $dir/newcerts # use if no -out option. certificate = $dir/cacert.pem # use if no -cert option. private_key = $dir/private/cakey.pem # use if no -keyfile option. default_days = 365 # use if no -days option. default_md = sha256 # use if no -md option. Example openssl ca -keyfile $ROOTCADIR/private/cakey.pem -cert $ROOTCADIR/cacert.pem -notext -md -sha1 -in host1.csr.pem -out host1.crt.pem","title":"\uc778\uc99d\uc11c \ubc1c\ud589 (at a root CA)"},{"location":"openssl/api/#x509","text":"openssl x509 -in 'infile' -noout -text * Example openssl x509 -in host1.crt.pem -noout -text","title":"X509 \uc778\uc99d\uc11c \ub0b4\uc6a9 \ucd9c\ub825"},{"location":"openssl/api/#at-a-root-ca_1","text":"$ cat $ROOTCADIR/index.txt V 170920145518Z 1000 unknown /C=KR/ST=Daejeon/O=example/OU=host1/CN=host1.example.com/emailAddress=host1@example.com","title":"\uc778\uc99d\uc11c \ubc1c\ud589 \ud655\uc778 (at a root CA)"},{"location":"openssl/api/#_5","text":"\ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 CA \uc778\uc99d\uc11c\ub85c \uac80\uc99d(Verify)\ud55c\ub2e4. CA \uc778\uc99d\uc11c\ub9cc \uc788\uc73c\uba74 \uac80\uc99d \uac00\ub2a5 \uc778\uc99d\uc11c \uac80\uc99d openssl verify -CAfile 'CA certificate file' 'target certificate file' Example openssl verify -CAfile $ROOTCADIR/cacert.pem host1.crt.pem","title":"\uc778\uc99d\uc11c \uac80\uc99d"},{"location":"openssl/cli/","text":"Message Digest dgst \uba85\ub839 \ud574\uc2dc(Hash), \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8(Message Digest) HMAC(Hashed MAC) \uc11c\uba85(Sign) \ubc0f \uac80\uc99d(Verify) Default \uc785/\ucd9c\ub825\uc740 stdin/stdout (\ud30c\uc77c \ubbf8\uc9c0\uc815 \uc2dc), hex \ucd9c\ub825 : default dgst \uac00 \uc544\ub2cc sha, sha1, ... \ub4f1 \ud2b9\uc815 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5, ( man \ucc38\uace0) \uc9c0\uc6d0\ud558\ub294 \uc54c\uace0\ub9ac\uc998 \ubaa9\ub85d\uc740 openssl list-message-digest-algorithms \ub85c \ud655\uc778 \uac00\ub2a5 \uc0ac\uc6a9\ud558\ub294 algorithm \uc740 openssl dgst -help (\ub610\ub294 man \ucc38\uace0) \uc0ac\uc6a9\ub418\ub294 \uc785\ub825 \ud30c\uc77c, ' infiles ...'\ub294 \uba85\ub839\ubb38 \ub9c8\uc9c0\ub9c9\uc5d0 \uc704\uce58\ud574\uc57c \ud568 man dgst \ucc38\uace0 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-hmac 'key'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-sign 'key file'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-verify 'key file'] [-signature 'outfile'] ['infiles ...'] ... Options are -c to output the digest with separating colons -r to output the digest in coreutils format -d to output debug info -hex output as hex dump -binary output in binary form -hmac arg set the HMAC key to arg -non-fips-allow allow use of non FIPS digest -sign file sign digest using private key in file -verify file verify a signature using public key in file -prverify file verify a signature using private key in file -keyform arg key file format (PEM or ENGINE) -out filename output to filename rather than stdout -signature file signature to verify -sigopt nm:v signature parameter -hmac key create hashed MAC with key -mac algorithm create MAC (not neccessarily HMAC) -macopt nm:v MAC algorithm parameters or key -engine e use engine e, possibly a hardware device. -gost-mac to use the gost-mac message digest algorithm -md_gost94 to use the md_gost94 message digest algorithm -md4 to use the md4 message digest algorithm -md5 to use the md5 message digest algorithm -mdc2 to use the mdc2 message digest algorithm -ripemd160 to use the ripemd160 message digest algorithm -sha to use the sha message digest algorithm -sha1 to use the sha1 message digest algorithm -sha224 to use the sha224 message digest algorithm -sha256 to use the sha256 message digest algorithm -sha384 to use the sha384 message digest algorithm -sha512 to use the sha512 message digest algorithm -whirlpool to use the whirlpool message digest algorithm \ud574\uc2dc(hash) \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8 \uac01 \ud30c\uc77c\uc5d0 \ub300\ud55c \ud574\uc2dc \uac12\uc744 \ucd9c\ub825, 3\uac1c \ud30c\uc77c\uc774 \uc785\ub825\uc774\uba74 3\uac1c\uc758 \ud574\uc2dc \uac12 \ucd9c\ub825 -binary \uc640 -hex \ub294 \ubca0\ud0c0\uc801\uc73c\ub85c \uc0ac\uc6a9 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] # e.g.1 openssl dgst -sha256 -out text.md text.txt # e.g.2 openssl sha256 -hex text.txt text2.txt text3.txt # output example for e.g.2 SHA256(text.txt)= a5532c7f2c9a18ae3976a91eddf93faf7f6ed1653fe7bf73daee1eddfc999577 SHA256(text2.txt)= 6be9867ae05e7505fb9bf3d59cfd2af13337fc17915cdeb099286b082f85bb39 SHA256(text3.txt)= a4c6d0d073ff1c3405bcd49d96d8c5dc3f4905402e254ffe725c55f8746e0aec # e.g.3 openssl dgst -sha256 -binary -out text.md text.txt # output example for e.g.3 hexdump text.md 0000000 53a5 7f2c 9a2c ae18 7639 1ea9 f9dd af3f 0000010 6e7f 65d1 e73f 73bf eeda dd1e 99fc 7795 0000020 HMAC \ud0a4(key) \uac00 \ud544\uc694 'key' \ub294 hex \uac12 openssl dgst 'algorithm' -hmac 'key' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst -sha256 -hmac hmackey1234 -out text.hmac text.txt \uc11c\uba85 \ubc0f \uac80\uc99d \ud0a4 \ud30c\uc77c(.pem, .key, ...)\uc774 \ud544\uc694, \ud0a4 \uc30d \ub610\ub294 \uac1c\uc778 \ud0a4 Default key encoding is PEM EC key pair \uc0dd\uc131 \ucc38\uace0 \ubc14\uc774\ub108\ub9ac(binary) \ub85c \ucd9c\ub825, dafault \uc11c\uba85(sign) openssl dgst 'algorithm' -sign 'privkey file' [-out 'outfile'] ['infiles ...'] \uac80\uc99d(verify) openssl dgst 'algorithm' -verify 'pubkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' openssl dgst 'algorithm' -prverify 'privkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' Example output for signing message(or file) # \uc11c\uba85 \uc608) openssl dgst -sha224 -binary -out text.md text.txt openssl dgst -sha224 -sign ecprivkey.pem -out text.sign text.md Example output for verifying signature # \uac80\uc99d \uc6081) \uacf5\uac1c \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -verify ecpubkey.pem -signature text.sign text.md Verified OK # \uac80\uc99d \uc6082) \uac1c\uc778 \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -prverify ecprivkey.pem -signature text.sign text.md Verified OK enc About enc \ub300\uce6d \uc554\ud638 \uae30\ub2a5 (Symmetric cipher routines) \ud30c\uc77c \uc554\ud638\ud654/\ubcf5\ud638\ud654 \uae30\ubcf8\uc801\uc73c\ub85c stdin/stdout \uc0ac\uc6a9 man enc \ucc38\uace0 openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... Options are -in 'file' input file -out file output file -pass arg pass phrase source -e encrypt -d decrypt -a/-base64 base64 encode/decode, depending on encryption flag -k passphrase is the next argument -kfile passphrase is the first line of the file argument -md the next argument is the md to use to create a key from a passphrase. One of md2, md5, sha or sha1 -S salt in hex is the next argument -K/-iv key/iv in hex is the next argument -[pP] print the iv/key (then exit if -P) -bufsize n buffer size -nopad disable standard block padding -engine e use engine e, possibly a hardware device. \uc554\ud638\ud654 -e \uc635\uc158\uc774 \uae30\ubcf8\uac12, -e \uc774 \uc5c6\uc73c\uba74 \uae30\ubcf8\uc801\uc73c\ub85c \uc554\ud638\ud654 'cipher type' \ubaa9\ub85d\uc740 man enc \ub610\ub294 openssl enc -help \ub85c \ud655\uc778 \uac00\ub2a5 -help \ub294 \uc798\ubabb\ub41c \uc635\uc158\uc73c\ub85c openssl \uc5d0\uc11c \uc798\ubabb\ub41c \uc635\uc158\uc744 \uc2e4\ud589\ud558\uba74 'usage'\uac00 \ucd9c\ub825 openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) text.txt\ub97c AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc554\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.bin \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -e -aes-128-cbc -in text.txt -out text.bin # (2) key= password1234 \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin \\ -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5 \ubcf5\ud638\ud654 -d \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc57c \ubcf5\ud638\ud654 \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub294 \uc554\ud638\ud654\uc5d0 \uc0ac\uc6a9\ub41c \uc54c\uace0\ub9ac\uc998\uacfc \ud0a4 \uac12\uc774 \ub3d9\uc77c\ud574\uc57c \uc815\uc0c1\uc801\uc73c\ub85c \ubcf5\ud638\ud654\uac00 \uc774\ub8e8\uc5b4\uc9d0 IV\uc640 salt \uc9c0\uc815\ud574\uc11c \uc554\ud638\ud654\ud55c \uacbd\uc6b0, IV\uc640 salt\uac12\ub3c4 \ub3d9\uc77c\ud574\uc57c \ud568 key \uac12\ub9cc \uc785\ub825\ud55c \uacbd\uc6b0, key\uac12\uc744 \uae30\uc900\uc73c\ub85c IV\uc640 salt\uac00 \uc0dd\uc131\ub418\uc5b4 \uc554\ud638\ud654\ub418\ubbc0\ub85c, \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub3c4 key\uac12\ub9cc \uc785\ub825\ud574\uc57c \uc815\uc0c1\uc801\uc778 \ubcf5\ud638\ud654 \uac00\ub2a5 openssl enc -d 'cipher type' -in 'infile' -out 'outfile' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) \uc554\ud638\ud654\ub41c \ud30c\uc77c text.bin\uc744 AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud558\uc5ec \ubcf5\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.txt \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -d -aes-128-cbc -in text.bin -out text.txt # (2) key= password1234 \ub85c \uc554\ud638\ud654\ub41c \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5 EC key pair EC(Elliptic Curve) \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud55c \ud0a4 \uc0dd\uc131 Asymmetric key \uc54c\uace0\ub9ac\uc998\uc740 private key\ub97c \uc0dd\uc131\ud55c \ud6c4, private key\uc5d0 \ub300\uc751\ud558\ub294 public key\ub97c \uc0dd\uc131 Private key \uc0dd\uc131 default\ub85c PEM(Privacy-Enhanced Mail) \ud3ec\ub9f7\uc73c\ub85c \uc0dd\uc131 openssl ecparam -genkey -name 'curve name' -out 'outfile' Example openssl ecparam -genkey -name prime256v1 -out ecprivkey.pem Example - Encrypt private key openssl ec -aes-128-cbc -in ecprivkey.pem -out new_ecprivkey.pem # man enc \ucc38\uace0 Public key \uc0dd\uc131 openssl ec -in 'infile' -pubout -out 'outfile' * 'infile' : private key \ud30c\uc77c * -pubout : 'infile' \uc5d0 \ub300\uc751\ud558\ub294 \uacf5\uac1c \ud0a4 \ucd9c\ub825 * Example openssl ec -in ecprivkey.pem -pubout -out ecpubkey.pem ecparam \uc635\uc158 man ecparam \ucc38\uace0 ecparam [options] infile outfile where options are -inform arg input format - default PEM (DER or PEM) -outform arg output format - default PEM -in arg input file - default stdin -out arg output file - default stdout -noout do not print the ec parameter -text print the ec parameters in text form -check validate the ec parameters -C print a 'C' function creating the parameters -name arg use the ec parameters with 'short name' name -list_curves prints a list of all currently available curve 'short names' -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit -no_seed if 'explicit' parameters are chosen do not use the seed -genkey generate ec key -rand file files to use for random number input -engine e use engine e, possibly a hardware device ec \uc635\uc158 man ec \ucc38\uace0 ec [options] infile outfile where options are -inform arg input format - DER or PEM -outform arg output format - DER or PEM -in arg input file -passin arg input file pass phrase source -out arg output file -passout arg output file pass phrase source -engine e use engine e, possibly a hardware device. -des encrypt PEM output, instead of 'des' every other cipher supported by OpenSSL can be used -text print the key -noout dont print key out -param_out print the elliptic curve parameters -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit Settings for Root CA openssl\uc744 \uc774\uc6a9\ud558\uc5ec \uc778\uc99d\uc11c \ubc1c\uae09\uc744 \uc704\ud574 PKI \uc778\ud504\ub77c \uad6c\uc131 root CA \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ub514\ub809\ud130\ub9ac \ubc0f \ud30c\uc77c \uc900\ube44. Example sudo -s mkdir -p /opt/pki/root cd /opt/pki/root export ROOTCADIR=`pwd` mkdir certs crl newcerts private echo 1000 serial ; touch index.txt cp /etc/pki/tls/openssl.cnf $ROOTCADIR/openssl.cnf export OPENSSL_CONF=$ROOTCADIR/openssl.cnf Check root ca for files $ ls /opt/pki/root drwx------. 2 root 4096 Sep 20 21:23 private drwxr-xr-x. 2 root 4096 Sep 20 21:23 newcerts drwxr-xr-x. 2 root 4096 Sep 20 21:23 crl drwxr-xr-x. 2 root 4096 Sep 20 21:23 certs -rw-r--r--. 1 root 5 Sep 20 21:24 serial -rw-r--r--. 1 root 0 Sep 20 21:24 index.txt -rw-r--r--. 1 root 10923 Sep 20 21:24 openssl.cnf openssl.cnf \ub0b4\uc6a9 ... #################################################################### [ ca ] default_ca = CA_default # \uae30\ubcf8 CA \uc139\uc158 #################################################################### [ CA_default ] # default_ca \uc758 \uc9c0\uc815\ud55c \uc139\uc158 \uc2dc\uc791 \ubd80\ubd84 dir = /opt/pki/root # Where everything is kept # \uc704\uc5d0\uc11c \ub9cc\ub4e0 \uacbd\ub85c\ub85c \uc218\uc815 certs = $dir/certs # Where the issued certs are kept crl_dir = $dir/crl # Where the issued crl are kept database = $dir/index.txt # database index file. #unique_subject = no # Set to 'no' to allow creation of # several ctificates with same subject. new_certs_dir = $dir/newcerts # default place for new certs. certificate = $dir/cacert.pem # The CA certificate serial = $dir/serial # The current serial number crlnumber = $dir/crlnumber # the current crl number # must be commented out to leave a V1 CRL crl = $dir/crl.pem # The current CRL private_key = $dir/private/cakey.pem# The private key RANDFILE = $dir/private/.rand # private random number file x509_extensions = usr_cert # The extentions to add to the cert ... root CA key \uc0dd\uc131 \uc778\uc99d\uc11c \uc0dd\uc131\uc5d0 \ud544\uc694\ud55c CA\uc758 \uac1c\uc778\ud0a4 \ub97c \uc0dd\uc131. OpenSSL \uc758 \" EC key pair \uc0dd\uc131 \" \ucc38\uace0. Example cd $ROOTCA openssl ecparam -genkey -name prime256v1 -out private/cakey.pem openssl ec -in private/cakey.pem -out private/cakey.pem -aes256 chmod 400 private/cakey.pem root CA \uc778\uc99d\uc11c \uc0dd\uc131 \uc790\uac00 \uc11c\uba85(self-signed) \ub41c \uc778\uc99d\uc11c\ub97c \uc0dd\uc131. x509 \ud615\uc2dd\uc758 \uc778\uc99d\uc11c\ub85c \uc0dd\uc131. PEM\uc73c\ub85c \ucd9c\ub825(default) man req \ucc38\uace0. Example output openssl req -new -x509 -extensions v3_ca -key private/cakey.pem -out cacert.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Seoul Locality Name (eg, city) [Default City]:Seoul Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:root CA Common Name (eg, your name or your server's hostname) []:rootca.example.com Email Address []:rootca@example.com chmod 444 certs/ca.crt.pem \uc0ac\uc6a9\uc790 \uc778\uc99d\uc11c \uc0dd\uc131 CSR(Certificate Signing Request) \ub97c \uc0dd\uc131 \ud6c4, root CA\uc5d0\uac8c \uc778\uc99d\uc11c \ubc1c\ud589\uc744 \uc694\uccad. PEM\uc73c\ub85c \ucd9c\ub825(\uae30\ubcf8\uac12) \uc0ac\uc6a9\uc790 \uac1c\uc778 \ud0a4 \uc0dd\uc131 (at a host) \uc778\uc99d\uc11c\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uc778 \ud0a4\ub97c \uc0dd\uc131 \ud544\uc694. cd opt/pki mkdir host1 cd host1 openssl genrsa -out host1.key.pem CSR \uc0dd\uc131 (at a host) \uc0ac\uc6a9\uc790\uc758 \uac1c\uc778 \ud0a4\ub85c CSR \ud30c\uc77c \uc0dd\uc131. CSR \uc0dd\uc131 \uc2dc, Country, State, Locality, Organization \ub294 root CA\uc758 \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ud568(\uae30\ubcf8\uac12), openssl.cnf \uc5d0\uc11c \uc124\uc815 \uac00\ub2a5. openssl req -new -key host1.key.pem -out host1.csr.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Daejeon Locality Name (eg, city) [Default City]:Yuseong Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:host1 Common Name (eg, your name or your server's hostname) []:host1.example.com Email Address []:host1@example.com Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: \uc778\uc99d\uc11c \ubc1c\ud589 (at a root CA) CA\ub85c\ubd80\ud130 \uc778\uc99d\uc11c \ubc1c\ud589. \ubc1c\ud589 \uc131\uacf5 \uc2dc, serial \ubc88\ud638\uac00 \uc99d\uac00\ud558\uba70 index.txt\uc5d0 \ucd94\uac00. serial, index.txt\ub208 \uc784\uc758\ub85c \uc218\uc815\ud558\uba74 \uc548\ub428. man ca \ucc38\uace0. # \uae30\ubcf8\uc801\uc73c\ub85c 'serial\ubc88\ud638.pem' \ud615\uc2dd\uc73c\ub85c \uc0dd\uc131 openssl ca -in host1.csr.pem # \ucd9c\ub825 \ud30c\uc77c \uc774\ub984 \uc9c0\uc815 openssl ca -in host1.csr.pem -out host1.crt.pem \uc635\uc158 \uc5c6\uc774 \uc0ac\uc6a9\ud558\uba74 openssl.cnf\uc5d0\uc11c \uc815\uc758\ub41c CA\uc758 \ud0a4, \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9(\uae30\ubcf8\uac12). openssl.cnf \ucc38\uc870, -config \uc635\uc158\uc73c\ub85c openssl \uc124\uc815 \ud30c\uc77c \uc9c0\uc815 \uac00\ub2a5. \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 $ROOTCADIR/newcerts/\uc2dc\ub9ac\uc5bc\ubc88\ud638.pem \ud615\ud0dc\ub85c \uc0dd\uc131. \uc635\uc158\uc73c\ub85c CA \ud0a4, CA \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998, \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\uc758 \uc704\uce58\uc640 \uc774\ub984\uc744 \uc9c0\uc815 \uac00\ub2a5. MD \uc54c\uace0\ub9ac\uc998\uc740 CA \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ubc1c\ud589 \uac00\ub2a5. \uc778\uc99d\uc11c \ubc1c\ud589 \uc2dc ca \uba85\ub839 openssl ca -in 'csr infile' [-config 'config file'] [-keyfile 'CA keyfile'] [-cert 'CA certificate file'] [-notext] [-md 'md algorithm] [-out 'cert outfile'] ... openssl.cnf \ub0b4\uc6a9 dir = /opt/pki/root # root CA basedir. certs = $dir/certs new_certs_dir = $dir/newcerts # use if no -out option. certificate = $dir/cacert.pem # use if no -cert option. private_key = $dir/private/cakey.pem # use if no -keyfile option. default_days = 365 # use if no -days option. default_md = sha256 # use if no -md option. Example openssl ca -keyfile $ROOTCADIR/private/cakey.pem -cert $ROOTCADIR/cacert.pem -notext -md -sha1 -in host1.csr.pem -out host1.crt.pem X509 \uc778\uc99d\uc11c \ub0b4\uc6a9 \ucd9c\ub825 openssl x509 -in 'infile' -noout -text * Example openssl x509 -in host1.crt.pem -noout -text \uc778\uc99d\uc11c \ubc1c\ud589 \ud655\uc778 (at a root CA) $ cat $ROOTCADIR/index.txt V 170920145518Z 1000 unknown /C=KR/ST=Daejeon/O=example/OU=host1/CN=host1.example.com/emailAddress=host1@example.com \uc778\uc99d\uc11c \uac80\uc99d \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 CA \uc778\uc99d\uc11c\ub85c \uac80\uc99d(Verify)\ud55c\ub2e4. CA \uc778\uc99d\uc11c\ub9cc \uc788\uc73c\uba74 \uac80\uc99d \uac00\ub2a5 \uc778\uc99d\uc11c \uac80\uc99d openssl verify -CAfile 'CA certificate file' 'target certificate file' Example openssl verify -CAfile $ROOTCADIR/cacert.pem host1.crt.pem","title":"Openssl-cli"},{"location":"openssl/cli/#message-digest","text":"","title":"Message Digest"},{"location":"openssl/cli/#dgst","text":"\ud574\uc2dc(Hash), \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8(Message Digest) HMAC(Hashed MAC) \uc11c\uba85(Sign) \ubc0f \uac80\uc99d(Verify) Default \uc785/\ucd9c\ub825\uc740 stdin/stdout (\ud30c\uc77c \ubbf8\uc9c0\uc815 \uc2dc), hex \ucd9c\ub825 : default dgst \uac00 \uc544\ub2cc sha, sha1, ... \ub4f1 \ud2b9\uc815 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5, ( man \ucc38\uace0) \uc9c0\uc6d0\ud558\ub294 \uc54c\uace0\ub9ac\uc998 \ubaa9\ub85d\uc740 openssl list-message-digest-algorithms \ub85c \ud655\uc778 \uac00\ub2a5 \uc0ac\uc6a9\ud558\ub294 algorithm \uc740 openssl dgst -help (\ub610\ub294 man \ucc38\uace0) \uc0ac\uc6a9\ub418\ub294 \uc785\ub825 \ud30c\uc77c, ' infiles ...'\ub294 \uba85\ub839\ubb38 \ub9c8\uc9c0\ub9c9\uc5d0 \uc704\uce58\ud574\uc57c \ud568 man dgst \ucc38\uace0 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-hmac 'key'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-sign 'key file'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-verify 'key file'] [-signature 'outfile'] ['infiles ...'] ... Options are -c to output the digest with separating colons -r to output the digest in coreutils format -d to output debug info -hex output as hex dump -binary output in binary form -hmac arg set the HMAC key to arg -non-fips-allow allow use of non FIPS digest -sign file sign digest using private key in file -verify file verify a signature using public key in file -prverify file verify a signature using private key in file -keyform arg key file format (PEM or ENGINE) -out filename output to filename rather than stdout -signature file signature to verify -sigopt nm:v signature parameter -hmac key create hashed MAC with key -mac algorithm create MAC (not neccessarily HMAC) -macopt nm:v MAC algorithm parameters or key -engine e use engine e, possibly a hardware device. -gost-mac to use the gost-mac message digest algorithm -md_gost94 to use the md_gost94 message digest algorithm -md4 to use the md4 message digest algorithm -md5 to use the md5 message digest algorithm -mdc2 to use the mdc2 message digest algorithm -ripemd160 to use the ripemd160 message digest algorithm -sha to use the sha message digest algorithm -sha1 to use the sha1 message digest algorithm -sha224 to use the sha224 message digest algorithm -sha256 to use the sha256 message digest algorithm -sha384 to use the sha384 message digest algorithm -sha512 to use the sha512 message digest algorithm -whirlpool to use the whirlpool message digest algorithm","title":"dgst \uba85\ub839"},{"location":"openssl/cli/#hash","text":"\uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8 \uac01 \ud30c\uc77c\uc5d0 \ub300\ud55c \ud574\uc2dc \uac12\uc744 \ucd9c\ub825, 3\uac1c \ud30c\uc77c\uc774 \uc785\ub825\uc774\uba74 3\uac1c\uc758 \ud574\uc2dc \uac12 \ucd9c\ub825 -binary \uc640 -hex \ub294 \ubca0\ud0c0\uc801\uc73c\ub85c \uc0ac\uc6a9 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] # e.g.1 openssl dgst -sha256 -out text.md text.txt # e.g.2 openssl sha256 -hex text.txt text2.txt text3.txt # output example for e.g.2 SHA256(text.txt)= a5532c7f2c9a18ae3976a91eddf93faf7f6ed1653fe7bf73daee1eddfc999577 SHA256(text2.txt)= 6be9867ae05e7505fb9bf3d59cfd2af13337fc17915cdeb099286b082f85bb39 SHA256(text3.txt)= a4c6d0d073ff1c3405bcd49d96d8c5dc3f4905402e254ffe725c55f8746e0aec # e.g.3 openssl dgst -sha256 -binary -out text.md text.txt # output example for e.g.3 hexdump text.md 0000000 53a5 7f2c 9a2c ae18 7639 1ea9 f9dd af3f 0000010 6e7f 65d1 e73f 73bf eeda dd1e 99fc 7795 0000020","title":"\ud574\uc2dc(hash)"},{"location":"openssl/cli/#hmac","text":"\ud0a4(key) \uac00 \ud544\uc694 'key' \ub294 hex \uac12 openssl dgst 'algorithm' -hmac 'key' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst -sha256 -hmac hmackey1234 -out text.hmac text.txt","title":"HMAC"},{"location":"openssl/cli/#_1","text":"\ud0a4 \ud30c\uc77c(.pem, .key, ...)\uc774 \ud544\uc694, \ud0a4 \uc30d \ub610\ub294 \uac1c\uc778 \ud0a4 Default key encoding is PEM EC key pair \uc0dd\uc131 \ucc38\uace0 \ubc14\uc774\ub108\ub9ac(binary) \ub85c \ucd9c\ub825, dafault","title":"\uc11c\uba85 \ubc0f \uac80\uc99d"},{"location":"openssl/cli/#sign","text":"openssl dgst 'algorithm' -sign 'privkey file' [-out 'outfile'] ['infiles ...']","title":"\uc11c\uba85(sign)"},{"location":"openssl/cli/#verify","text":"openssl dgst 'algorithm' -verify 'pubkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' openssl dgst 'algorithm' -prverify 'privkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' Example output for signing message(or file) # \uc11c\uba85 \uc608) openssl dgst -sha224 -binary -out text.md text.txt openssl dgst -sha224 -sign ecprivkey.pem -out text.sign text.md Example output for verifying signature # \uac80\uc99d \uc6081) \uacf5\uac1c \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -verify ecpubkey.pem -signature text.sign text.md Verified OK # \uac80\uc99d \uc6082) \uac1c\uc778 \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -prverify ecprivkey.pem -signature text.sign text.md Verified OK","title":"\uac80\uc99d(verify)"},{"location":"openssl/cli/#enc","text":"","title":"enc"},{"location":"openssl/cli/#about-enc","text":"\ub300\uce6d \uc554\ud638 \uae30\ub2a5 (Symmetric cipher routines) \ud30c\uc77c \uc554\ud638\ud654/\ubcf5\ud638\ud654 \uae30\ubcf8\uc801\uc73c\ub85c stdin/stdout \uc0ac\uc6a9 man enc \ucc38\uace0 openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... Options are -in 'file' input file -out file output file -pass arg pass phrase source -e encrypt -d decrypt -a/-base64 base64 encode/decode, depending on encryption flag -k passphrase is the next argument -kfile passphrase is the first line of the file argument -md the next argument is the md to use to create a key from a passphrase. One of md2, md5, sha or sha1 -S salt in hex is the next argument -K/-iv key/iv in hex is the next argument -[pP] print the iv/key (then exit if -P) -bufsize n buffer size -nopad disable standard block padding -engine e use engine e, possibly a hardware device.","title":"About enc"},{"location":"openssl/cli/#_2","text":"-e \uc635\uc158\uc774 \uae30\ubcf8\uac12, -e \uc774 \uc5c6\uc73c\uba74 \uae30\ubcf8\uc801\uc73c\ub85c \uc554\ud638\ud654 'cipher type' \ubaa9\ub85d\uc740 man enc \ub610\ub294 openssl enc -help \ub85c \ud655\uc778 \uac00\ub2a5 -help \ub294 \uc798\ubabb\ub41c \uc635\uc158\uc73c\ub85c openssl \uc5d0\uc11c \uc798\ubabb\ub41c \uc635\uc158\uc744 \uc2e4\ud589\ud558\uba74 'usage'\uac00 \ucd9c\ub825 openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) text.txt\ub97c AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc554\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.bin \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -e -aes-128-cbc -in text.txt -out text.bin # (2) key= password1234 \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin \\ -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5","title":"\uc554\ud638\ud654"},{"location":"openssl/cli/#_3","text":"-d \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc57c \ubcf5\ud638\ud654 \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub294 \uc554\ud638\ud654\uc5d0 \uc0ac\uc6a9\ub41c \uc54c\uace0\ub9ac\uc998\uacfc \ud0a4 \uac12\uc774 \ub3d9\uc77c\ud574\uc57c \uc815\uc0c1\uc801\uc73c\ub85c \ubcf5\ud638\ud654\uac00 \uc774\ub8e8\uc5b4\uc9d0 IV\uc640 salt \uc9c0\uc815\ud574\uc11c \uc554\ud638\ud654\ud55c \uacbd\uc6b0, IV\uc640 salt\uac12\ub3c4 \ub3d9\uc77c\ud574\uc57c \ud568 key \uac12\ub9cc \uc785\ub825\ud55c \uacbd\uc6b0, key\uac12\uc744 \uae30\uc900\uc73c\ub85c IV\uc640 salt\uac00 \uc0dd\uc131\ub418\uc5b4 \uc554\ud638\ud654\ub418\ubbc0\ub85c, \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub3c4 key\uac12\ub9cc \uc785\ub825\ud574\uc57c \uc815\uc0c1\uc801\uc778 \ubcf5\ud638\ud654 \uac00\ub2a5 openssl enc -d 'cipher type' -in 'infile' -out 'outfile' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) \uc554\ud638\ud654\ub41c \ud30c\uc77c text.bin\uc744 AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud558\uc5ec \ubcf5\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.txt \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -d -aes-128-cbc -in text.bin -out text.txt # (2) key= password1234 \ub85c \uc554\ud638\ud654\ub41c \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5","title":"\ubcf5\ud638\ud654"},{"location":"openssl/cli/#ec-key-pair","text":"EC(Elliptic Curve) \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud55c \ud0a4 \uc0dd\uc131 Asymmetric key \uc54c\uace0\ub9ac\uc998\uc740 private key\ub97c \uc0dd\uc131\ud55c \ud6c4, private key\uc5d0 \ub300\uc751\ud558\ub294 public key\ub97c \uc0dd\uc131","title":"EC key pair"},{"location":"openssl/cli/#private-key","text":"default\ub85c PEM(Privacy-Enhanced Mail) \ud3ec\ub9f7\uc73c\ub85c \uc0dd\uc131 openssl ecparam -genkey -name 'curve name' -out 'outfile' Example openssl ecparam -genkey -name prime256v1 -out ecprivkey.pem Example - Encrypt private key openssl ec -aes-128-cbc -in ecprivkey.pem -out new_ecprivkey.pem # man enc \ucc38\uace0","title":"Private key \uc0dd\uc131"},{"location":"openssl/cli/#public-key","text":"openssl ec -in 'infile' -pubout -out 'outfile' * 'infile' : private key \ud30c\uc77c * -pubout : 'infile' \uc5d0 \ub300\uc751\ud558\ub294 \uacf5\uac1c \ud0a4 \ucd9c\ub825 * Example openssl ec -in ecprivkey.pem -pubout -out ecpubkey.pem","title":"Public key \uc0dd\uc131"},{"location":"openssl/cli/#ecparam","text":"man ecparam \ucc38\uace0 ecparam [options] infile outfile where options are -inform arg input format - default PEM (DER or PEM) -outform arg output format - default PEM -in arg input file - default stdin -out arg output file - default stdout -noout do not print the ec parameter -text print the ec parameters in text form -check validate the ec parameters -C print a 'C' function creating the parameters -name arg use the ec parameters with 'short name' name -list_curves prints a list of all currently available curve 'short names' -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit -no_seed if 'explicit' parameters are chosen do not use the seed -genkey generate ec key -rand file files to use for random number input -engine e use engine e, possibly a hardware device","title":"ecparam \uc635\uc158"},{"location":"openssl/cli/#ec","text":"man ec \ucc38\uace0 ec [options] infile outfile where options are -inform arg input format - DER or PEM -outform arg output format - DER or PEM -in arg input file -passin arg input file pass phrase source -out arg output file -passout arg output file pass phrase source -engine e use engine e, possibly a hardware device. -des encrypt PEM output, instead of 'des' every other cipher supported by OpenSSL can be used -text print the key -noout dont print key out -param_out print the elliptic curve parameters -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit","title":"ec \uc635\uc158"},{"location":"openssl/cli/#settings-for-root-ca","text":"openssl\uc744 \uc774\uc6a9\ud558\uc5ec \uc778\uc99d\uc11c \ubc1c\uae09\uc744 \uc704\ud574 PKI \uc778\ud504\ub77c \uad6c\uc131 root CA \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ub514\ub809\ud130\ub9ac \ubc0f \ud30c\uc77c \uc900\ube44. Example sudo -s mkdir -p /opt/pki/root cd /opt/pki/root export ROOTCADIR=`pwd` mkdir certs crl newcerts private echo 1000 serial ; touch index.txt cp /etc/pki/tls/openssl.cnf $ROOTCADIR/openssl.cnf export OPENSSL_CONF=$ROOTCADIR/openssl.cnf Check root ca for files $ ls /opt/pki/root drwx------. 2 root 4096 Sep 20 21:23 private drwxr-xr-x. 2 root 4096 Sep 20 21:23 newcerts drwxr-xr-x. 2 root 4096 Sep 20 21:23 crl drwxr-xr-x. 2 root 4096 Sep 20 21:23 certs -rw-r--r--. 1 root 5 Sep 20 21:24 serial -rw-r--r--. 1 root 0 Sep 20 21:24 index.txt -rw-r--r--. 1 root 10923 Sep 20 21:24 openssl.cnf openssl.cnf \ub0b4\uc6a9 ... #################################################################### [ ca ] default_ca = CA_default # \uae30\ubcf8 CA \uc139\uc158 #################################################################### [ CA_default ] # default_ca \uc758 \uc9c0\uc815\ud55c \uc139\uc158 \uc2dc\uc791 \ubd80\ubd84 dir = /opt/pki/root # Where everything is kept # \uc704\uc5d0\uc11c \ub9cc\ub4e0 \uacbd\ub85c\ub85c \uc218\uc815 certs = $dir/certs # Where the issued certs are kept crl_dir = $dir/crl # Where the issued crl are kept database = $dir/index.txt # database index file. #unique_subject = no # Set to 'no' to allow creation of # several ctificates with same subject. new_certs_dir = $dir/newcerts # default place for new certs. certificate = $dir/cacert.pem # The CA certificate serial = $dir/serial # The current serial number crlnumber = $dir/crlnumber # the current crl number # must be commented out to leave a V1 CRL crl = $dir/crl.pem # The current CRL private_key = $dir/private/cakey.pem# The private key RANDFILE = $dir/private/.rand # private random number file x509_extensions = usr_cert # The extentions to add to the cert ...","title":"Settings for Root CA"},{"location":"openssl/cli/#root-ca-key","text":"\uc778\uc99d\uc11c \uc0dd\uc131\uc5d0 \ud544\uc694\ud55c CA\uc758 \uac1c\uc778\ud0a4 \ub97c \uc0dd\uc131. OpenSSL \uc758 \" EC key pair \uc0dd\uc131 \" \ucc38\uace0. Example cd $ROOTCA openssl ecparam -genkey -name prime256v1 -out private/cakey.pem openssl ec -in private/cakey.pem -out private/cakey.pem -aes256 chmod 400 private/cakey.pem","title":"root CA key \uc0dd\uc131"},{"location":"openssl/cli/#root-ca","text":"\uc790\uac00 \uc11c\uba85(self-signed) \ub41c \uc778\uc99d\uc11c\ub97c \uc0dd\uc131. x509 \ud615\uc2dd\uc758 \uc778\uc99d\uc11c\ub85c \uc0dd\uc131. PEM\uc73c\ub85c \ucd9c\ub825(default) man req \ucc38\uace0. Example output openssl req -new -x509 -extensions v3_ca -key private/cakey.pem -out cacert.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Seoul Locality Name (eg, city) [Default City]:Seoul Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:root CA Common Name (eg, your name or your server's hostname) []:rootca.example.com Email Address []:rootca@example.com chmod 444 certs/ca.crt.pem","title":"root CA \uc778\uc99d\uc11c \uc0dd\uc131"},{"location":"openssl/cli/#_4","text":"CSR(Certificate Signing Request) \ub97c \uc0dd\uc131 \ud6c4, root CA\uc5d0\uac8c \uc778\uc99d\uc11c \ubc1c\ud589\uc744 \uc694\uccad. PEM\uc73c\ub85c \ucd9c\ub825(\uae30\ubcf8\uac12)","title":"\uc0ac\uc6a9\uc790 \uc778\uc99d\uc11c \uc0dd\uc131"},{"location":"openssl/cli/#at-a-host","text":"\uc778\uc99d\uc11c\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uc778 \ud0a4\ub97c \uc0dd\uc131 \ud544\uc694. cd opt/pki mkdir host1 cd host1 openssl genrsa -out host1.key.pem","title":"\uc0ac\uc6a9\uc790 \uac1c\uc778 \ud0a4 \uc0dd\uc131 (at a host)"},{"location":"openssl/cli/#csr-at-a-host","text":"\uc0ac\uc6a9\uc790\uc758 \uac1c\uc778 \ud0a4\ub85c CSR \ud30c\uc77c \uc0dd\uc131. CSR \uc0dd\uc131 \uc2dc, Country, State, Locality, Organization \ub294 root CA\uc758 \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ud568(\uae30\ubcf8\uac12), openssl.cnf \uc5d0\uc11c \uc124\uc815 \uac00\ub2a5. openssl req -new -key host1.key.pem -out host1.csr.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Daejeon Locality Name (eg, city) [Default City]:Yuseong Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:host1 Common Name (eg, your name or your server's hostname) []:host1.example.com Email Address []:host1@example.com Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []:","title":"CSR \uc0dd\uc131 (at a host)"},{"location":"openssl/cli/#at-a-root-ca","text":"CA\ub85c\ubd80\ud130 \uc778\uc99d\uc11c \ubc1c\ud589. \ubc1c\ud589 \uc131\uacf5 \uc2dc, serial \ubc88\ud638\uac00 \uc99d\uac00\ud558\uba70 index.txt\uc5d0 \ucd94\uac00. serial, index.txt\ub208 \uc784\uc758\ub85c \uc218\uc815\ud558\uba74 \uc548\ub428. man ca \ucc38\uace0. # \uae30\ubcf8\uc801\uc73c\ub85c 'serial\ubc88\ud638.pem' \ud615\uc2dd\uc73c\ub85c \uc0dd\uc131 openssl ca -in host1.csr.pem # \ucd9c\ub825 \ud30c\uc77c \uc774\ub984 \uc9c0\uc815 openssl ca -in host1.csr.pem -out host1.crt.pem \uc635\uc158 \uc5c6\uc774 \uc0ac\uc6a9\ud558\uba74 openssl.cnf\uc5d0\uc11c \uc815\uc758\ub41c CA\uc758 \ud0a4, \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9(\uae30\ubcf8\uac12). openssl.cnf \ucc38\uc870, -config \uc635\uc158\uc73c\ub85c openssl \uc124\uc815 \ud30c\uc77c \uc9c0\uc815 \uac00\ub2a5. \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 $ROOTCADIR/newcerts/\uc2dc\ub9ac\uc5bc\ubc88\ud638.pem \ud615\ud0dc\ub85c \uc0dd\uc131. \uc635\uc158\uc73c\ub85c CA \ud0a4, CA \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998, \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\uc758 \uc704\uce58\uc640 \uc774\ub984\uc744 \uc9c0\uc815 \uac00\ub2a5. MD \uc54c\uace0\ub9ac\uc998\uc740 CA \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ubc1c\ud589 \uac00\ub2a5. \uc778\uc99d\uc11c \ubc1c\ud589 \uc2dc ca \uba85\ub839 openssl ca -in 'csr infile' [-config 'config file'] [-keyfile 'CA keyfile'] [-cert 'CA certificate file'] [-notext] [-md 'md algorithm] [-out 'cert outfile'] ... openssl.cnf \ub0b4\uc6a9 dir = /opt/pki/root # root CA basedir. certs = $dir/certs new_certs_dir = $dir/newcerts # use if no -out option. certificate = $dir/cacert.pem # use if no -cert option. private_key = $dir/private/cakey.pem # use if no -keyfile option. default_days = 365 # use if no -days option. default_md = sha256 # use if no -md option. Example openssl ca -keyfile $ROOTCADIR/private/cakey.pem -cert $ROOTCADIR/cacert.pem -notext -md -sha1 -in host1.csr.pem -out host1.crt.pem","title":"\uc778\uc99d\uc11c \ubc1c\ud589 (at a root CA)"},{"location":"openssl/cli/#x509","text":"openssl x509 -in 'infile' -noout -text * Example openssl x509 -in host1.crt.pem -noout -text","title":"X509 \uc778\uc99d\uc11c \ub0b4\uc6a9 \ucd9c\ub825"},{"location":"openssl/cli/#at-a-root-ca_1","text":"$ cat $ROOTCADIR/index.txt V 170920145518Z 1000 unknown /C=KR/ST=Daejeon/O=example/OU=host1/CN=host1.example.com/emailAddress=host1@example.com","title":"\uc778\uc99d\uc11c \ubc1c\ud589 \ud655\uc778 (at a root CA)"},{"location":"openssl/cli/#_5","text":"\ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 CA \uc778\uc99d\uc11c\ub85c \uac80\uc99d(Verify)\ud55c\ub2e4. CA \uc778\uc99d\uc11c\ub9cc \uc788\uc73c\uba74 \uac80\uc99d \uac00\ub2a5 \uc778\uc99d\uc11c \uac80\uc99d openssl verify -CAfile 'CA certificate file' 'target certificate file' Example openssl verify -CAfile $ROOTCADIR/cacert.pem host1.crt.pem","title":"\uc778\uc99d\uc11c \uac80\uc99d"},{"location":"openssl/api/evp-dgst/","text":"Message Digest? \uc784\uc758\uc758 \uae38\uc774\ub97c \uac00\uc9c0\ub294 \uba54\uc2dc\uc9c0\uc5d0 \ub300\uc751\ub418\ub294 \uc77c\uc815\ud55c \uae38\uc774\uc758 \ucf54\ub4dc. \ud574\uc2dc(hash), \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\ud2b8(message digest) Message Digest Function \ud574\uc2dc \ud568\uc218(hash function) \uc784\uc758\uc758 \uae38\uc774\ub97c \uac00\uc9c0\ub294 \uba54\uc2dc\uc9c0\uc758 \ud574\uc2dc\ub97c \ucd9c\ub825\ud558\ub294 \ud568\uc218. key\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc74c. 1\ube44\ud2b8\uc758 \ubcc0\ud654\uc5d0\ub3c4 \uc644\uc804\ud788 \ub2e4\ub978 \ud574\uc2dc\ub97c \ucd9c\ub825. \ubcf5\ud638\ud654\uac00 \ubd88\uac00\ub2a5\ud55c one-way function. \ub300\ud45c\uc801\uc73c\ub85c MD5, SHA1, SHA2 \uc554\ud638\ud559\uc801 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\ub97c \uc0ac\uc6a9. HMAC(Hash-based Message Authentication Code) MAC \uc0dd\uc131\uc5d0 \uc554\ud638\ud559\uc801 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9. MAC\ub97c \uc0dd\uc131/\uac80\uc99d\ud558\uae30 \uc704\ud574 \ub300\uce6d\ud0a4(symmetric key)\ub97c \uc0ac\uc6a9. EVP_MD API hash\ub97c \ucd9c\ub825. CTX\uc640 EVP \uc0ac\uc6a9. Init, Update, Final \uc21c\uc73c\ub85c \uc218\ud589. man EVP_MD_CTX_init #include openssl/evp.h struct env_md_ctx_st { const EVP_MD *digest; ENGINE *engine; /* functional reference if 'digest' is ENGINE-provided */ unsigned long flags; void *md_data; /* Public key context for sign/verify */ EVP_PKEY_CTX *pctx; /* Update function: usually copied from EVP_MD */ int (*update) (EVP_MD_CTX *ctx, const void *data, size_t count); } /* EVP_MD_CTX */ ; EVP_MD_CTX_init void EVP_MD_CTX_init(EVP_MD_CTX *ctx); ctx : message digest context ctx \ub97c \ucd08\uae30\ud654 EVP_MD_CTX_create EVP_MD_CTX *EVP_MD_CTX_create(void); EVP_MD_CTX \ub3d9\uc801\ud560\ub2f9 EVP_DigestInit int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type); int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl); ctx : \ucd08\uae30\ud654\ub41c message digest context type : \ud574\uc2dc \uc54c\uace0\ub9ac\uc998, \uc544\ub798 \ud568\uc218\uc758 \ub9ac\ud134\uac12. const EVP_MD *EVP_md_null(void); const EVP_MD *EVP_md2(void); const EVP_MD *EVP_md5(void); const EVP_MD *EVP_sha(void); const EVP_MD *EVP_sha1(void); const EVP_MD *EVP_dss(void); const EVP_MD *EVP_dss1(void); const EVP_MD *EVP_mdc2(void); const EVP_MD *EVP_ripemd160(void); const EVP_MD *EVP_sha224(void); const EVP_MD *EVP_sha256(void); const EVP_MD *EVP_sha384(void); const EVP_MD *EVP_sha512(void); impl : type \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc5d4\uc9c4, \uae30\ubcf8\uac12\uc740 NULL. message digest context \uc124\uc815, \ud574\uc2dc\ud558\uae30 \uc704\ud55c \ucd08\uae30\uc124\uc815. \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. EVP_DigestUpdate int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt); ctx : \ucd08\uae30\uc124\uc815\uc774 \uc644\ub8cc\ub41c message digest context d : \ud574\uc2dc\ud560 \uba54\uc2dc\uc9c0 cnt : d \uc758 \uae38\uc774. \uba54\uc2dc\uc9c0\ub97c \uc785\ub825\uc73c\ub85c \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc744 \uc218\ud589\ud55c\ub2e4. \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. EVP_DigestFinal int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s); int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s); ctx : Update\uac00 \ub05d\ub09c message digest context. md : \ud574\uc2dc\uac00 \ucd9c\ub825\ub420 \ubc84\ud37c, \ucda9\ubd84\ud55c \ubc84\ud37c\ub97c \uac00\uc838\uc57c\ud568. s : \ucd9c\ub825\ub418\ub294 \ud574\uc2dc\uc758 \uae38\uc774\ub97c \uc800\uc7a5, NULL\uc774 \ub418\uba74 \uc548\ub428. \uacc4\uc0b0\ub41c \ud574\uc2dc\ub97c md \uc5d0 \uc800\uc7a5. EVP_DigestFinal_ex() \ub294 \uc790\ub3d9\uc73c\ub85c ctx\ub97c clean up. \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. EVP_MD_CTX_cleanup int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx); ctx \ub97c clean up. EVP_MD_CTX_destroy void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx); ctx \ub97c clean up. EVP_MD_CTX_create() \ub85c \ud560\ub2f9\ub41c ctx \ub97c \ud574\uc7ac. EVP_MD_CTX_copy int EVP_MD_CTX_copy(EVP_MD_CTX *out,EVP_MD_CTX *in); int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out,const EVP_MD_CTX *in); in : source message digest context. out : destination message digest context. (\ucd08\uae30\ud654\ub41c) ctx \ub97c copy. \ubcf4\ud1b5 \ud070 \uba54\uc2dc\uc9c0\uc5d0\uc11c \uc77c\ubd80\ubd84\ub9cc \ub2e4\ub978 \uacbd\uc6b0 \uc0ac\uc6a9. EVP_MD_CTX_copy_ex() \ub294 \uc790\ub3d9\uc73c\ub85c out \uc744 \ucd08\uae30\ud654. \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. EXP_MAX_MD_SIZE #define EVP_MAX_MD_SIZE 64 /* SHA512 */ OpenSSL\uc5d0\uc11c \uc815\uc758\ud55c message digest\uc758 \ucd5c\ub300 \ud06c\uae30(in bytes) EVP_MD_type EVP_MD\uc5d0 \ud574\ub2f9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc758 \uc815\ubcf4\ub97c \ub9ac\ud134\ud558\ub294 \ud568\uc218 int EVP_MD_type(const EVP_MD *md); EVP_MD \uad6c\uc870\uccb4\uc5d0 \ud574\ub2f9\ud558\ub294 NID\ub97c \ub9ac\ud134. \uc2e4\ud328\uc2dc NID_undef \ub9ac\ud134. e.g. EVP_MD_type(EVP_sha1()); \ub294 NID_sha1 \ub97c \ub9ac\ud134. EVP_MD_pkey_type int EVP_MD_pkey_type(const EVP_MD *md); \uacf5\uac1c\ud0a4 \uc11c\uba85 \uc54c\uace0\ub9ac\uc998\uacfc \uad00\ub828\ub41c \ud574\uc2dc \ud568\uc218\uc758 NID\ub97c \ub9ac\ud134. \uc2e4\ud328\uc2dc NID_undef \ub9ac\ud134. e.g. RSA\ubc29\uc2dd\uc758 \ud0a4\ub97c \uc0ac\uc6a9\ud55c \uacbd\uc6b0, NID_sha1WithRSAEncrption \uc744 \ub9ac\ud134. EVP_MD_size int EVP_MD_size(const EVP_MD *md); EVP_MD \uc5d0 \ud574\ub2f9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \ucd9c\ub825\ud558\ub294 \ud574\uc2dc\uc758 \uae38\uc774\ub97c \ub9ac\ud134.(\ubc14\uc774\ud2b8) EVP_MD_block_size int EVP_MD_block_size(const EVP_MD *md); EVP_MD \uc5d0 \ud574\ub2f9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \uc0ac\uc6a9\ud558\ub294 \uba54\uc2dc\uc9c0 \ube14\ub7ed \uae38\uc774\ub97c \ub9ac\ud134. Useful macro of EVP_MD_CTX ctx \uc5d0 \uc124\uc815\ub41c \uc815\ubcf4\ub97c \ub9ac\ud134\ud558\ub294 \ud568\uc218 \ubc0f \ub9e4\ud06c\ub85c ```c const EVP_MD EVP_MD_CTX_md(const EVP_MD_CTX ctx); define EVP_MD_CTX_size(e) EVP_MD_size(EVP_MD_CTX_md(e)) define EVP_MD_CTX_block_size(e) EVP_MD_block_size((e)- digest) define EVP_MD_CTX_type(e) EVP_MD_type((e)- digest) ### EVP_get_digestbyname ```c const EVP_MD *EVP_get_digestbyname(const char *name); name : \ud574\uc2dc \uc54c\uace0\ub9ac\uc998 \uc774\ub984(\ubb38\uc790\uc5f4), openssl list-message-digest-algorithms \ucc38\uace0 name \uc5d0 \ud574\ub2f9\ud558\ub294 EVP_MD \uad6c\uc870\uccb4 \ud3ec\uc778\ud130\ub97c \ub9ac\ud134, \uc2e4\ud328\uc2dc NULL \ub9ac\ud134. \ud568\uc218 \uc218\ud589 \uc804\uc5d0 OpenSSL_add_all_digests() \uc774 \ud638\ucd9c\ub418\uc5b4\uc57c \ud568. EVP_get_digestbynid #define EVP_get_digestbynid(a) EVP_get_digestbyname(OBJ_nid2sn(a)) digest NID\uc5d0 \ud574\ub2f9\ud558\ub294 EVP_MD* \ub9ac\ud134 EVP_get_digestbyobj #define EVP_get_digestbyobj(a) EVP_get_digestbynid(OBJ_obj2nid(a)) ASN1_OBJECT \uad6c\uc870\uccb4\uc5d0 \ud574\ub2f9\ud558\ub294 EVP_MD* \ub9ac\ud134 Examples md.c Example - Message digest for file /* md.c */ #include stdio.h #include stdlib.h #include openssl/evp.h #define eprintfExit(x, ...) { fprintf(stderr, __VA_ARGS__); exit(x); } #define eprintfReturn(x, ...) { fprintf(stderr, __VA_ARGS__); return (x); } void printhex(unsigned char *b, int bLen) { int i; printf( %02X ,b[0]); for(i=1; i bLen; i++) printf( :%02X , b[i]); printf( \\n ); } int make_md(const char *mdname, FILE *fp, unsigned char *md, int *mdLen) { EVP_MD_CTX mctx; const EVP_MD *evpmd; unsigned char in[BUFSIZ]; int inLen; OpenSSL_add_all_digests(); if(!(evpmd=EVP_get_digestbyname(mdname))) eprintfReturn(0, Unknown digest name.\\n ); EVP_MD_CTX_init( mctx); EVP_DigestInit_ex( mctx, evpmd, NULL); while((inLen=fread(in, 1, sizeof(in), fp)) 0) EVP_DigestUpdate( mctx, in, inLen); EVP_DigestFinal_ex( mctx, md, mdLen); //EVP_MD_CTX_cleanup( mctx); return 1; } void main(int argc, char **argv) { unsigned char md[EVP_MAX_MD_SIZE]; int mdLen; FILE *fp; if(argc!=3) eprintfExit(1, Usage: %s digest name inFile .\\n , argv[0]); if((fp=fopen(argv[2], rb ))==NULL) eprintfExit(2, open error %s , argv[2]); if(!make_md(argv[1], fp, md, mdLen)) exit(3); printf( Hash= ); printhex(md, mdLen); fclose(fp); } \uc2e4\ud589 \uacb0\uacfc $ gcc md.c -lcrypto $ ./a.out sha1 md.c Hash=64:7C:E6:5B:5C:EA:FA:39:20:EE:62:60:56:97:7B:A8:FB:16:4F:8F $ HMAC API EVP_MD\uc640 \uc720\uc0ac\ud568. Init \uacfc\uc815\uc5d0\uc11c \ud0a4 \uac12\uc744 \uc124\uc815\ud558\ub294 \uac83\ub9cc EVP_MD\uc640 \ub2e4\ub984. man hmac HMAC() #include openssl/hmac.h unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len, const unsigned char *d, int n, unsigned char *md, unsigned int *md_len); n \uae38\uc774\uc758 \uba54\uc2dc\uc9c0 d \uc5d0 \ub300\ud55c HMAC\uc744 \uc0dd\uc131. \uc131\uacf5 \uc2dc \ucd9c\ub825\ub41c HMAC\uc758 \ud3ec\uc778\ud130( md \uac00 NULL \uc774\uba74 \ub0b4\ubd80\uc758 static \ubb38\uc790\uc5f4\uc758 \uc8fc\uc18c \ub9ac\ud134), \uc2e4\ud328\uc2dc NULL \ub9ac\ud134. md_len \uc740 NULL \uc774\uba74 \uc548\ub428. evp_md : \ud574\uc2dc \uc54c\uace0\ub9ac\uc998. key : \ud0a4(key) \uac12. (in binary) key_len : key \uc758 \uae38\uc774, HMAC\uc758 \ud0a4 \uae38\uc774\ub294 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9d0. md : HMAC\uc744 \uc800\uc7a5. md_len : \ucd9c\ub825\ub41c md \uc758 \uae38\uc774\ub97c \uc800\uc7a5. Initialize HMAC_CTX_init() void HMAC_CTX_init(HMAC_CTX *ctx); hmac context\ub97c \ucd08\uae30\ud654. HMAC_Init() int HMAC_Init(HMAC_CTX *ctx, const void *key, int key_len, const EVP_MD *md); int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int key_len, const EVP_MD *md, ENGINE *impl); ctx : \ucd08\uae30\ud654\ub41c hmac context. key : \ud0a4 \uac12. (in binary) key_len : key \uc758 \uae38\uc774. md : \ud574\uc2dc \uc54c\uace0\ub9ac\uc998. HMAC_Init_ex() \uc740 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c ENGINE \uc744 \ucd94\uac00 \uad6c\uc131 \uac00\ub2a5. HMAC_Update() int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, int len); ctx : \ucd08\uae30\uc124\uc815\ub41c hmac context. data : message. len : data \uc758 \uae38\uc774. \uc124\uc815\ub41c \ud0a4\uc640 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc73c\ub85c HMAC\uc744 \uacc4\uc0b0. HMAC_Final() int HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len); ctx : Update() \uac00 \uc644\ub8cc\ub41c hmac context. md : HMAC\uc744 \uc800\uc7a5\ud560 \ubc84\ud37c. len : \ucd9c\ub825\ub41c HMAC\uc758 \uae38\uc774\ub97c \uc800\uc7a5. \ucd9c\ub825\ub41c HMAC\uc744 md \uc5d0 \uc800\uc7a5. md_len \uc740 NULL \uc774\uba74 \uc548\ub428. Cleanup void HMAC_CTX_cleanup(HMAC_CTX *ctx); void HMAC_cleanup(HMAC_CTX *ctx); hmac context\ub97c clean up. (HMAC\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574 \ud560\ub2f9\ub418\uc5c8\ub358 \uc790\uc6d0\uc744 \ud574\uc81c, \ud0a4 \uac12 \uc81c\uac70 \ub4f1 context\uc758 \ub0b4\uc6a9\uc744 \uc0ad\uc81c) HMAC_cleanup() \uc740 HMAC_CTX_cleanup() \uc758 \ubcc4\uce6d, 0.9.6b\uc640 \ud558\uc704 \ud638\ud658\uc131(back compatibility)\uc744 \uc704\ud574 \uc0ac\uc6a9, \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc74c. Example hmac.c Example - HMAC for a message. /* hmac.c */ #include stdio.h #include stdlib.h #include string.h #include openssl/hmac.h #define eprintfExit(x, ...) { fprintf(stderr, __VA_ARGS__); exit(x); } #define eprintfReturn(x, ...) { fprintf(stderr, __VA_ARGS__); return (x); } void printhex(unsigned char *b, int bLen) { int i; printf( %02X ,b[0]); for(i=1; i bLen; i++) printf( :%02X , b[i]); printf( \\n ); } int make_hmac(const char *mdname, unsigned char *md, int *mdLen, const unsigned char *key, const int keyLen, const unsigned char *m, const int mLen) { HMAC_CTX hctx; const EVP_MD* evpmd; OpenSSL_add_all_digests(); if(!(evpmd=EVP_get_digestbyname(mdname))) eprintfReturn(0, Unknown digest name.\\n ); HMAC_Init( hctx, key, keyLen, evpmd); HMAC_Update( hctx, m, mLen); HMAC_Final( hctx, md, mdLen); HMAC_CTX_cleanup( hctx); return 1; } void main(int argc, char **argv) { unsigned char md[EVP_MAX_MD_SIZE]; int mdLen; if(argc!=4) eprintfExit(1, Usage: %s digest name password messages .\\n , argv[0]); /* use HMAC() */ // OpenSSL_add_all_digests(); // HMAC(EVP_get_digestbyname(argv[1]), argv[2], strlen(argv[2]), argv[3], strlen(argv[3]), md, mdLen); /* end of 'use HMAC() */ if(!make_hmac(argv[1], md, mdLen, argv[2], strlen(argv[2]), argv[3], strlen(argv[3]))) exit(2); printf( HMAC= ); printhex(md, mdLen); } \uc2e4\ud589 \uacb0\uacfc $ gcc hmac.c -lcrypto $ ./a.out sha1 password1234 Hello, openssl HMAC=D3:94:59:1E:6D:99:06:62:E9:A6:84:BD:27:A8:34:EB:E4:6D:53:B0 $ ./a.out sha1 password 1234 Hello, openssl HMAC=F5:19:38:E1:95:8D:16:B0:54:7D:C0:00:B7:E3:3C:2E:69:3A:5C:BE $ Reference [1] OpenSSL\uc744 \uc774\uc6a9\ud55c \ubcf4\uc548 \ud504\ub85c\uadf8\ub798\ubc0d / \ub124\ud2b8\uc6cc\ud06c\uc5f0\uad6c\uc2e4(http://network.hanbat.ac.kr) [2] www.openssl.org","title":"Evp dgst"},{"location":"openssl/api/evp-dgst/#message-digest","text":"\uc784\uc758\uc758 \uae38\uc774\ub97c \uac00\uc9c0\ub294 \uba54\uc2dc\uc9c0\uc5d0 \ub300\uc751\ub418\ub294 \uc77c\uc815\ud55c \uae38\uc774\uc758 \ucf54\ub4dc. \ud574\uc2dc(hash), \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\ud2b8(message digest)","title":"Message Digest?"},{"location":"openssl/api/evp-dgst/#message-digest-function","text":"\ud574\uc2dc \ud568\uc218(hash function) \uc784\uc758\uc758 \uae38\uc774\ub97c \uac00\uc9c0\ub294 \uba54\uc2dc\uc9c0\uc758 \ud574\uc2dc\ub97c \ucd9c\ub825\ud558\ub294 \ud568\uc218. key\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc74c. 1\ube44\ud2b8\uc758 \ubcc0\ud654\uc5d0\ub3c4 \uc644\uc804\ud788 \ub2e4\ub978 \ud574\uc2dc\ub97c \ucd9c\ub825. \ubcf5\ud638\ud654\uac00 \ubd88\uac00\ub2a5\ud55c one-way function. \ub300\ud45c\uc801\uc73c\ub85c MD5, SHA1, SHA2 \uc554\ud638\ud559\uc801 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\ub97c \uc0ac\uc6a9.","title":"Message Digest Function"},{"location":"openssl/api/evp-dgst/#hmachash-based-message-authentication-code","text":"MAC \uc0dd\uc131\uc5d0 \uc554\ud638\ud559\uc801 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9. MAC\ub97c \uc0dd\uc131/\uac80\uc99d\ud558\uae30 \uc704\ud574 \ub300\uce6d\ud0a4(symmetric key)\ub97c \uc0ac\uc6a9.","title":"HMAC(Hash-based Message Authentication Code)"},{"location":"openssl/api/evp-dgst/#evp_md-api","text":"hash\ub97c \ucd9c\ub825. CTX\uc640 EVP \uc0ac\uc6a9. Init, Update, Final \uc21c\uc73c\ub85c \uc218\ud589. man EVP_MD_CTX_init #include openssl/evp.h struct env_md_ctx_st { const EVP_MD *digest; ENGINE *engine; /* functional reference if 'digest' is ENGINE-provided */ unsigned long flags; void *md_data; /* Public key context for sign/verify */ EVP_PKEY_CTX *pctx; /* Update function: usually copied from EVP_MD */ int (*update) (EVP_MD_CTX *ctx, const void *data, size_t count); } /* EVP_MD_CTX */ ;","title":"EVP_MD API"},{"location":"openssl/api/evp-dgst/#evp_md_ctx_init","text":"void EVP_MD_CTX_init(EVP_MD_CTX *ctx); ctx : message digest context ctx \ub97c \ucd08\uae30\ud654","title":"EVP_MD_CTX_init"},{"location":"openssl/api/evp-dgst/#evp_md_ctx_create","text":"EVP_MD_CTX *EVP_MD_CTX_create(void); EVP_MD_CTX \ub3d9\uc801\ud560\ub2f9","title":"EVP_MD_CTX_create"},{"location":"openssl/api/evp-dgst/#evp_digestinit","text":"int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type); int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl); ctx : \ucd08\uae30\ud654\ub41c message digest context type : \ud574\uc2dc \uc54c\uace0\ub9ac\uc998, \uc544\ub798 \ud568\uc218\uc758 \ub9ac\ud134\uac12. const EVP_MD *EVP_md_null(void); const EVP_MD *EVP_md2(void); const EVP_MD *EVP_md5(void); const EVP_MD *EVP_sha(void); const EVP_MD *EVP_sha1(void); const EVP_MD *EVP_dss(void); const EVP_MD *EVP_dss1(void); const EVP_MD *EVP_mdc2(void); const EVP_MD *EVP_ripemd160(void); const EVP_MD *EVP_sha224(void); const EVP_MD *EVP_sha256(void); const EVP_MD *EVP_sha384(void); const EVP_MD *EVP_sha512(void); impl : type \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc5d4\uc9c4, \uae30\ubcf8\uac12\uc740 NULL. message digest context \uc124\uc815, \ud574\uc2dc\ud558\uae30 \uc704\ud55c \ucd08\uae30\uc124\uc815. \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134.","title":"EVP_DigestInit"},{"location":"openssl/api/evp-dgst/#evp_digestupdate","text":"int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt); ctx : \ucd08\uae30\uc124\uc815\uc774 \uc644\ub8cc\ub41c message digest context d : \ud574\uc2dc\ud560 \uba54\uc2dc\uc9c0 cnt : d \uc758 \uae38\uc774. \uba54\uc2dc\uc9c0\ub97c \uc785\ub825\uc73c\ub85c \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc744 \uc218\ud589\ud55c\ub2e4. \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134.","title":"EVP_DigestUpdate"},{"location":"openssl/api/evp-dgst/#evp_digestfinal","text":"int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s); int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s); ctx : Update\uac00 \ub05d\ub09c message digest context. md : \ud574\uc2dc\uac00 \ucd9c\ub825\ub420 \ubc84\ud37c, \ucda9\ubd84\ud55c \ubc84\ud37c\ub97c \uac00\uc838\uc57c\ud568. s : \ucd9c\ub825\ub418\ub294 \ud574\uc2dc\uc758 \uae38\uc774\ub97c \uc800\uc7a5, NULL\uc774 \ub418\uba74 \uc548\ub428. \uacc4\uc0b0\ub41c \ud574\uc2dc\ub97c md \uc5d0 \uc800\uc7a5. EVP_DigestFinal_ex() \ub294 \uc790\ub3d9\uc73c\ub85c ctx\ub97c clean up. \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134.","title":"EVP_DigestFinal"},{"location":"openssl/api/evp-dgst/#evp_md_ctx_cleanup","text":"int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx); ctx \ub97c clean up.","title":"EVP_MD_CTX_cleanup"},{"location":"openssl/api/evp-dgst/#evp_md_ctx_destroy","text":"void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx); ctx \ub97c clean up. EVP_MD_CTX_create() \ub85c \ud560\ub2f9\ub41c ctx \ub97c \ud574\uc7ac.","title":"EVP_MD_CTX_destroy"},{"location":"openssl/api/evp-dgst/#evp_md_ctx_copy","text":"int EVP_MD_CTX_copy(EVP_MD_CTX *out,EVP_MD_CTX *in); int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out,const EVP_MD_CTX *in); in : source message digest context. out : destination message digest context. (\ucd08\uae30\ud654\ub41c) ctx \ub97c copy. \ubcf4\ud1b5 \ud070 \uba54\uc2dc\uc9c0\uc5d0\uc11c \uc77c\ubd80\ubd84\ub9cc \ub2e4\ub978 \uacbd\uc6b0 \uc0ac\uc6a9. EVP_MD_CTX_copy_ex() \ub294 \uc790\ub3d9\uc73c\ub85c out \uc744 \ucd08\uae30\ud654. \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134.","title":"EVP_MD_CTX_copy"},{"location":"openssl/api/evp-dgst/#exp_max_md_size","text":"#define EVP_MAX_MD_SIZE 64 /* SHA512 */ OpenSSL\uc5d0\uc11c \uc815\uc758\ud55c message digest\uc758 \ucd5c\ub300 \ud06c\uae30(in bytes)","title":"EXP_MAX_MD_SIZE"},{"location":"openssl/api/evp-dgst/#evp_md_type","text":"EVP_MD\uc5d0 \ud574\ub2f9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc758 \uc815\ubcf4\ub97c \ub9ac\ud134\ud558\ub294 \ud568\uc218 int EVP_MD_type(const EVP_MD *md); EVP_MD \uad6c\uc870\uccb4\uc5d0 \ud574\ub2f9\ud558\ub294 NID\ub97c \ub9ac\ud134. \uc2e4\ud328\uc2dc NID_undef \ub9ac\ud134. e.g. EVP_MD_type(EVP_sha1()); \ub294 NID_sha1 \ub97c \ub9ac\ud134.","title":"EVP_MD_type"},{"location":"openssl/api/evp-dgst/#evp_md_pkey_type","text":"int EVP_MD_pkey_type(const EVP_MD *md); \uacf5\uac1c\ud0a4 \uc11c\uba85 \uc54c\uace0\ub9ac\uc998\uacfc \uad00\ub828\ub41c \ud574\uc2dc \ud568\uc218\uc758 NID\ub97c \ub9ac\ud134. \uc2e4\ud328\uc2dc NID_undef \ub9ac\ud134. e.g. RSA\ubc29\uc2dd\uc758 \ud0a4\ub97c \uc0ac\uc6a9\ud55c \uacbd\uc6b0, NID_sha1WithRSAEncrption \uc744 \ub9ac\ud134.","title":"EVP_MD_pkey_type"},{"location":"openssl/api/evp-dgst/#evp_md_size","text":"int EVP_MD_size(const EVP_MD *md); EVP_MD \uc5d0 \ud574\ub2f9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \ucd9c\ub825\ud558\ub294 \ud574\uc2dc\uc758 \uae38\uc774\ub97c \ub9ac\ud134.(\ubc14\uc774\ud2b8)","title":"EVP_MD_size"},{"location":"openssl/api/evp-dgst/#evp_md_block_size","text":"int EVP_MD_block_size(const EVP_MD *md); EVP_MD \uc5d0 \ud574\ub2f9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \uc0ac\uc6a9\ud558\ub294 \uba54\uc2dc\uc9c0 \ube14\ub7ed \uae38\uc774\ub97c \ub9ac\ud134.","title":"EVP_MD_block_size"},{"location":"openssl/api/evp-dgst/#useful-macro-of-evp_md_ctx","text":"","title":"Useful macro of EVP_MD_CTX"},{"location":"openssl/api/evp-dgst/#ctx","text":"```c const EVP_MD EVP_MD_CTX_md(const EVP_MD_CTX ctx);","title":"ctx\uc5d0 \uc124\uc815\ub41c \uc815\ubcf4\ub97c \ub9ac\ud134\ud558\ub294 \ud568\uc218 \ubc0f \ub9e4\ud06c\ub85c"},{"location":"openssl/api/evp-dgst/#define-evp_md_ctx_sizee-evp_md_sizeevp_md_ctx_mde","text":"","title":"define EVP_MD_CTX_size(e)             EVP_MD_size(EVP_MD_CTX_md(e))"},{"location":"openssl/api/evp-dgst/#define-evp_md_ctx_block_sizee-evp_md_block_sizee-digest","text":"","title":"define EVP_MD_CTX_block_size(e)       EVP_MD_block_size((e)-&gt;digest)"},{"location":"openssl/api/evp-dgst/#define-evp_md_ctx_typee-evp_md_typee-digest","text":"### EVP_get_digestbyname ```c const EVP_MD *EVP_get_digestbyname(const char *name); name : \ud574\uc2dc \uc54c\uace0\ub9ac\uc998 \uc774\ub984(\ubb38\uc790\uc5f4), openssl list-message-digest-algorithms \ucc38\uace0 name \uc5d0 \ud574\ub2f9\ud558\ub294 EVP_MD \uad6c\uc870\uccb4 \ud3ec\uc778\ud130\ub97c \ub9ac\ud134, \uc2e4\ud328\uc2dc NULL \ub9ac\ud134. \ud568\uc218 \uc218\ud589 \uc804\uc5d0 OpenSSL_add_all_digests() \uc774 \ud638\ucd9c\ub418\uc5b4\uc57c \ud568.","title":"define EVP_MD_CTX_type(e)             EVP_MD_type((e)-&gt;digest)"},{"location":"openssl/api/evp-dgst/#evp_get_digestbynid","text":"#define EVP_get_digestbynid(a) EVP_get_digestbyname(OBJ_nid2sn(a)) digest NID\uc5d0 \ud574\ub2f9\ud558\ub294 EVP_MD* \ub9ac\ud134","title":"EVP_get_digestbynid"},{"location":"openssl/api/evp-dgst/#evp_get_digestbyobj","text":"#define EVP_get_digestbyobj(a) EVP_get_digestbynid(OBJ_obj2nid(a)) ASN1_OBJECT \uad6c\uc870\uccb4\uc5d0 \ud574\ub2f9\ud558\ub294 EVP_MD* \ub9ac\ud134","title":"EVP_get_digestbyobj"},{"location":"openssl/api/evp-dgst/#examples","text":"","title":"Examples"},{"location":"openssl/api/evp-dgst/#mdc","text":"Example - Message digest for file /* md.c */ #include stdio.h #include stdlib.h #include openssl/evp.h #define eprintfExit(x, ...) { fprintf(stderr, __VA_ARGS__); exit(x); } #define eprintfReturn(x, ...) { fprintf(stderr, __VA_ARGS__); return (x); } void printhex(unsigned char *b, int bLen) { int i; printf( %02X ,b[0]); for(i=1; i bLen; i++) printf( :%02X , b[i]); printf( \\n ); } int make_md(const char *mdname, FILE *fp, unsigned char *md, int *mdLen) { EVP_MD_CTX mctx; const EVP_MD *evpmd; unsigned char in[BUFSIZ]; int inLen; OpenSSL_add_all_digests(); if(!(evpmd=EVP_get_digestbyname(mdname))) eprintfReturn(0, Unknown digest name.\\n ); EVP_MD_CTX_init( mctx); EVP_DigestInit_ex( mctx, evpmd, NULL); while((inLen=fread(in, 1, sizeof(in), fp)) 0) EVP_DigestUpdate( mctx, in, inLen); EVP_DigestFinal_ex( mctx, md, mdLen); //EVP_MD_CTX_cleanup( mctx); return 1; } void main(int argc, char **argv) { unsigned char md[EVP_MAX_MD_SIZE]; int mdLen; FILE *fp; if(argc!=3) eprintfExit(1, Usage: %s digest name inFile .\\n , argv[0]); if((fp=fopen(argv[2], rb ))==NULL) eprintfExit(2, open error %s , argv[2]); if(!make_md(argv[1], fp, md, mdLen)) exit(3); printf( Hash= ); printhex(md, mdLen); fclose(fp); }","title":"md.c"},{"location":"openssl/api/evp-dgst/#_1","text":"$ gcc md.c -lcrypto $ ./a.out sha1 md.c Hash=64:7C:E6:5B:5C:EA:FA:39:20:EE:62:60:56:97:7B:A8:FB:16:4F:8F $","title":"\uc2e4\ud589 \uacb0\uacfc"},{"location":"openssl/api/evp-dgst/#hmac-api","text":"EVP_MD\uc640 \uc720\uc0ac\ud568. Init \uacfc\uc815\uc5d0\uc11c \ud0a4 \uac12\uc744 \uc124\uc815\ud558\ub294 \uac83\ub9cc EVP_MD\uc640 \ub2e4\ub984. man hmac","title":"HMAC API"},{"location":"openssl/api/evp-dgst/#hmac","text":"#include openssl/hmac.h unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len, const unsigned char *d, int n, unsigned char *md, unsigned int *md_len); n \uae38\uc774\uc758 \uba54\uc2dc\uc9c0 d \uc5d0 \ub300\ud55c HMAC\uc744 \uc0dd\uc131. \uc131\uacf5 \uc2dc \ucd9c\ub825\ub41c HMAC\uc758 \ud3ec\uc778\ud130( md \uac00 NULL \uc774\uba74 \ub0b4\ubd80\uc758 static \ubb38\uc790\uc5f4\uc758 \uc8fc\uc18c \ub9ac\ud134), \uc2e4\ud328\uc2dc NULL \ub9ac\ud134. md_len \uc740 NULL \uc774\uba74 \uc548\ub428. evp_md : \ud574\uc2dc \uc54c\uace0\ub9ac\uc998. key : \ud0a4(key) \uac12. (in binary) key_len : key \uc758 \uae38\uc774, HMAC\uc758 \ud0a4 \uae38\uc774\ub294 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9d0. md : HMAC\uc744 \uc800\uc7a5. md_len : \ucd9c\ub825\ub41c md \uc758 \uae38\uc774\ub97c \uc800\uc7a5.","title":"HMAC()"},{"location":"openssl/api/evp-dgst/#initialize","text":"","title":"Initialize"},{"location":"openssl/api/evp-dgst/#hmac_ctx_init","text":"void HMAC_CTX_init(HMAC_CTX *ctx); hmac context\ub97c \ucd08\uae30\ud654.","title":"HMAC_CTX_init()"},{"location":"openssl/api/evp-dgst/#hmac_init","text":"int HMAC_Init(HMAC_CTX *ctx, const void *key, int key_len, const EVP_MD *md); int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int key_len, const EVP_MD *md, ENGINE *impl); ctx : \ucd08\uae30\ud654\ub41c hmac context. key : \ud0a4 \uac12. (in binary) key_len : key \uc758 \uae38\uc774. md : \ud574\uc2dc \uc54c\uace0\ub9ac\uc998. HMAC_Init_ex() \uc740 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c ENGINE \uc744 \ucd94\uac00 \uad6c\uc131 \uac00\ub2a5.","title":"HMAC_Init()"},{"location":"openssl/api/evp-dgst/#hmac_update","text":"int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, int len); ctx : \ucd08\uae30\uc124\uc815\ub41c hmac context. data : message. len : data \uc758 \uae38\uc774. \uc124\uc815\ub41c \ud0a4\uc640 \ud574\uc2dc \uc54c\uace0\ub9ac\uc998\uc73c\ub85c HMAC\uc744 \uacc4\uc0b0.","title":"HMAC_Update()"},{"location":"openssl/api/evp-dgst/#hmac_final","text":"int HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len); ctx : Update() \uac00 \uc644\ub8cc\ub41c hmac context. md : HMAC\uc744 \uc800\uc7a5\ud560 \ubc84\ud37c. len : \ucd9c\ub825\ub41c HMAC\uc758 \uae38\uc774\ub97c \uc800\uc7a5. \ucd9c\ub825\ub41c HMAC\uc744 md \uc5d0 \uc800\uc7a5. md_len \uc740 NULL \uc774\uba74 \uc548\ub428.","title":"HMAC_Final()"},{"location":"openssl/api/evp-dgst/#cleanup","text":"void HMAC_CTX_cleanup(HMAC_CTX *ctx); void HMAC_cleanup(HMAC_CTX *ctx); hmac context\ub97c clean up. (HMAC\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574 \ud560\ub2f9\ub418\uc5c8\ub358 \uc790\uc6d0\uc744 \ud574\uc81c, \ud0a4 \uac12 \uc81c\uac70 \ub4f1 context\uc758 \ub0b4\uc6a9\uc744 \uc0ad\uc81c) HMAC_cleanup() \uc740 HMAC_CTX_cleanup() \uc758 \ubcc4\uce6d, 0.9.6b\uc640 \ud558\uc704 \ud638\ud658\uc131(back compatibility)\uc744 \uc704\ud574 \uc0ac\uc6a9, \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc74c.","title":"Cleanup"},{"location":"openssl/api/evp-dgst/#example","text":"","title":"Example"},{"location":"openssl/api/evp-dgst/#hmacc","text":"Example - HMAC for a message. /* hmac.c */ #include stdio.h #include stdlib.h #include string.h #include openssl/hmac.h #define eprintfExit(x, ...) { fprintf(stderr, __VA_ARGS__); exit(x); } #define eprintfReturn(x, ...) { fprintf(stderr, __VA_ARGS__); return (x); } void printhex(unsigned char *b, int bLen) { int i; printf( %02X ,b[0]); for(i=1; i bLen; i++) printf( :%02X , b[i]); printf( \\n ); } int make_hmac(const char *mdname, unsigned char *md, int *mdLen, const unsigned char *key, const int keyLen, const unsigned char *m, const int mLen) { HMAC_CTX hctx; const EVP_MD* evpmd; OpenSSL_add_all_digests(); if(!(evpmd=EVP_get_digestbyname(mdname))) eprintfReturn(0, Unknown digest name.\\n ); HMAC_Init( hctx, key, keyLen, evpmd); HMAC_Update( hctx, m, mLen); HMAC_Final( hctx, md, mdLen); HMAC_CTX_cleanup( hctx); return 1; } void main(int argc, char **argv) { unsigned char md[EVP_MAX_MD_SIZE]; int mdLen; if(argc!=4) eprintfExit(1, Usage: %s digest name password messages .\\n , argv[0]); /* use HMAC() */ // OpenSSL_add_all_digests(); // HMAC(EVP_get_digestbyname(argv[1]), argv[2], strlen(argv[2]), argv[3], strlen(argv[3]), md, mdLen); /* end of 'use HMAC() */ if(!make_hmac(argv[1], md, mdLen, argv[2], strlen(argv[2]), argv[3], strlen(argv[3]))) exit(2); printf( HMAC= ); printhex(md, mdLen); }","title":"hmac.c"},{"location":"openssl/api/evp-dgst/#_2","text":"$ gcc hmac.c -lcrypto $ ./a.out sha1 password1234 Hello, openssl HMAC=D3:94:59:1E:6D:99:06:62:E9:A6:84:BD:27:A8:34:EB:E4:6D:53:B0 $ ./a.out sha1 password 1234 Hello, openssl HMAC=F5:19:38:E1:95:8D:16:B0:54:7D:C0:00:B7:E3:3C:2E:69:3A:5C:BE $","title":"\uc2e4\ud589 \uacb0\uacfc"},{"location":"openssl/api/evp-dgst/#reference","text":"[1] OpenSSL\uc744 \uc774\uc6a9\ud55c \ubcf4\uc548 \ud504\ub85c\uadf8\ub798\ubc0d / \ub124\ud2b8\uc6cc\ud06c\uc5f0\uad6c\uc2e4(http://network.hanbat.ac.kr) [2] www.openssl.org","title":"Reference"},{"location":"openssl/api/evp-sym-cipher/","text":"About EVP Perhaps, EVP stands for Envelope. High-level Cryptographic Functions. \ub2e4\uc591\ud55c OpenSSL\uc758 \uc554\ud638 API\ub97c \ud558\ub098\uc758 \uc778\ud130\ud398\uc774\uc2a4(interface)\ub85c \uad6c\uc131. The EVP interface, which can be accessed by including penssl/evp.h About CTX(Context) EVP\ub85c Encryption, Decryption \ub4f1, \uac01 \uc218\ud589\uc5d0 \ud544\uc694\ud558\uac70\ub098 \ubcc0\uacbd\ub418\ub294 \uc815\ubcf4\ub4e4\uc744 \uc720\uc9c0\ud558\ub294 \uad6c\uc870\uccb4. \uc554\ud638\ud654 \uc54c\uace0\ub9ac\uc998, \ud0a4(key) \uac12, IV(initialization vector) \uac12, padding \uc124\uc815 \ub4f1... \ub300\uce6d\ud0a4 \uc554\ud638\uc5d0\uc11c EVP_CIPHER_CTX \uad6c\uc870\uccb4\ub97c \uc0ac\uc6a9. EVP Cipher APIs EVP \uc0ac\uc6a9 \uc2dc \uc5ec\ub7ec \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc744 \ub3d9\uc77c\ud55c \ub8e8\ud2f4(routine)\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5. \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc554\ud638/\ubcf5\ud638\ud654\ud558\ub294 \ud568\uc218. EVP_EncryptUpdate() , EVP_DecryptUpdate() , EVP_CipherUpdate() , ... \uc811\ubbf8\uc0ac _ex \uac00 \ubd99\ub294 \ud568\uc218\ub294 \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \ucd94\uac00\uc801\uc778 \uc124\uc815\uc774 \uac00\ub2a5. \uc554\ud638/\ubcf5\ud638\ud654\uc758 \ub3d9\uc791 \ub8e8\ud2f4\uc740 \ub3d9\uc77c\ud558\uace0 \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\uba85\ub9cc \ub2e4\ub984. APIs man EVP_CIPHER_CTX_init \ud5e4\ub354(header) \ud30c\uc77c #include openssl/evp.h EVP_CIPHER_CTX \uad6c\uc870\uccb4 struct evp_cipher_ctx_st{ const EVP_CIPHER *cipher; ENGINE *engine; /* functional reference if 'cipher' is ENGINE-provided */ int encrypt; /* encrypt or decrypt */ int buf_len; /* number we have left */ unsigned char ovi[EVP_MAX_IV_LENGTH]; /* original iv */ unsigned char iv[EVP_MAX_IV_LENGTH]; /* working iv */ unsigned char buf[EVP_MAX_BLOCK_LENGTH]; /* saved partial block */ int num; /* used by cfb/ofb/ctr mode */ void *app_data; /* application stuff */ int key_len; /* May change for variable length cipher */ unsigned long flags; /* Various flags */ void *cipher_data; /* per EVP data */ int final_used; unsigned char final[EVP_MAX_BLOCK_LENGTH]; /* possible final block */ } /* EVP_CIPHER_CTX */ ; CTX \ucd08\uae30\ud654 EVP_CIPHER_CTX_init void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *ctx); cipher context\ub97c \ucd08\uae30\ud654. ctx : cipher context\uc758 \uc8fc\uc18c. EVP \uc554\ud638/\ubcf5\ud638\ud654 \ucd08\uae30 \uc124\uc815 - Init() int EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char *key, unsigned char *iv); int EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char *key, unsigned char *iv); int EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char *key, unsigned char *iv, int enc); int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl, unsigned char *key, unsigned char *iv); int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl, unsigned char *key, unsigned char *iv); int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl, unsigned char *key, unsigned char *iv, int enc); \uc554\ud638/\ubcf5\ud638\ud654 \ud558\uae30 \uc704\ud55c \ucd08\uae30 \uc124\uc815. \uc131\uacf5\uc2dc 1 , \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. ctx : \uc0ac\uc6a9\ub418\ub294 cipher context. type : \uc554\ud638\ud654 \uc54c\uace0\ub9ac\uc998(cipher) e.g. EVP_des_ecb() , EVP_aes_128_cbc() , ... \ub4f1\uc758 \ub9ac\ud134 \uac12. key : binary key \uac12, \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \uae38\uc774\uac00 \uc798\ub9bc. iv : binary iv \uac12, \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \uae38\uc774\uac00 \uc798\ub9bc, ECB mode\uc5d0\uc11c\ub294 NULL \ub85c \uc124\uc815, \uac12\uc774 \uc788\ub354\ub77c\ub3c4 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc74c. enc : \uc554\ud638/\ubcf5\ud638\ud654 flag, 1 \uc774\uba74 \uc554\ud638\ud654 , 0 \uc774\uba74 \ubcf5\ud638\ud654 . EVP \uc554\ud638/\ubcf5\ud638\ud654 \uc218\ud589 - Update() int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, unsigned char *in, int inl); int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, unsigned char *in, int inl); int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, unsigned char *in, int inl); \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc554\ud638/\ubcf5\ud638\ud654. \uc131\uacf5\uc2dc 1 , \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. block size\uac00 \ub9de\uc9c0 \uc54a\uc73c\uba74, Final() , Final_ex() \uc5d0\uc11c \ucc98\ub9ac. (ECB/CBC mode\ucc98\ub7fc block cipher\uc778 \uacbd\uc6b0) outl \uc740 \uc554\ud638/\ubcf5\ud638\ud654\uc5d0 \uc131\uacf5\ud55c \ubc14\uc774\ud2b8 \ud06c\uae30\ub97c \ub098\ud0c0\ub0c4, \uc989 \uc554\ud638/\ubcf5\ud638\ud654\uac00 \uc131\uacf5\ud55c \ubc14\uc774\ud2b8 \ud06c\uae30. ctx : \uc0ac\uc6a9\ub418\ub294 cipher context. out : \uc554\ud638/\ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\uac00 \uc800\uc7a5\ub420 \ubc84\ud37c. outl : out \uc758 \uae38\uc774\uac00 \uc800\uc7a5\ub420 \ubcc0\uc218, \uc554\ud638/\ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774. in : \uc785\ub825 \ub370\uc774\ud130, \uc554\ud638\ud654\uc2dc \ud3c9\ubb38, \ubcf5\ud638\ud654\uc2dc \uc554\ud638\ubb38. inl : in \uc758 \uae38\uc774 EVP \uc554\ud638/\ubcf5\ud638\ud654 \uc218\ud589 - Final() int EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); \ud328\ub529 \ubc0f \ud544\uc694\ud55c \uc791\uc5c5\uc744 \ucc98\ub9ac \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. block size\uac00 \ub9de\uc9c0 \uc54a\uc544 Update()\uc5d0\uc11c \ucc98\ub9ac\uac00 \uc548\ub41c \ub370\uc774\ud130\ub97c \ucc98\ub9ac. (ECB/CBC mode\ucc98\ub7fc block cipher\uc778 \uacbd\uc6b0) ECB/CBC mode\uc5d0\uc11c \uc554\ud638\ud654\uc2dc \ud328\ub529(padding)\uc774 \ucd94\uac00, \ubcf5\ud638\ud654\uc2dc \ud328\ub529\uc774 \uc81c\uac70. ctx : \uc0ac\uc6a9\ub418\ub294 cipher context. out : \uc554\ud638/\ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\uac00 \uc800\uc7a5\ub420 \ubc84\ud37c outl : out \uc758 \uae38\uc774\uac00 \uc800\uc7a5\ub420 \ubcc0\uc218 Useful APIs EVP_CIPHER_CTX_set_padding int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *ctx, int padding); \ud328\ub529(padding) \uc0ac\uc6a9 \uc720\ubb34\ub97c \uacb0\uc815. \ud56d\uc0c1 1 \ub9ac\ud134. ECB/CBC mode \uc5d0\uc11c \uc0ac\uc6a9. padding : 1 \uc774\uba74 on, 0 \uc774\uba74 off. EVP_CIPHER_CTX_set_key_length int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *ctx, int keylen); ctx \uc758 key \uae38\uc774\ub97c \uc124\uc815. \ud56d\uc0c1 1 \ub9ac\ud134. cipher\uc5d0 \ub530\ub77c \uac00\ubcc0\uc801\uc778 key \uae38\uc774 \uc124\uc815 \uac00\ub2a5. keylen : \ubc14\uc774\ud2b8 \ub2e8\uc704\uc758 key \uae38\uc774. EVP_CIPHER_CTX_ctrl int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr); cipher\uc5d0 \uad00\ub828\ub41c \uc124\uc815 \ud30c\ub77c\ubbf8\ud130(configurable parameters)\ub97c \uc124\uc815 \uac00\ub2a5. Linux system call\uc758 fctrl() \uc640 \uc720\uc0ac. type : \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \uc124\uc815 \uac00\ub2a5\ud55c \uac12, refer to \"openssl/evp.h\" e.g. EVP_CTRL_GET_RC2_KEY_BITS, EVP_CTRL_SET_RC2_KEY_BITS, EVP_CTRL_GET_RC5_ROUNDS, EVP_CTRL_SET_RC5_ROUNDS, ... \ub4f1. arg : \ud30c\ub77c\ubbf8\ud130(\uc815\uc218\ud615), type \uc5d0 \ub530\ub77c \uc6a9\ub3c4\uac00 \ub2ec\ub77c\uc9d0. ptr : \ud30c\ub77c\ubbf8\ud130(\uc815\uc218\ud615), \uc77d\uc744/\uc800\uc7a5\ub420 \ubcc0\uc218\uc758 \uc8fc\uc18c \ub4f1\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5, type\uc5d0 \ub530\ub77c \uc6a9\ub3c4\uac00 \ub2ec\ub77c\uc9d0. EVP_CIPHER_CTX_cleanup int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *ctx); ctx \uc758 \ub0b4\uc6a9\uc744 \uc0ad\uc81c. EVP_get_cipherbyname const EVP_CIPHER *EVP_get_cipherbyname(const char *name); name \uc5d0 \ud574\ub2f9\ud558\ub294 EVP_CIPHER \uad6c\uc870\uccb4\ub97c \ub9ac\ud134. OpenSSL_add_all_ciphers() \ub97c \uba3c\uc800 \ud638\ucd9c\ud574\uc57c \uc0ac\uc6a9 \uac00\ub2a5. name : cipher \uc774\ub984, refer to \"man enc\" e.g. des-ecb , aes-128-ecb , aes-192-cbc , ... . EVP macros and others. How to check that padding is disable int pad=(ctx- flags EVP_CIPH_NO_PADDING); EVP_get_cipherbynid/obj // a : integer #define EVP_get_cipherbynid(a) EVP_get_cipherbyname(OBJ_nid2sn(a)) #define EVP_get_cipherbyobj(a) EVP_get_cipherbynid(OBJ_obj2nid(a)) Get an attributes from EVP_CIPHER // e : const EVP_CIPHER* #define EVP_CIPHER_nid(e) ((e)- nid) #define EVP_CIPHER_block_size(e) ((e)- block_size) #define EVP_CIPHER_key_length(e) ((e)- key_len) #define EVP_CIPHER_iv_length(e) ((e)- iv_len) #define EVP_CIPHER_flags(e) ((e)- flags) #define EVP_CIPHER_mode(e) ((e)- flags) EVP_CIPH_MODE) int EVP_CIPHER_type(const EVP_CIPHER *ctx); Get an attributes from EVP_CIPHER_CTX // e : EVP_CIPHER_CTX* #define EVP_CIPHER_CTX_cipher(e) ((e)- cipher) // get cipher object #define EVP_CIPHER_CTX_nid(e) ((e)- cipher- nid) // get cipher nid #define EVP_CIPHER_CTX_block_size(e) ((e)- cipher- block_size) // get cipher block size #define EVP_CIPHER_CTX_key_length(e) ((e)- key_len) // get cipher key length #define EVP_CIPHER_CTX_iv_length(e) ((e)- cipher- iv_len) // get cipher IV length #define EVP_CIPHER_CTX_get_app_data(e) ((e)- app_data) #define EVP_CIPHER_CTX_set_app_data(e,d) ((e)- app_data=(char *)(d)) #define EVP_CIPHER_CTX_type(c) EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c)) // get cipher type #define EVP_CIPHER_CTX_flags(e) ((e)- cipher- flags) // get flags #define EVP_CIPHER_CTX_mode(e) ((e)- cipher- flags EVP_CIPH_MODE) // get mode Convert for ASN.1 int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type); int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type); EVP \uc554\ud638/\ubcf5\ud638\ud654 \uacfc\uc815 Example code for do_crypt do_crypt(FILE *inFp, FILE *outFp, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv/*, int enc*/) // enc\ub294 EVP_Cipher~()\uc5d0\uc11c \uc0ac\uc6a9 { int inLen, outLen; unsigned char inBuf[BUFSIZ], outBuf[BUFSIZ+EVP_MAX_BLOCK_LENGTH]; // inBuf \ud06c\uae30\ub294 cipher\uc5d0 \ub530\ub77c block size\uc758 \ubc30\uc218. // outBuf \ud06c\uae30\ub294 inBuf\ubcf4\ub2e4 \ucd94\uac00\uc801\uc778 block size\ub97c \ub354 \uac00\uc7a0. (padding \ub4f1\uc758 \uc774\uc720) // block cipher\uc778 ECB/CBC mode\uc5d0\uc11c \uc801\uc6a9\ub418\ub294 \uc0ac\ud56d (CBC\ub9cc IV \ud544\uc694) // stream cipher\uc778OFB/CFB/CTR\uc5d0\uc11c\ub294 plaintext\uc640 ciphertext\uc758 \ud06c\uae30\uac00 \uac19\uc74c. (\ub2e8, IV\uac00 \ud544\uc694) EVP_CIPHER_CTX ctx; // 1. context \ucd08\uae30\ud654 EVP_CIPHER_CTX_init( ctx); // 2. \uc554\ud638/\ubcf5\ud638\ud654 \ucd08\uae30 \uc124\uc815 EVP_EncryptInit_ex( ctx, cipher, NULL, key, iv); // encrypt //EVP_DecryptInit_ex( ctx, cipher, NULL, key, iv); // decrypt //EVP_CipherInit_ex( ctx, cipher, NULL, key, iv, enc); // enc=1 : encrypt, enc=0 : decrypt // 3. \ub370\uc774\ud130 \uc554\ud638/\ubcf5\ud638\ud654 while((inLen=fread(inBuf, 1, sizeof(inBuf), inFp)) 0) { EVP_EncryptUpdate( ctx, outBuf, outLen, inBuf, inLen); // EVP_DecryptUpdate( ctx, outBuf, outLen, inBuf, inLen); // EVP_CipherUpdate( ctx, outBuf, outLen, inBuf, inLen); fwrite(outBuf, 1, outLen, outFp); } // 4. \uc554\ud638\ud654 \ub9c8\uc9c0\ub9c9 \ucc98\ub9ac, e.g. \ud328\ub529 \ucc98\ub9ac EVP_EncryptFinal_ex( ctx, outBuf, outLen); //EVP_DecryptFinal_ex( ctx, outBuf, outLen); //EVP_CipherFinal_ex( ctx, outBuf, outLen); fwrite(outBuf, 1, outLen, outFp); EVP_CIPHER_CTX_cleanup( ctx); } Example 1 - using EVP_Encrypt/Decrypt~() /* enc.c */ #include stdio.h #include string.h #include stdlib.h #include openssl/evp.h #include openssl/rand.h #include getopt.h #define PrintfErrorExit(x, ...) { fprintf(stderr, __VA_ARGS__); exit(x); } int encrypt(FILE *inFp, FILE *outFp, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv) { int inLen, outLen; // inLen:\uc785\ub825\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774, outLen:\ucd9c\ub825\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774 char inBuf[BUFSIZ], outBuf[BUFSIZ+EVP_MAX_BLOCK_LENGTH]; // inBuf:\uc785\ub825 \ub370\uc774\ud130 \ubc84\ud37c, outBuf:\ucd9c\ub825 \ub370\uc774\ud130 \ubc84\ud37c EVP_CIPHER_CTX ctx; // \uc554\ud638\ud654 \uc218\ud589\uc5d0 \uc0ac\uc6a9\ud560 context // 1. context \ucd08\uae30\ud654 EVP_CIPHER_CTX_init( ctx); // 2. \uc554\ud638\ud654 \ucd08\uae30 \uc124\uc815. // - context, \uc554\ud638 \uc54c\uace0\ub9ac\uc998, \ud0a4 \uac12, IV \uac12 \uc124\uc815 EVP_EncryptInit_ex( ctx, cipher, NULL, key, iv); // 3. \ub370\uc774\ud130 \uc554\ud638\ud654 while((inLen=fread(inBuf, 1, sizeof(inBuf), inFp)) 0) // \uc785\ub825 \ud30c\uc77c\uc5d0\uc11c BUFSIZ\ub9cc\ud07c \ub370\uc774\ud130\ub97c read { if(!EVP_EncryptUpdate( ctx, outBuf, outLen, inBuf, inLen)) // read\ub41c \ub370\uc774\ud130\ub97c \uc554\ud638\ud654 { printf( EVP_EncryptUpdate() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -1; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \uc554\ud638\ud654\ub41c \ub370\uc774\ud130\ub97c write } // 4. \uc554\ud638\ud654\uc758 \ub9c8\uc9c0\ub9c9 \ucc98\ub9ac, e.g. \ud328\ub529 \ucc98\ub9ac if(!EVP_EncryptFinal_ex( ctx, outBuf, outLen)) { printf( EVP_EncryptFinal_ex() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -2; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc554\ud638\ud654\ub41c(\ud328\ub529 \ucc98\ub9ac\ub41c) \ub370\uc774\ud130\ub97c write EVP_CIPHER_CTX_cleanup( ctx); // context \ucd08\uae30\ud654 return 0; } int decrypt(FILE *inFp, FILE *outFp, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv) { int inLen, outLen; char inBuf[BUFSIZ], outBuf[BUFSIZ+EVP_MAX_BLOCK_LENGTH]; EVP_CIPHER_CTX ctx; // \ubcf5\ud638\ud654 \uc218\ud589\uc5d0 \uc0ac\uc6a9\ud560 context // 1. context \ucd08\uae30\ud654 EVP_CIPHER_CTX_init( ctx); // 2. \ubcf5\ud638\ud654 \ucd08\uae30 \uc124\uc815. // - context, \uc554\ud638 \uc54c\uace0\ub9ac\uc998, \ud0a4 \uac12, IV \uac12 \uc124\uc815 EVP_DecryptInit_ex( ctx, cipher, NULL, key, iv); // 3. \ub370\uc774\ud130 \ubcf5\ud638\ud654 while((inLen=fread(inBuf, 1, sizeof(inBuf), inFp)) 0) // \uc785\ub825 \ud30c\uc77c\uc5d0\uc11c BUFSIZ\ub9cc\ud07c \ub370\uc774\ud130\ub97c read { if(!EVP_DecryptUpdate( ctx, outBuf, outLen, inBuf, inLen)) // read\ub41c \ub370\uc774\ud130\ub97c \ubcf5\ud638\ud654, \uc2e4\ud328 \uc2dc 0 \ub9ac\ud134 { printf( EVP_DecryptUpdate() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -1; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\ub97c write } // 4. \ubcf5\ud638\ud654\uc758 \ub9c8\uc9c0\ub9c9 \ucc98\ub9ac, e.g. \ud328\ub529 \ucc98\ub9ac if(!EVP_DecryptFinal_ex( ctx, outBuf, outLen)) { printf( EVP_DecryptFinal_ex() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -2; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ubcf5\ud638\ud654\ub41c(\ud328\ub529 \ucc98\ub9ac\ub41c) \ub370\uc774\ud130\ub97c write EVP_CIPHER_CTX_cleanup( ctx); return 0; } void printhex(const char *prefix, const unsigned char *s, const int sLen) { int i; printf( %s[%d]:\\n , prefix, sLen); printf( %02X , s[0]); for(i=1; i sLen; i++) printf( :%02X , s[i]); printf( \\n ); } int main(int argc, char **argv) { FILE *inFp, *outFp; // \uc785\ucd9c\ub825 \ud30c\uc77c\uc758 \ud30c\uc77c \ud3ec\uc778\ud130 int opt; // \uc635\uc158 \ubb38\uc790 int keyLen, ivLen; // \uc785\ub825\ub41c key \uac12, iv \uac12 unsigned char key[EVP_MAX_KEY_LENGTH]; // key \ubc84\ud37c unsigned char iv[EVP_MAX_IV_LENGTH]; // iv \ubc84\ud37c const EVP_CIPHER *cipher=EVP_enc_null(); // \uc554\ud638 \uc54c\uace0\ub9ac\uc998 int (*crypt)(FILE*, FILE*, const EVP_CIPHER*, // \ud568\uc218 \ud3ec\uc778\ud130 const unsigned char*, const unsigned char *); if(argc!=4 || (opt=getopt(argc, argv, ed ))==-1) PrintfErrorExit(2, Usage: %s -e|d inFile outFile \\n , argv[0]); switch(opt) { case 'e': // encrypt crypt=encrypt; break; case 'd': // decrypt crypt=decrypt; break; case '?': default: PrintfErrorExit(3, Usage: %s -e|d inFile outFile \\n , argv[0]); } if((inFp=fopen(argv[2], rb ))==NULL) PrintfErrorExit(4, fopen(\\ %s\\ ) error.\\n , argv[1]); if((outFp=fopen(argv[3], wb ))==NULL) PrintfErrorExit(5, fopen(\\ %s\\ ) error.\\n , argv[2]); OpenSSL_add_all_ciphers(); // EVP_get_cipherbyname()\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud638\ucd9c. cipher=EVP_get_cipherbyname( aes-128-cbc ); memcpy(key, password01234567 , keyLen=EVP_CIPHER_key_length(cipher)); memcpy(iv, 01234567 , ivLen=EVP_CIPHER_iv_length(cipher)); printhex( key , key, keyLen); printhex( iv , iv, ivLen); if(crypt(inFp, outFp, cipher, key, iv) 0) exit(6); fclose(inFp); fclose(outFp); exit(0); } Example 2 - using EVP_Cipher~() /* enc2.c */ #include stdio.h #include string.h #include stdlib.h #include openssl/evp.h #include openssl/rand.h #include getopt.h #define PrintfErrorExit(x, ...) { fprintf(stderr, __VA_ARGS__); exit(x); } int do_crypt(FILE *inFp, FILE *outFp, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, int enc) { int inLen, outLen; // inLen:\uc785\ub825\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774, outLen:\ucd9c\ub825\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774 char inBuf[BUFSIZ], outBuf[BUFSIZ+EVP_MAX_BLOCK_LENGTH]; // inBuf:\uc785\ub825 \ub370\uc774\ud130 \ubc84\ud37c, outBuf:\ucd9c\ub825 \ub370\uc774\ud130 \ubc84\ud37c EVP_CIPHER_CTX ctx; // \uc554\ud638/\ubcf5\ud638\ud654 \uc218\ud589\uc5d0 \uc0ac\uc6a9\ud560 context // 1. context \ucd08\uae30\ud654 EVP_CIPHER_CTX_init( ctx); // 2. \uc554\ud638/\ubcf5\ud638\ud654 \ucd08\uae30 \uc124\uc815. // - context, \uc554\ud638 \uc54c\uace0\ub9ac\uc998, \ud0a4 \uac12, IV \uac12 \uc124\uc815 EVP_CipherInit_ex( ctx, cipher, NULL, key, iv, enc); // 3. \ub370\uc774\ud130 \uc554\ud638\ud654 while((inLen=fread(inBuf, 1, sizeof(inBuf), inFp)) 0) // \uc785\ub825 \ud30c\uc77c\uc5d0\uc11c BUFSIZ\ub9cc\ud07c \ub370\uc774\ud130\ub97c read { if(!EVP_CipherUpdate( ctx, outBuf, outLen, inBuf, inLen)) // read\ub41c \ub370\uc774\ud130\ub97c \uc554\ud638/\ubcf5\ud638\ud654 { printf( EVP_EncryptUpdate() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -1; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \uc554\ud638/\ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\ub97c write } // 4. \uc554\ud638/\ubcf5\ud638\ud654\uc758 \ub9c8\uc9c0\ub9c9 \ucc98\ub9ac, e.g. \ud328\ub529 \ucc98\ub9ac if(!EVP_CipherFinal_ex( ctx, outBuf, outLen)) { printf( EVP_EncryptFinal_ex() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -2; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc554\ud638/\ubcf5\ud638\ud654\ub41c(\ud328\ub529 \ucc98\ub9ac\ub41c) \ub370\uc774\ud130\ub97c write EVP_CIPHER_CTX_cleanup( ctx); // context \ucd08\uae30\ud654 return 0; } void printhex(const char *prefix, const unsigned char *s, const int sLen) { int i; printf( %s[%d]:\\n , prefix, sLen); printf( %02X , s[0]); for(i=1; i sLen; i++) printf( :%02X , s[i]); printf( \\n ); } int main(int argc, char **argv) { FILE *inFp, *outFp; // \uc785\ucd9c\ub825 \ud30c\uc77c\uc758 \ud30c\uc77c \ud3ec\uc778\ud130 int opt, enc; // \uc635\uc158 \ubb38\uc790, \uc554\ud638/\ubcf5\ud638\ud654 flag int keyLen, ivLen; // \uc785\ub825\ub41c key \uac12, iv \uac12 unsigned char key[EVP_MAX_KEY_LENGTH]; // key \ubc84\ud37c unsigned char iv[EVP_MAX_IV_LENGTH]; // iv \ubc84\ud37c const EVP_CIPHER *cipher=EVP_enc_null(); // \uc554\ud638 \uc54c\uace0\ub9ac\uc998 int (*crypt)(FILE*, FILE*, const EVP_CIPHER*, // \ud568\uc218 \ud3ec\uc778\ud130 const unsigned char*, const unsigned char *); if(argc!=4 || (opt=getopt(argc, argv, ed ))==-1) PrintfErrorExit(2, Usage: %s -e|d inFile outFile \\n , argv[0]); switch(opt) { case 'e': // encrypt enc=1; break; case 'd': // decrypt enc=0; break; case '?': default: PrintfErrorExit(3, Usage: %s -e|d inFile outFile \\n , argv[0]); } if((inFp=fopen(argv[2], rb ))==NULL) PrintfErrorExit(4, fopen(\\ %s\\ ) error.\\n , argv[1]); if((outFp=fopen(argv[3], wb ))==NULL) PrintfErrorExit(5, fopen(\\ %s\\ ) error.\\n , argv[2]); OpenSSL_add_all_ciphers(); // EVP_get_cipherbyname()\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud638\ucd9c. cipher=EVP_get_cipherbyname( aes-128-cbc ); memcpy(key, password01234567 , keyLen=EVP_CIPHER_key_length(cipher)); memcpy(iv, 01234567 , ivLen=EVP_CIPHER_iv_length(cipher)); printhex( key , key, keyLen); printhex( iv , iv, ivLen); if(do_crypt(inFp, outFp, cipher, key, iv, enc) 0) exit(6); fclose(inFp); fclose(outFp); exit(0); } Example \uacb0\uacfc $ gcc enc.c -lcrypto $ cat -v data.txt OpenSSL EVP Symmetric Key Cipher APIs $ ./a.out -e data.txt data.bin key[16]: 70:61:73:73:77:6F:72:64:30:31:32:33:34:35:36:37 iv[16]: 30:31:32:33:34:35:36:37:00:6B:65:79:00:69:76:00 $ cat -v data.bin echo A M-3M-FM-rM-d^_bE. FdM-T-M- ^G^HdM-#M-VM-^F^SM-^H4 EM-gM-\\i^EM-}M- qfe0M-^F]M-H@M-9BM-'M-1 M-,( $ ./a.out -d data.bin data.out key[16]: 70:61:73:73:77:6F:72:64:30:31:32:33:34:35:36:37 iv[16]: 30:31:32:33:34:35:36:37:00:6B:65:79:00:69:76:00 $ cat -v data.out OpenSSL EVP Symmetric Key Cipher APIs $ Reference OpenSSL\uc744 \uc774\uc6a9\ud55c \ubcf4\uc548 \ud504\ub85c\uadf8\ub798\ubc0d / \ub124\ud2b8\uc6cc\ud06c\uc5f0\uad6c\uc2e4 OpenSSL Official Site","title":"Evp sym cipher"},{"location":"openssl/api/evp-sym-cipher/#about-evp","text":"Perhaps, EVP stands for Envelope. High-level Cryptographic Functions. \ub2e4\uc591\ud55c OpenSSL\uc758 \uc554\ud638 API\ub97c \ud558\ub098\uc758 \uc778\ud130\ud398\uc774\uc2a4(interface)\ub85c \uad6c\uc131. The EVP interface, which can be accessed by including penssl/evp.h","title":"About EVP"},{"location":"openssl/api/evp-sym-cipher/#about-ctxcontext","text":"EVP\ub85c Encryption, Decryption \ub4f1, \uac01 \uc218\ud589\uc5d0 \ud544\uc694\ud558\uac70\ub098 \ubcc0\uacbd\ub418\ub294 \uc815\ubcf4\ub4e4\uc744 \uc720\uc9c0\ud558\ub294 \uad6c\uc870\uccb4. \uc554\ud638\ud654 \uc54c\uace0\ub9ac\uc998, \ud0a4(key) \uac12, IV(initialization vector) \uac12, padding \uc124\uc815 \ub4f1... \ub300\uce6d\ud0a4 \uc554\ud638\uc5d0\uc11c EVP_CIPHER_CTX \uad6c\uc870\uccb4\ub97c \uc0ac\uc6a9.","title":"About CTX(Context)"},{"location":"openssl/api/evp-sym-cipher/#evp-cipher-apis","text":"EVP \uc0ac\uc6a9 \uc2dc \uc5ec\ub7ec \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc744 \ub3d9\uc77c\ud55c \ub8e8\ud2f4(routine)\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5. \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc554\ud638/\ubcf5\ud638\ud654\ud558\ub294 \ud568\uc218. EVP_EncryptUpdate() , EVP_DecryptUpdate() , EVP_CipherUpdate() , ... \uc811\ubbf8\uc0ac _ex \uac00 \ubd99\ub294 \ud568\uc218\ub294 \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \ucd94\uac00\uc801\uc778 \uc124\uc815\uc774 \uac00\ub2a5. \uc554\ud638/\ubcf5\ud638\ud654\uc758 \ub3d9\uc791 \ub8e8\ud2f4\uc740 \ub3d9\uc77c\ud558\uace0 \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\uba85\ub9cc \ub2e4\ub984. APIs man EVP_CIPHER_CTX_init \ud5e4\ub354(header) \ud30c\uc77c #include openssl/evp.h","title":"EVP Cipher APIs"},{"location":"openssl/api/evp-sym-cipher/#evp_cipher_ctx","text":"struct evp_cipher_ctx_st{ const EVP_CIPHER *cipher; ENGINE *engine; /* functional reference if 'cipher' is ENGINE-provided */ int encrypt; /* encrypt or decrypt */ int buf_len; /* number we have left */ unsigned char ovi[EVP_MAX_IV_LENGTH]; /* original iv */ unsigned char iv[EVP_MAX_IV_LENGTH]; /* working iv */ unsigned char buf[EVP_MAX_BLOCK_LENGTH]; /* saved partial block */ int num; /* used by cfb/ofb/ctr mode */ void *app_data; /* application stuff */ int key_len; /* May change for variable length cipher */ unsigned long flags; /* Various flags */ void *cipher_data; /* per EVP data */ int final_used; unsigned char final[EVP_MAX_BLOCK_LENGTH]; /* possible final block */ } /* EVP_CIPHER_CTX */ ;","title":"EVP_CIPHER_CTX \uad6c\uc870\uccb4"},{"location":"openssl/api/evp-sym-cipher/#ctx","text":"","title":"CTX \ucd08\uae30\ud654"},{"location":"openssl/api/evp-sym-cipher/#evp_cipher_ctx_init","text":"void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *ctx); cipher context\ub97c \ucd08\uae30\ud654. ctx : cipher context\uc758 \uc8fc\uc18c.","title":"EVP_CIPHER_CTX_init"},{"location":"openssl/api/evp-sym-cipher/#evp-init","text":"int EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char *key, unsigned char *iv); int EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char *key, unsigned char *iv); int EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char *key, unsigned char *iv, int enc); int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl, unsigned char *key, unsigned char *iv); int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl, unsigned char *key, unsigned char *iv); int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl, unsigned char *key, unsigned char *iv, int enc); \uc554\ud638/\ubcf5\ud638\ud654 \ud558\uae30 \uc704\ud55c \ucd08\uae30 \uc124\uc815. \uc131\uacf5\uc2dc 1 , \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. ctx : \uc0ac\uc6a9\ub418\ub294 cipher context. type : \uc554\ud638\ud654 \uc54c\uace0\ub9ac\uc998(cipher) e.g. EVP_des_ecb() , EVP_aes_128_cbc() , ... \ub4f1\uc758 \ub9ac\ud134 \uac12. key : binary key \uac12, \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \uae38\uc774\uac00 \uc798\ub9bc. iv : binary iv \uac12, \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \uae38\uc774\uac00 \uc798\ub9bc, ECB mode\uc5d0\uc11c\ub294 NULL \ub85c \uc124\uc815, \uac12\uc774 \uc788\ub354\ub77c\ub3c4 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc74c. enc : \uc554\ud638/\ubcf5\ud638\ud654 flag, 1 \uc774\uba74 \uc554\ud638\ud654 , 0 \uc774\uba74 \ubcf5\ud638\ud654 .","title":"EVP \uc554\ud638/\ubcf5\ud638\ud654 \ucd08\uae30 \uc124\uc815 - Init()"},{"location":"openssl/api/evp-sym-cipher/#evp-update","text":"int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, unsigned char *in, int inl); int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, unsigned char *in, int inl); int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, unsigned char *in, int inl); \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc554\ud638/\ubcf5\ud638\ud654. \uc131\uacf5\uc2dc 1 , \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. block size\uac00 \ub9de\uc9c0 \uc54a\uc73c\uba74, Final() , Final_ex() \uc5d0\uc11c \ucc98\ub9ac. (ECB/CBC mode\ucc98\ub7fc block cipher\uc778 \uacbd\uc6b0) outl \uc740 \uc554\ud638/\ubcf5\ud638\ud654\uc5d0 \uc131\uacf5\ud55c \ubc14\uc774\ud2b8 \ud06c\uae30\ub97c \ub098\ud0c0\ub0c4, \uc989 \uc554\ud638/\ubcf5\ud638\ud654\uac00 \uc131\uacf5\ud55c \ubc14\uc774\ud2b8 \ud06c\uae30. ctx : \uc0ac\uc6a9\ub418\ub294 cipher context. out : \uc554\ud638/\ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\uac00 \uc800\uc7a5\ub420 \ubc84\ud37c. outl : out \uc758 \uae38\uc774\uac00 \uc800\uc7a5\ub420 \ubcc0\uc218, \uc554\ud638/\ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774. in : \uc785\ub825 \ub370\uc774\ud130, \uc554\ud638\ud654\uc2dc \ud3c9\ubb38, \ubcf5\ud638\ud654\uc2dc \uc554\ud638\ubb38. inl : in \uc758 \uae38\uc774","title":"EVP \uc554\ud638/\ubcf5\ud638\ud654 \uc218\ud589 - Update()"},{"location":"openssl/api/evp-sym-cipher/#evp-final","text":"int EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl); \ud328\ub529 \ubc0f \ud544\uc694\ud55c \uc791\uc5c5\uc744 \ucc98\ub9ac \uc131\uacf5\uc2dc 1, \uc2e4\ud328\uc2dc 0 \ub9ac\ud134. block size\uac00 \ub9de\uc9c0 \uc54a\uc544 Update()\uc5d0\uc11c \ucc98\ub9ac\uac00 \uc548\ub41c \ub370\uc774\ud130\ub97c \ucc98\ub9ac. (ECB/CBC mode\ucc98\ub7fc block cipher\uc778 \uacbd\uc6b0) ECB/CBC mode\uc5d0\uc11c \uc554\ud638\ud654\uc2dc \ud328\ub529(padding)\uc774 \ucd94\uac00, \ubcf5\ud638\ud654\uc2dc \ud328\ub529\uc774 \uc81c\uac70. ctx : \uc0ac\uc6a9\ub418\ub294 cipher context. out : \uc554\ud638/\ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\uac00 \uc800\uc7a5\ub420 \ubc84\ud37c outl : out \uc758 \uae38\uc774\uac00 \uc800\uc7a5\ub420 \ubcc0\uc218","title":"EVP \uc554\ud638/\ubcf5\ud638\ud654 \uc218\ud589 - Final()"},{"location":"openssl/api/evp-sym-cipher/#useful-apis","text":"","title":"Useful APIs"},{"location":"openssl/api/evp-sym-cipher/#evp_cipher_ctx_set_padding","text":"int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *ctx, int padding); \ud328\ub529(padding) \uc0ac\uc6a9 \uc720\ubb34\ub97c \uacb0\uc815. \ud56d\uc0c1 1 \ub9ac\ud134. ECB/CBC mode \uc5d0\uc11c \uc0ac\uc6a9. padding : 1 \uc774\uba74 on, 0 \uc774\uba74 off.","title":"EVP_CIPHER_CTX_set_padding"},{"location":"openssl/api/evp-sym-cipher/#evp_cipher_ctx_set_key_length","text":"int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *ctx, int keylen); ctx \uc758 key \uae38\uc774\ub97c \uc124\uc815. \ud56d\uc0c1 1 \ub9ac\ud134. cipher\uc5d0 \ub530\ub77c \uac00\ubcc0\uc801\uc778 key \uae38\uc774 \uc124\uc815 \uac00\ub2a5. keylen : \ubc14\uc774\ud2b8 \ub2e8\uc704\uc758 key \uae38\uc774.","title":"EVP_CIPHER_CTX_set_key_length"},{"location":"openssl/api/evp-sym-cipher/#evp_cipher_ctx_ctrl","text":"int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr); cipher\uc5d0 \uad00\ub828\ub41c \uc124\uc815 \ud30c\ub77c\ubbf8\ud130(configurable parameters)\ub97c \uc124\uc815 \uac00\ub2a5. Linux system call\uc758 fctrl() \uc640 \uc720\uc0ac. type : \uc554\ud638 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \uc124\uc815 \uac00\ub2a5\ud55c \uac12, refer to \"openssl/evp.h\" e.g. EVP_CTRL_GET_RC2_KEY_BITS, EVP_CTRL_SET_RC2_KEY_BITS, EVP_CTRL_GET_RC5_ROUNDS, EVP_CTRL_SET_RC5_ROUNDS, ... \ub4f1. arg : \ud30c\ub77c\ubbf8\ud130(\uc815\uc218\ud615), type \uc5d0 \ub530\ub77c \uc6a9\ub3c4\uac00 \ub2ec\ub77c\uc9d0. ptr : \ud30c\ub77c\ubbf8\ud130(\uc815\uc218\ud615), \uc77d\uc744/\uc800\uc7a5\ub420 \ubcc0\uc218\uc758 \uc8fc\uc18c \ub4f1\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5, type\uc5d0 \ub530\ub77c \uc6a9\ub3c4\uac00 \ub2ec\ub77c\uc9d0.","title":"EVP_CIPHER_CTX_ctrl"},{"location":"openssl/api/evp-sym-cipher/#evp_cipher_ctx_cleanup","text":"int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *ctx); ctx \uc758 \ub0b4\uc6a9\uc744 \uc0ad\uc81c.","title":"EVP_CIPHER_CTX_cleanup"},{"location":"openssl/api/evp-sym-cipher/#evp_get_cipherbyname","text":"const EVP_CIPHER *EVP_get_cipherbyname(const char *name); name \uc5d0 \ud574\ub2f9\ud558\ub294 EVP_CIPHER \uad6c\uc870\uccb4\ub97c \ub9ac\ud134. OpenSSL_add_all_ciphers() \ub97c \uba3c\uc800 \ud638\ucd9c\ud574\uc57c \uc0ac\uc6a9 \uac00\ub2a5. name : cipher \uc774\ub984, refer to \"man enc\" e.g. des-ecb , aes-128-ecb , aes-192-cbc , ... .","title":"EVP_get_cipherbyname"},{"location":"openssl/api/evp-sym-cipher/#evp-macros-and-others","text":"","title":"EVP macros and others."},{"location":"openssl/api/evp-sym-cipher/#how-to-check-that-padding-is-disable","text":"int pad=(ctx- flags EVP_CIPH_NO_PADDING);","title":"How to check that padding is disable"},{"location":"openssl/api/evp-sym-cipher/#evp_get_cipherbynidobj","text":"// a : integer #define EVP_get_cipherbynid(a) EVP_get_cipherbyname(OBJ_nid2sn(a)) #define EVP_get_cipherbyobj(a) EVP_get_cipherbynid(OBJ_obj2nid(a))","title":"EVP_get_cipherbynid/obj"},{"location":"openssl/api/evp-sym-cipher/#get-an-attributes-from-evp_cipher","text":"// e : const EVP_CIPHER* #define EVP_CIPHER_nid(e) ((e)- nid) #define EVP_CIPHER_block_size(e) ((e)- block_size) #define EVP_CIPHER_key_length(e) ((e)- key_len) #define EVP_CIPHER_iv_length(e) ((e)- iv_len) #define EVP_CIPHER_flags(e) ((e)- flags) #define EVP_CIPHER_mode(e) ((e)- flags) EVP_CIPH_MODE) int EVP_CIPHER_type(const EVP_CIPHER *ctx);","title":"Get an attributes from EVP_CIPHER"},{"location":"openssl/api/evp-sym-cipher/#get-an-attributes-from-evp_cipher_ctx","text":"// e : EVP_CIPHER_CTX* #define EVP_CIPHER_CTX_cipher(e) ((e)- cipher) // get cipher object #define EVP_CIPHER_CTX_nid(e) ((e)- cipher- nid) // get cipher nid #define EVP_CIPHER_CTX_block_size(e) ((e)- cipher- block_size) // get cipher block size #define EVP_CIPHER_CTX_key_length(e) ((e)- key_len) // get cipher key length #define EVP_CIPHER_CTX_iv_length(e) ((e)- cipher- iv_len) // get cipher IV length #define EVP_CIPHER_CTX_get_app_data(e) ((e)- app_data) #define EVP_CIPHER_CTX_set_app_data(e,d) ((e)- app_data=(char *)(d)) #define EVP_CIPHER_CTX_type(c) EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c)) // get cipher type #define EVP_CIPHER_CTX_flags(e) ((e)- cipher- flags) // get flags #define EVP_CIPHER_CTX_mode(e) ((e)- cipher- flags EVP_CIPH_MODE) // get mode","title":"Get an attributes from EVP_CIPHER_CTX"},{"location":"openssl/api/evp-sym-cipher/#convert-for-asn1","text":"int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type); int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type);","title":"Convert for ASN.1"},{"location":"openssl/api/evp-sym-cipher/#evp","text":"","title":"EVP \uc554\ud638/\ubcf5\ud638\ud654 \uacfc\uc815"},{"location":"openssl/api/evp-sym-cipher/#example-code-for-do_crypt","text":"do_crypt(FILE *inFp, FILE *outFp, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv/*, int enc*/) // enc\ub294 EVP_Cipher~()\uc5d0\uc11c \uc0ac\uc6a9 { int inLen, outLen; unsigned char inBuf[BUFSIZ], outBuf[BUFSIZ+EVP_MAX_BLOCK_LENGTH]; // inBuf \ud06c\uae30\ub294 cipher\uc5d0 \ub530\ub77c block size\uc758 \ubc30\uc218. // outBuf \ud06c\uae30\ub294 inBuf\ubcf4\ub2e4 \ucd94\uac00\uc801\uc778 block size\ub97c \ub354 \uac00\uc7a0. (padding \ub4f1\uc758 \uc774\uc720) // block cipher\uc778 ECB/CBC mode\uc5d0\uc11c \uc801\uc6a9\ub418\ub294 \uc0ac\ud56d (CBC\ub9cc IV \ud544\uc694) // stream cipher\uc778OFB/CFB/CTR\uc5d0\uc11c\ub294 plaintext\uc640 ciphertext\uc758 \ud06c\uae30\uac00 \uac19\uc74c. (\ub2e8, IV\uac00 \ud544\uc694) EVP_CIPHER_CTX ctx; // 1. context \ucd08\uae30\ud654 EVP_CIPHER_CTX_init( ctx); // 2. \uc554\ud638/\ubcf5\ud638\ud654 \ucd08\uae30 \uc124\uc815 EVP_EncryptInit_ex( ctx, cipher, NULL, key, iv); // encrypt //EVP_DecryptInit_ex( ctx, cipher, NULL, key, iv); // decrypt //EVP_CipherInit_ex( ctx, cipher, NULL, key, iv, enc); // enc=1 : encrypt, enc=0 : decrypt // 3. \ub370\uc774\ud130 \uc554\ud638/\ubcf5\ud638\ud654 while((inLen=fread(inBuf, 1, sizeof(inBuf), inFp)) 0) { EVP_EncryptUpdate( ctx, outBuf, outLen, inBuf, inLen); // EVP_DecryptUpdate( ctx, outBuf, outLen, inBuf, inLen); // EVP_CipherUpdate( ctx, outBuf, outLen, inBuf, inLen); fwrite(outBuf, 1, outLen, outFp); } // 4. \uc554\ud638\ud654 \ub9c8\uc9c0\ub9c9 \ucc98\ub9ac, e.g. \ud328\ub529 \ucc98\ub9ac EVP_EncryptFinal_ex( ctx, outBuf, outLen); //EVP_DecryptFinal_ex( ctx, outBuf, outLen); //EVP_CipherFinal_ex( ctx, outBuf, outLen); fwrite(outBuf, 1, outLen, outFp); EVP_CIPHER_CTX_cleanup( ctx); }","title":"Example code for do_crypt"},{"location":"openssl/api/evp-sym-cipher/#example-1-using-evp_encryptdecrypt","text":"/* enc.c */ #include stdio.h #include string.h #include stdlib.h #include openssl/evp.h #include openssl/rand.h #include getopt.h #define PrintfErrorExit(x, ...) { fprintf(stderr, __VA_ARGS__); exit(x); } int encrypt(FILE *inFp, FILE *outFp, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv) { int inLen, outLen; // inLen:\uc785\ub825\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774, outLen:\ucd9c\ub825\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774 char inBuf[BUFSIZ], outBuf[BUFSIZ+EVP_MAX_BLOCK_LENGTH]; // inBuf:\uc785\ub825 \ub370\uc774\ud130 \ubc84\ud37c, outBuf:\ucd9c\ub825 \ub370\uc774\ud130 \ubc84\ud37c EVP_CIPHER_CTX ctx; // \uc554\ud638\ud654 \uc218\ud589\uc5d0 \uc0ac\uc6a9\ud560 context // 1. context \ucd08\uae30\ud654 EVP_CIPHER_CTX_init( ctx); // 2. \uc554\ud638\ud654 \ucd08\uae30 \uc124\uc815. // - context, \uc554\ud638 \uc54c\uace0\ub9ac\uc998, \ud0a4 \uac12, IV \uac12 \uc124\uc815 EVP_EncryptInit_ex( ctx, cipher, NULL, key, iv); // 3. \ub370\uc774\ud130 \uc554\ud638\ud654 while((inLen=fread(inBuf, 1, sizeof(inBuf), inFp)) 0) // \uc785\ub825 \ud30c\uc77c\uc5d0\uc11c BUFSIZ\ub9cc\ud07c \ub370\uc774\ud130\ub97c read { if(!EVP_EncryptUpdate( ctx, outBuf, outLen, inBuf, inLen)) // read\ub41c \ub370\uc774\ud130\ub97c \uc554\ud638\ud654 { printf( EVP_EncryptUpdate() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -1; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \uc554\ud638\ud654\ub41c \ub370\uc774\ud130\ub97c write } // 4. \uc554\ud638\ud654\uc758 \ub9c8\uc9c0\ub9c9 \ucc98\ub9ac, e.g. \ud328\ub529 \ucc98\ub9ac if(!EVP_EncryptFinal_ex( ctx, outBuf, outLen)) { printf( EVP_EncryptFinal_ex() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -2; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc554\ud638\ud654\ub41c(\ud328\ub529 \ucc98\ub9ac\ub41c) \ub370\uc774\ud130\ub97c write EVP_CIPHER_CTX_cleanup( ctx); // context \ucd08\uae30\ud654 return 0; } int decrypt(FILE *inFp, FILE *outFp, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv) { int inLen, outLen; char inBuf[BUFSIZ], outBuf[BUFSIZ+EVP_MAX_BLOCK_LENGTH]; EVP_CIPHER_CTX ctx; // \ubcf5\ud638\ud654 \uc218\ud589\uc5d0 \uc0ac\uc6a9\ud560 context // 1. context \ucd08\uae30\ud654 EVP_CIPHER_CTX_init( ctx); // 2. \ubcf5\ud638\ud654 \ucd08\uae30 \uc124\uc815. // - context, \uc554\ud638 \uc54c\uace0\ub9ac\uc998, \ud0a4 \uac12, IV \uac12 \uc124\uc815 EVP_DecryptInit_ex( ctx, cipher, NULL, key, iv); // 3. \ub370\uc774\ud130 \ubcf5\ud638\ud654 while((inLen=fread(inBuf, 1, sizeof(inBuf), inFp)) 0) // \uc785\ub825 \ud30c\uc77c\uc5d0\uc11c BUFSIZ\ub9cc\ud07c \ub370\uc774\ud130\ub97c read { if(!EVP_DecryptUpdate( ctx, outBuf, outLen, inBuf, inLen)) // read\ub41c \ub370\uc774\ud130\ub97c \ubcf5\ud638\ud654, \uc2e4\ud328 \uc2dc 0 \ub9ac\ud134 { printf( EVP_DecryptUpdate() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -1; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\ub97c write } // 4. \ubcf5\ud638\ud654\uc758 \ub9c8\uc9c0\ub9c9 \ucc98\ub9ac, e.g. \ud328\ub529 \ucc98\ub9ac if(!EVP_DecryptFinal_ex( ctx, outBuf, outLen)) { printf( EVP_DecryptFinal_ex() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -2; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ubcf5\ud638\ud654\ub41c(\ud328\ub529 \ucc98\ub9ac\ub41c) \ub370\uc774\ud130\ub97c write EVP_CIPHER_CTX_cleanup( ctx); return 0; } void printhex(const char *prefix, const unsigned char *s, const int sLen) { int i; printf( %s[%d]:\\n , prefix, sLen); printf( %02X , s[0]); for(i=1; i sLen; i++) printf( :%02X , s[i]); printf( \\n ); } int main(int argc, char **argv) { FILE *inFp, *outFp; // \uc785\ucd9c\ub825 \ud30c\uc77c\uc758 \ud30c\uc77c \ud3ec\uc778\ud130 int opt; // \uc635\uc158 \ubb38\uc790 int keyLen, ivLen; // \uc785\ub825\ub41c key \uac12, iv \uac12 unsigned char key[EVP_MAX_KEY_LENGTH]; // key \ubc84\ud37c unsigned char iv[EVP_MAX_IV_LENGTH]; // iv \ubc84\ud37c const EVP_CIPHER *cipher=EVP_enc_null(); // \uc554\ud638 \uc54c\uace0\ub9ac\uc998 int (*crypt)(FILE*, FILE*, const EVP_CIPHER*, // \ud568\uc218 \ud3ec\uc778\ud130 const unsigned char*, const unsigned char *); if(argc!=4 || (opt=getopt(argc, argv, ed ))==-1) PrintfErrorExit(2, Usage: %s -e|d inFile outFile \\n , argv[0]); switch(opt) { case 'e': // encrypt crypt=encrypt; break; case 'd': // decrypt crypt=decrypt; break; case '?': default: PrintfErrorExit(3, Usage: %s -e|d inFile outFile \\n , argv[0]); } if((inFp=fopen(argv[2], rb ))==NULL) PrintfErrorExit(4, fopen(\\ %s\\ ) error.\\n , argv[1]); if((outFp=fopen(argv[3], wb ))==NULL) PrintfErrorExit(5, fopen(\\ %s\\ ) error.\\n , argv[2]); OpenSSL_add_all_ciphers(); // EVP_get_cipherbyname()\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud638\ucd9c. cipher=EVP_get_cipherbyname( aes-128-cbc ); memcpy(key, password01234567 , keyLen=EVP_CIPHER_key_length(cipher)); memcpy(iv, 01234567 , ivLen=EVP_CIPHER_iv_length(cipher)); printhex( key , key, keyLen); printhex( iv , iv, ivLen); if(crypt(inFp, outFp, cipher, key, iv) 0) exit(6); fclose(inFp); fclose(outFp); exit(0); }","title":"Example 1 - using EVP_Encrypt/Decrypt~()"},{"location":"openssl/api/evp-sym-cipher/#example-2-using-evp_cipher","text":"/* enc2.c */ #include stdio.h #include string.h #include stdlib.h #include openssl/evp.h #include openssl/rand.h #include getopt.h #define PrintfErrorExit(x, ...) { fprintf(stderr, __VA_ARGS__); exit(x); } int do_crypt(FILE *inFp, FILE *outFp, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, int enc) { int inLen, outLen; // inLen:\uc785\ub825\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774, outLen:\ucd9c\ub825\ub41c \ub370\uc774\ud130\uc758 \uae38\uc774 char inBuf[BUFSIZ], outBuf[BUFSIZ+EVP_MAX_BLOCK_LENGTH]; // inBuf:\uc785\ub825 \ub370\uc774\ud130 \ubc84\ud37c, outBuf:\ucd9c\ub825 \ub370\uc774\ud130 \ubc84\ud37c EVP_CIPHER_CTX ctx; // \uc554\ud638/\ubcf5\ud638\ud654 \uc218\ud589\uc5d0 \uc0ac\uc6a9\ud560 context // 1. context \ucd08\uae30\ud654 EVP_CIPHER_CTX_init( ctx); // 2. \uc554\ud638/\ubcf5\ud638\ud654 \ucd08\uae30 \uc124\uc815. // - context, \uc554\ud638 \uc54c\uace0\ub9ac\uc998, \ud0a4 \uac12, IV \uac12 \uc124\uc815 EVP_CipherInit_ex( ctx, cipher, NULL, key, iv, enc); // 3. \ub370\uc774\ud130 \uc554\ud638\ud654 while((inLen=fread(inBuf, 1, sizeof(inBuf), inFp)) 0) // \uc785\ub825 \ud30c\uc77c\uc5d0\uc11c BUFSIZ\ub9cc\ud07c \ub370\uc774\ud130\ub97c read { if(!EVP_CipherUpdate( ctx, outBuf, outLen, inBuf, inLen)) // read\ub41c \ub370\uc774\ud130\ub97c \uc554\ud638/\ubcf5\ud638\ud654 { printf( EVP_EncryptUpdate() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -1; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \uc554\ud638/\ubcf5\ud638\ud654\ub41c \ub370\uc774\ud130\ub97c write } // 4. \uc554\ud638/\ubcf5\ud638\ud654\uc758 \ub9c8\uc9c0\ub9c9 \ucc98\ub9ac, e.g. \ud328\ub529 \ucc98\ub9ac if(!EVP_CipherFinal_ex( ctx, outBuf, outLen)) { printf( EVP_EncryptFinal_ex() error.\\n ); EVP_CIPHER_CTX_cleanup( ctx); return -2; } fwrite(outBuf, 1, outLen, outFp); // \ucd9c\ub825 \ud30c\uc77c\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc554\ud638/\ubcf5\ud638\ud654\ub41c(\ud328\ub529 \ucc98\ub9ac\ub41c) \ub370\uc774\ud130\ub97c write EVP_CIPHER_CTX_cleanup( ctx); // context \ucd08\uae30\ud654 return 0; } void printhex(const char *prefix, const unsigned char *s, const int sLen) { int i; printf( %s[%d]:\\n , prefix, sLen); printf( %02X , s[0]); for(i=1; i sLen; i++) printf( :%02X , s[i]); printf( \\n ); } int main(int argc, char **argv) { FILE *inFp, *outFp; // \uc785\ucd9c\ub825 \ud30c\uc77c\uc758 \ud30c\uc77c \ud3ec\uc778\ud130 int opt, enc; // \uc635\uc158 \ubb38\uc790, \uc554\ud638/\ubcf5\ud638\ud654 flag int keyLen, ivLen; // \uc785\ub825\ub41c key \uac12, iv \uac12 unsigned char key[EVP_MAX_KEY_LENGTH]; // key \ubc84\ud37c unsigned char iv[EVP_MAX_IV_LENGTH]; // iv \ubc84\ud37c const EVP_CIPHER *cipher=EVP_enc_null(); // \uc554\ud638 \uc54c\uace0\ub9ac\uc998 int (*crypt)(FILE*, FILE*, const EVP_CIPHER*, // \ud568\uc218 \ud3ec\uc778\ud130 const unsigned char*, const unsigned char *); if(argc!=4 || (opt=getopt(argc, argv, ed ))==-1) PrintfErrorExit(2, Usage: %s -e|d inFile outFile \\n , argv[0]); switch(opt) { case 'e': // encrypt enc=1; break; case 'd': // decrypt enc=0; break; case '?': default: PrintfErrorExit(3, Usage: %s -e|d inFile outFile \\n , argv[0]); } if((inFp=fopen(argv[2], rb ))==NULL) PrintfErrorExit(4, fopen(\\ %s\\ ) error.\\n , argv[1]); if((outFp=fopen(argv[3], wb ))==NULL) PrintfErrorExit(5, fopen(\\ %s\\ ) error.\\n , argv[2]); OpenSSL_add_all_ciphers(); // EVP_get_cipherbyname()\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud638\ucd9c. cipher=EVP_get_cipherbyname( aes-128-cbc ); memcpy(key, password01234567 , keyLen=EVP_CIPHER_key_length(cipher)); memcpy(iv, 01234567 , ivLen=EVP_CIPHER_iv_length(cipher)); printhex( key , key, keyLen); printhex( iv , iv, ivLen); if(do_crypt(inFp, outFp, cipher, key, iv, enc) 0) exit(6); fclose(inFp); fclose(outFp); exit(0); }","title":"Example 2 - using EVP_Cipher~()"},{"location":"openssl/api/evp-sym-cipher/#example","text":"$ gcc enc.c -lcrypto $ cat -v data.txt OpenSSL EVP Symmetric Key Cipher APIs $ ./a.out -e data.txt data.bin key[16]: 70:61:73:73:77:6F:72:64:30:31:32:33:34:35:36:37 iv[16]: 30:31:32:33:34:35:36:37:00:6B:65:79:00:69:76:00 $ cat -v data.bin echo A M-3M-FM-rM-d^_bE. FdM-T-M- ^G^HdM-#M-VM-^F^SM-^H4 EM-gM-\\i^EM-}M- qfe0M-^F]M-H@M-9BM-'M-1 M-,( $ ./a.out -d data.bin data.out key[16]: 70:61:73:73:77:6F:72:64:30:31:32:33:34:35:36:37 iv[16]: 30:31:32:33:34:35:36:37:00:6B:65:79:00:69:76:00 $ cat -v data.out OpenSSL EVP Symmetric Key Cipher APIs $","title":"Example \uacb0\uacfc"},{"location":"openssl/api/evp-sym-cipher/#reference","text":"OpenSSL\uc744 \uc774\uc6a9\ud55c \ubcf4\uc548 \ud504\ub85c\uadf8\ub798\ubc0d / \ub124\ud2b8\uc6cc\ud06c\uc5f0\uad6c\uc2e4 OpenSSL Official Site","title":"Reference"},{"location":"openssl/cli/dgst/","text":"Message Digest dgst \uba85\ub839 \ud574\uc2dc(Hash), \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8(Message Digest) HMAC(Hashed MAC) \uc11c\uba85(Sign) \ubc0f \uac80\uc99d(Verify) Default \uc785/\ucd9c\ub825\uc740 stdin/stdout (\ud30c\uc77c \ubbf8\uc9c0\uc815 \uc2dc), hex \ucd9c\ub825 : default dgst \uac00 \uc544\ub2cc sha, sha1, ... \ub4f1 \ud2b9\uc815 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5, ( man \ucc38\uace0) \uc9c0\uc6d0\ud558\ub294 \uc54c\uace0\ub9ac\uc998 \ubaa9\ub85d\uc740 openssl list-message-digest-algorithms \ub85c \ud655\uc778 \uac00\ub2a5 \uc0ac\uc6a9\ud558\ub294 algorithm \uc740 openssl dgst -help (\ub610\ub294 man \ucc38\uace0) \uc0ac\uc6a9\ub418\ub294 \uc785\ub825 \ud30c\uc77c, ' infiles ...'\ub294 \uba85\ub839\ubb38 \ub9c8\uc9c0\ub9c9\uc5d0 \uc704\uce58\ud574\uc57c \ud568 man dgst \ucc38\uace0 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-hmac 'key'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-sign 'key file'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-verify 'key file'] [-signature 'outfile'] ['infiles ...'] ... Options are -c to output the digest with separating colons -r to output the digest in coreutils format -d to output debug info -hex output as hex dump -binary output in binary form -hmac arg set the HMAC key to arg -non-fips-allow allow use of non FIPS digest -sign file sign digest using private key in file -verify file verify a signature using public key in file -prverify file verify a signature using private key in file -keyform arg key file format (PEM or ENGINE) -out filename output to filename rather than stdout -signature file signature to verify -sigopt nm:v signature parameter -hmac key create hashed MAC with key -mac algorithm create MAC (not neccessarily HMAC) -macopt nm:v MAC algorithm parameters or key -engine e use engine e, possibly a hardware device. -gost-mac to use the gost-mac message digest algorithm -md_gost94 to use the md_gost94 message digest algorithm -md4 to use the md4 message digest algorithm -md5 to use the md5 message digest algorithm -mdc2 to use the mdc2 message digest algorithm -ripemd160 to use the ripemd160 message digest algorithm -sha to use the sha message digest algorithm -sha1 to use the sha1 message digest algorithm -sha224 to use the sha224 message digest algorithm -sha256 to use the sha256 message digest algorithm -sha384 to use the sha384 message digest algorithm -sha512 to use the sha512 message digest algorithm -whirlpool to use the whirlpool message digest algorithm \ud574\uc2dc(hash) \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8 \uac01 \ud30c\uc77c\uc5d0 \ub300\ud55c \ud574\uc2dc \uac12\uc744 \ucd9c\ub825, 3\uac1c \ud30c\uc77c\uc774 \uc785\ub825\uc774\uba74 3\uac1c\uc758 \ud574\uc2dc \uac12 \ucd9c\ub825 -binary \uc640 -hex \ub294 \ubca0\ud0c0\uc801\uc73c\ub85c \uc0ac\uc6a9 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] # e.g.1 openssl dgst -sha256 -out text.md text.txt # e.g.2 openssl sha256 -hex text.txt text2.txt text3.txt # output example for e.g.2 SHA256(text.txt)= a5532c7f2c9a18ae3976a91eddf93faf7f6ed1653fe7bf73daee1eddfc999577 SHA256(text2.txt)= 6be9867ae05e7505fb9bf3d59cfd2af13337fc17915cdeb099286b082f85bb39 SHA256(text3.txt)= a4c6d0d073ff1c3405bcd49d96d8c5dc3f4905402e254ffe725c55f8746e0aec # e.g.3 openssl dgst -sha256 -binary -out text.md text.txt # output example for e.g.3 hexdump text.md 0000000 53a5 7f2c 9a2c ae18 7639 1ea9 f9dd af3f 0000010 6e7f 65d1 e73f 73bf eeda dd1e 99fc 7795 0000020 HMAC \ud0a4(key) \uac00 \ud544\uc694 'key' \ub294 hex \uac12 openssl dgst 'algorithm' -hmac 'key' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst -sha256 -hmac hmackey1234 -out text.hmac text.txt \uc11c\uba85 \ubc0f \uac80\uc99d \ud0a4 \ud30c\uc77c(.pem, .key, ...)\uc774 \ud544\uc694, \ud0a4 \uc30d \ub610\ub294 \uac1c\uc778 \ud0a4 Default key encoding is PEM EC key pair \uc0dd\uc131 \ucc38\uace0 \ubc14\uc774\ub108\ub9ac(binary) \ub85c \ucd9c\ub825, dafault \uc11c\uba85(sign) openssl dgst 'algorithm' -sign 'privkey file' [-out 'outfile'] ['infiles ...'] \uac80\uc99d(verify) openssl dgst 'algorithm' -verify 'pubkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' openssl dgst 'algorithm' -prverify 'privkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' Example output for signing message(or file) # \uc11c\uba85 \uc608) openssl dgst -sha224 -binary -out text.md text.txt openssl dgst -sha224 -sign ecprivkey.pem -out text.sign text.md Example output for verifying signature # \uac80\uc99d \uc6081) \uacf5\uac1c \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -verify ecpubkey.pem -signature text.sign text.md Verified OK # \uac80\uc99d \uc6082) \uac1c\uc778 \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -prverify ecprivkey.pem -signature text.sign text.md Verified OK","title":"Dgst"},{"location":"openssl/cli/dgst/#message-digest","text":"","title":"Message Digest"},{"location":"openssl/cli/dgst/#dgst","text":"\ud574\uc2dc(Hash), \uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8(Message Digest) HMAC(Hashed MAC) \uc11c\uba85(Sign) \ubc0f \uac80\uc99d(Verify) Default \uc785/\ucd9c\ub825\uc740 stdin/stdout (\ud30c\uc77c \ubbf8\uc9c0\uc815 \uc2dc), hex \ucd9c\ub825 : default dgst \uac00 \uc544\ub2cc sha, sha1, ... \ub4f1 \ud2b9\uc815 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5, ( man \ucc38\uace0) \uc9c0\uc6d0\ud558\ub294 \uc54c\uace0\ub9ac\uc998 \ubaa9\ub85d\uc740 openssl list-message-digest-algorithms \ub85c \ud655\uc778 \uac00\ub2a5 \uc0ac\uc6a9\ud558\ub294 algorithm \uc740 openssl dgst -help (\ub610\ub294 man \ucc38\uace0) \uc0ac\uc6a9\ub418\ub294 \uc785\ub825 \ud30c\uc77c, ' infiles ...'\ub294 \uba85\ub839\ubb38 \ub9c8\uc9c0\ub9c9\uc5d0 \uc704\uce58\ud574\uc57c \ud568 man dgst \ucc38\uace0 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-hmac 'key'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-sign 'key file'] [-out 'outfile'] ['infiles ...'] openssl dgst 'algorithm' [-verify 'key file'] [-signature 'outfile'] ['infiles ...'] ... Options are -c to output the digest with separating colons -r to output the digest in coreutils format -d to output debug info -hex output as hex dump -binary output in binary form -hmac arg set the HMAC key to arg -non-fips-allow allow use of non FIPS digest -sign file sign digest using private key in file -verify file verify a signature using public key in file -prverify file verify a signature using private key in file -keyform arg key file format (PEM or ENGINE) -out filename output to filename rather than stdout -signature file signature to verify -sigopt nm:v signature parameter -hmac key create hashed MAC with key -mac algorithm create MAC (not neccessarily HMAC) -macopt nm:v MAC algorithm parameters or key -engine e use engine e, possibly a hardware device. -gost-mac to use the gost-mac message digest algorithm -md_gost94 to use the md_gost94 message digest algorithm -md4 to use the md4 message digest algorithm -md5 to use the md5 message digest algorithm -mdc2 to use the mdc2 message digest algorithm -ripemd160 to use the ripemd160 message digest algorithm -sha to use the sha message digest algorithm -sha1 to use the sha1 message digest algorithm -sha224 to use the sha224 message digest algorithm -sha256 to use the sha256 message digest algorithm -sha384 to use the sha384 message digest algorithm -sha512 to use the sha512 message digest algorithm -whirlpool to use the whirlpool message digest algorithm","title":"dgst \uba85\ub839"},{"location":"openssl/cli/dgst/#hash","text":"\uba54\uc2dc\uc9c0 \ub2e4\uc774\uc81c\uc2a4\ud2b8 \uac01 \ud30c\uc77c\uc5d0 \ub300\ud55c \ud574\uc2dc \uac12\uc744 \ucd9c\ub825, 3\uac1c \ud30c\uc77c\uc774 \uc785\ub825\uc774\uba74 3\uac1c\uc758 \ud574\uc2dc \uac12 \ucd9c\ub825 -binary \uc640 -hex \ub294 \ubca0\ud0c0\uc801\uc73c\ub85c \uc0ac\uc6a9 openssl dgst 'algorithm' [-hex|binary] [-out 'outfile'] ['infiles ...'] # e.g.1 openssl dgst -sha256 -out text.md text.txt # e.g.2 openssl sha256 -hex text.txt text2.txt text3.txt # output example for e.g.2 SHA256(text.txt)= a5532c7f2c9a18ae3976a91eddf93faf7f6ed1653fe7bf73daee1eddfc999577 SHA256(text2.txt)= 6be9867ae05e7505fb9bf3d59cfd2af13337fc17915cdeb099286b082f85bb39 SHA256(text3.txt)= a4c6d0d073ff1c3405bcd49d96d8c5dc3f4905402e254ffe725c55f8746e0aec # e.g.3 openssl dgst -sha256 -binary -out text.md text.txt # output example for e.g.3 hexdump text.md 0000000 53a5 7f2c 9a2c ae18 7639 1ea9 f9dd af3f 0000010 6e7f 65d1 e73f 73bf eeda dd1e 99fc 7795 0000020","title":"\ud574\uc2dc(hash)"},{"location":"openssl/cli/dgst/#hmac","text":"\ud0a4(key) \uac00 \ud544\uc694 'key' \ub294 hex \uac12 openssl dgst 'algorithm' -hmac 'key' [-hex|binary] [-out 'outfile'] ['infiles ...'] openssl dgst -sha256 -hmac hmackey1234 -out text.hmac text.txt","title":"HMAC"},{"location":"openssl/cli/dgst/#_1","text":"\ud0a4 \ud30c\uc77c(.pem, .key, ...)\uc774 \ud544\uc694, \ud0a4 \uc30d \ub610\ub294 \uac1c\uc778 \ud0a4 Default key encoding is PEM EC key pair \uc0dd\uc131 \ucc38\uace0 \ubc14\uc774\ub108\ub9ac(binary) \ub85c \ucd9c\ub825, dafault","title":"\uc11c\uba85 \ubc0f \uac80\uc99d"},{"location":"openssl/cli/dgst/#sign","text":"openssl dgst 'algorithm' -sign 'privkey file' [-out 'outfile'] ['infiles ...']","title":"\uc11c\uba85(sign)"},{"location":"openssl/cli/dgst/#verify","text":"openssl dgst 'algorithm' -verify 'pubkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' openssl dgst 'algorithm' -prverify 'privkey file' -signature 'signed file' [-out 'outfile'] 'infiles ...' Example output for signing message(or file) # \uc11c\uba85 \uc608) openssl dgst -sha224 -binary -out text.md text.txt openssl dgst -sha224 -sign ecprivkey.pem -out text.sign text.md Example output for verifying signature # \uac80\uc99d \uc6081) \uacf5\uac1c \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -verify ecpubkey.pem -signature text.sign text.md Verified OK # \uac80\uc99d \uc6082) \uac1c\uc778 \ud0a4\ub85c \uac80\uc99d $ openssl dgst -sha224 -prverify ecprivkey.pem -signature text.sign text.md Verified OK","title":"\uac80\uc99d(verify)"},{"location":"openssl/cli/enc/","text":"enc About enc \ub300\uce6d \uc554\ud638 \uae30\ub2a5 (Symmetric cipher routines) \ud30c\uc77c \uc554\ud638\ud654/\ubcf5\ud638\ud654 \uae30\ubcf8\uc801\uc73c\ub85c stdin/stdout \uc0ac\uc6a9 man enc \ucc38\uace0 openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... Options are -in 'file' input file -out file output file -pass arg pass phrase source -e encrypt -d decrypt -a/-base64 base64 encode/decode, depending on encryption flag -k passphrase is the next argument -kfile passphrase is the first line of the file argument -md the next argument is the md to use to create a key from a passphrase. One of md2, md5, sha or sha1 -S salt in hex is the next argument -K/-iv key/iv in hex is the next argument -[pP] print the iv/key (then exit if -P) -bufsize n buffer size -nopad disable standard block padding -engine e use engine e, possibly a hardware device. \uc554\ud638\ud654 -e \uc635\uc158\uc774 \uae30\ubcf8\uac12, -e \uc774 \uc5c6\uc73c\uba74 \uae30\ubcf8\uc801\uc73c\ub85c \uc554\ud638\ud654 'cipher type' \ubaa9\ub85d\uc740 man enc \ub610\ub294 openssl enc -help \ub85c \ud655\uc778 \uac00\ub2a5 -help \ub294 \uc798\ubabb\ub41c \uc635\uc158\uc73c\ub85c openssl \uc5d0\uc11c \uc798\ubabb\ub41c \uc635\uc158\uc744 \uc2e4\ud589\ud558\uba74 'usage'\uac00 \ucd9c\ub825 openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) text.txt\ub97c AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc554\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.bin \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -e -aes-128-cbc -in text.txt -out text.bin # (2) key= password1234 \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin \\ -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5 \ubcf5\ud638\ud654 -d \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc57c \ubcf5\ud638\ud654 \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub294 \uc554\ud638\ud654\uc5d0 \uc0ac\uc6a9\ub41c \uc54c\uace0\ub9ac\uc998\uacfc \ud0a4 \uac12\uc774 \ub3d9\uc77c\ud574\uc57c \uc815\uc0c1\uc801\uc73c\ub85c \ubcf5\ud638\ud654\uac00 \uc774\ub8e8\uc5b4\uc9d0 IV\uc640 salt \uc9c0\uc815\ud574\uc11c \uc554\ud638\ud654\ud55c \uacbd\uc6b0, IV\uc640 salt\uac12\ub3c4 \ub3d9\uc77c\ud574\uc57c \ud568 key \uac12\ub9cc \uc785\ub825\ud55c \uacbd\uc6b0, key\uac12\uc744 \uae30\uc900\uc73c\ub85c IV\uc640 salt\uac00 \uc0dd\uc131\ub418\uc5b4 \uc554\ud638\ud654\ub418\ubbc0\ub85c, \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub3c4 key\uac12\ub9cc \uc785\ub825\ud574\uc57c \uc815\uc0c1\uc801\uc778 \ubcf5\ud638\ud654 \uac00\ub2a5 openssl enc -d 'cipher type' -in 'infile' -out 'outfile' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) \uc554\ud638\ud654\ub41c \ud30c\uc77c text.bin\uc744 AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud558\uc5ec \ubcf5\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.txt \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -d -aes-128-cbc -in text.bin -out text.txt # (2) key= password1234 \ub85c \uc554\ud638\ud654\ub41c \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5","title":"Enc"},{"location":"openssl/cli/enc/#enc","text":"","title":"enc"},{"location":"openssl/cli/enc/#about-enc","text":"\ub300\uce6d \uc554\ud638 \uae30\ub2a5 (Symmetric cipher routines) \ud30c\uc77c \uc554\ud638\ud654/\ubcf5\ud638\ud654 \uae30\ubcf8\uc801\uc73c\ub85c stdin/stdout \uc0ac\uc6a9 man enc \ucc38\uace0 openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e|d] [-p] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... Options are -in 'file' input file -out file output file -pass arg pass phrase source -e encrypt -d decrypt -a/-base64 base64 encode/decode, depending on encryption flag -k passphrase is the next argument -kfile passphrase is the first line of the file argument -md the next argument is the md to use to create a key from a passphrase. One of md2, md5, sha or sha1 -S salt in hex is the next argument -K/-iv key/iv in hex is the next argument -[pP] print the iv/key (then exit if -P) -bufsize n buffer size -nopad disable standard block padding -engine e use engine e, possibly a hardware device.","title":"About enc"},{"location":"openssl/cli/enc/#_1","text":"-e \uc635\uc158\uc774 \uae30\ubcf8\uac12, -e \uc774 \uc5c6\uc73c\uba74 \uae30\ubcf8\uc801\uc73c\ub85c \uc554\ud638\ud654 'cipher type' \ubaa9\ub85d\uc740 man enc \ub610\ub294 openssl enc -help \ub85c \ud655\uc778 \uac00\ub2a5 -help \ub294 \uc798\ubabb\ub41c \uc635\uc158\uc73c\ub85c openssl \uc5d0\uc11c \uc798\ubabb\ub41c \uc635\uc158\uc744 \uc2e4\ud589\ud558\uba74 'usage'\uac00 \ucd9c\ub825 openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc [-e] 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) text.txt\ub97c AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc554\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.bin \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -e -aes-128-cbc -in text.txt -out text.bin # (2) key= password1234 \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \uc554\ud638\ud654 openssl enc -e -aes-128-cbc -in text.txt -out text.bin \\ -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5","title":"\uc554\ud638\ud654"},{"location":"openssl/cli/enc/#_2","text":"-d \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc57c \ubcf5\ud638\ud654 \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub294 \uc554\ud638\ud654\uc5d0 \uc0ac\uc6a9\ub41c \uc54c\uace0\ub9ac\uc998\uacfc \ud0a4 \uac12\uc774 \ub3d9\uc77c\ud574\uc57c \uc815\uc0c1\uc801\uc73c\ub85c \ubcf5\ud638\ud654\uac00 \uc774\ub8e8\uc5b4\uc9d0 IV\uc640 salt \uc9c0\uc815\ud574\uc11c \uc554\ud638\ud654\ud55c \uacbd\uc6b0, IV\uc640 salt\uac12\ub3c4 \ub3d9\uc77c\ud574\uc57c \ud568 key \uac12\ub9cc \uc785\ub825\ud55c \uacbd\uc6b0, key\uac12\uc744 \uae30\uc900\uc73c\ub85c IV\uc640 salt\uac00 \uc0dd\uc131\ub418\uc5b4 \uc554\ud638\ud654\ub418\ubbc0\ub85c, \ubcf5\ud638\ud654 \uc2dc\uc5d0\ub3c4 key\uac12\ub9cc \uc785\ub825\ud574\uc57c \uc815\uc0c1\uc801\uc778 \ubcf5\ud638\ud654 \uac00\ub2a5 openssl enc -d 'cipher type' -in 'infile' -out 'outfile' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -k 'passphrase' openssl enc -d 'cipher type' -in 'infile' -out 'outfile' -K 'key(in hex)' -iv 'IV(in hex)' -S 'salt(in hex)' ... e.g. # (1) \uc554\ud638\ud654\ub41c \ud30c\uc77c text.bin\uc744 AES-128-CBC \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud558\uc5ec \ubcf5\ud638\ud654\ud55c \uacb0\uacfc\ub97c text.txt \ud30c\uc77c\ub85c \ucd9c\ub825, key\ub294 NULL \uac12 openssl enc -d -aes-128-cbc -in text.bin -out text.txt # (2) key= password1234 \ub85c \uc554\ud638\ud654\ub41c \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -k password1234 # (3) key(in hex)='83A0423EB66693020B7A78AA0F08DE6C', IV(in hex)='EBA02B3EF93F14FDEB64E09A815DE8E8', # salt(in hex)='07C95502C4D5F3D5' \ub85c \uc9c0\uc815\ud558\uc5ec \ud30c\uc77c \ubcf5\ud638\ud654 openssl enc -d -aes-128-cbc -in text.bin -out text.txt -K 83A0423EB66693020B7A78AA0F08DE6C -iv EBA02B3EF93F14FDEB64E09A815DE8E8 -S 07C95502C4D5F3D5","title":"\ubcf5\ud638\ud654"},{"location":"openssl/cli/keygen/","text":"EC key pair EC(Elliptic Curve) \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud55c \ud0a4 \uc0dd\uc131 Asymmetric key \uc54c\uace0\ub9ac\uc998\uc740 private key\ub97c \uc0dd\uc131\ud55c \ud6c4, private key\uc5d0 \ub300\uc751\ud558\ub294 public key\ub97c \uc0dd\uc131 Private key \uc0dd\uc131 default\ub85c PEM(Privacy-Enhanced Mail) \ud3ec\ub9f7\uc73c\ub85c \uc0dd\uc131 openssl ecparam -genkey -name 'curve name' -out 'outfile' Example openssl ecparam -genkey -name prime256v1 -out ecprivkey.pem Example - Encrypt private key openssl ec -aes-128-cbc -in ecprivkey.pem -out new_ecprivkey.pem # man enc \ucc38\uace0 Public key \uc0dd\uc131 openssl ec -in 'infile' -pubout -out 'outfile' * 'infile' : private key \ud30c\uc77c * -pubout : 'infile' \uc5d0 \ub300\uc751\ud558\ub294 \uacf5\uac1c \ud0a4 \ucd9c\ub825 * Example openssl ec -in ecprivkey.pem -pubout -out ecpubkey.pem ecparam \uc635\uc158 man ecparam \ucc38\uace0 ecparam [options] infile outfile where options are -inform arg input format - default PEM (DER or PEM) -outform arg output format - default PEM -in arg input file - default stdin -out arg output file - default stdout -noout do not print the ec parameter -text print the ec parameters in text form -check validate the ec parameters -C print a 'C' function creating the parameters -name arg use the ec parameters with 'short name' name -list_curves prints a list of all currently available curve 'short names' -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit -no_seed if 'explicit' parameters are chosen do not use the seed -genkey generate ec key -rand file files to use for random number input -engine e use engine e, possibly a hardware device ec \uc635\uc158 man ec \ucc38\uace0 ec [options] infile outfile where options are -inform arg input format - DER or PEM -outform arg output format - DER or PEM -in arg input file -passin arg input file pass phrase source -out arg output file -passout arg output file pass phrase source -engine e use engine e, possibly a hardware device. -des encrypt PEM output, instead of 'des' every other cipher supported by OpenSSL can be used -text print the key -noout dont print key out -param_out print the elliptic curve parameters -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit","title":"Keygen"},{"location":"openssl/cli/keygen/#ec-key-pair","text":"EC(Elliptic Curve) \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud55c \ud0a4 \uc0dd\uc131 Asymmetric key \uc54c\uace0\ub9ac\uc998\uc740 private key\ub97c \uc0dd\uc131\ud55c \ud6c4, private key\uc5d0 \ub300\uc751\ud558\ub294 public key\ub97c \uc0dd\uc131","title":"EC key pair"},{"location":"openssl/cli/keygen/#private-key","text":"default\ub85c PEM(Privacy-Enhanced Mail) \ud3ec\ub9f7\uc73c\ub85c \uc0dd\uc131 openssl ecparam -genkey -name 'curve name' -out 'outfile' Example openssl ecparam -genkey -name prime256v1 -out ecprivkey.pem Example - Encrypt private key openssl ec -aes-128-cbc -in ecprivkey.pem -out new_ecprivkey.pem # man enc \ucc38\uace0","title":"Private key \uc0dd\uc131"},{"location":"openssl/cli/keygen/#public-key","text":"openssl ec -in 'infile' -pubout -out 'outfile' * 'infile' : private key \ud30c\uc77c * -pubout : 'infile' \uc5d0 \ub300\uc751\ud558\ub294 \uacf5\uac1c \ud0a4 \ucd9c\ub825 * Example openssl ec -in ecprivkey.pem -pubout -out ecpubkey.pem","title":"Public key \uc0dd\uc131"},{"location":"openssl/cli/keygen/#ecparam","text":"man ecparam \ucc38\uace0 ecparam [options] infile outfile where options are -inform arg input format - default PEM (DER or PEM) -outform arg output format - default PEM -in arg input file - default stdin -out arg output file - default stdout -noout do not print the ec parameter -text print the ec parameters in text form -check validate the ec parameters -C print a 'C' function creating the parameters -name arg use the ec parameters with 'short name' name -list_curves prints a list of all currently available curve 'short names' -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit -no_seed if 'explicit' parameters are chosen do not use the seed -genkey generate ec key -rand file files to use for random number input -engine e use engine e, possibly a hardware device","title":"ecparam \uc635\uc158"},{"location":"openssl/cli/keygen/#ec","text":"man ec \ucc38\uace0 ec [options] infile outfile where options are -inform arg input format - DER or PEM -outform arg output format - DER or PEM -in arg input file -passin arg input file pass phrase source -out arg output file -passout arg output file pass phrase source -engine e use engine e, possibly a hardware device. -des encrypt PEM output, instead of 'des' every other cipher supported by OpenSSL can be used -text print the key -noout dont print key out -param_out print the elliptic curve parameters -conv_form arg specifies the point conversion form possible values: compressed uncompressed (default) hybrid -param_enc arg specifies the way the ec parameters are encoded in the asn1 der encoding possible values: named_curve (default) explicit","title":"ec \uc635\uc158"},{"location":"openssl/cli/pki/","text":"Settings for Root CA openssl\uc744 \uc774\uc6a9\ud558\uc5ec \uc778\uc99d\uc11c \ubc1c\uae09\uc744 \uc704\ud574 PKI \uc778\ud504\ub77c \uad6c\uc131 root CA \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ub514\ub809\ud130\ub9ac \ubc0f \ud30c\uc77c \uc900\ube44. Example sudo -s mkdir -p /opt/pki/root cd /opt/pki/root export ROOTCADIR=`pwd` mkdir certs crl newcerts private echo 1000 serial ; touch index.txt cp /etc/pki/tls/openssl.cnf $ROOTCADIR/openssl.cnf export OPENSSL_CONF=$ROOTCADIR/openssl.cnf Check root ca for files $ ls /opt/pki/root drwx------. 2 root 4096 Sep 20 21:23 private drwxr-xr-x. 2 root 4096 Sep 20 21:23 newcerts drwxr-xr-x. 2 root 4096 Sep 20 21:23 crl drwxr-xr-x. 2 root 4096 Sep 20 21:23 certs -rw-r--r--. 1 root 5 Sep 20 21:24 serial -rw-r--r--. 1 root 0 Sep 20 21:24 index.txt -rw-r--r--. 1 root 10923 Sep 20 21:24 openssl.cnf openssl.cnf \ub0b4\uc6a9 ... #################################################################### [ ca ] default_ca = CA_default # \uae30\ubcf8 CA \uc139\uc158 #################################################################### [ CA_default ] # default_ca \uc758 \uc9c0\uc815\ud55c \uc139\uc158 \uc2dc\uc791 \ubd80\ubd84 dir = /opt/pki/root # Where everything is kept # \uc704\uc5d0\uc11c \ub9cc\ub4e0 \uacbd\ub85c\ub85c \uc218\uc815 certs = $dir/certs # Where the issued certs are kept crl_dir = $dir/crl # Where the issued crl are kept database = $dir/index.txt # database index file. #unique_subject = no # Set to 'no' to allow creation of # several ctificates with same subject. new_certs_dir = $dir/newcerts # default place for new certs. certificate = $dir/cacert.pem # The CA certificate serial = $dir/serial # The current serial number crlnumber = $dir/crlnumber # the current crl number # must be commented out to leave a V1 CRL crl = $dir/crl.pem # The current CRL private_key = $dir/private/cakey.pem# The private key RANDFILE = $dir/private/.rand # private random number file x509_extensions = usr_cert # The extentions to add to the cert ... root CA key \uc0dd\uc131 \uc778\uc99d\uc11c \uc0dd\uc131\uc5d0 \ud544\uc694\ud55c CA\uc758 \uac1c\uc778\ud0a4 \ub97c \uc0dd\uc131. OpenSSL \uc758 \" EC key pair \uc0dd\uc131 \" \ucc38\uace0. Example cd $ROOTCA openssl ecparam -genkey -name prime256v1 -out private/cakey.pem openssl ec -in private/cakey.pem -out private/cakey.pem -aes256 chmod 400 private/cakey.pem root CA \uc778\uc99d\uc11c \uc0dd\uc131 \uc790\uac00 \uc11c\uba85(self-signed) \ub41c \uc778\uc99d\uc11c\ub97c \uc0dd\uc131. x509 \ud615\uc2dd\uc758 \uc778\uc99d\uc11c\ub85c \uc0dd\uc131. PEM\uc73c\ub85c \ucd9c\ub825(default) man req \ucc38\uace0. Example output openssl req -new -x509 -extensions v3_ca -key private/cakey.pem -out cacert.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Seoul Locality Name (eg, city) [Default City]:Seoul Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:root CA Common Name (eg, your name or your server's hostname) []:rootca.example.com Email Address []:rootca@example.com chmod 444 certs/ca.crt.pem \uc0ac\uc6a9\uc790 \uc778\uc99d\uc11c \uc0dd\uc131 CSR(Certificate Signing Request) \ub97c \uc0dd\uc131 \ud6c4, root CA\uc5d0\uac8c \uc778\uc99d\uc11c \ubc1c\ud589\uc744 \uc694\uccad. PEM\uc73c\ub85c \ucd9c\ub825(\uae30\ubcf8\uac12) \uc0ac\uc6a9\uc790 \uac1c\uc778 \ud0a4 \uc0dd\uc131 (at a host) \uc778\uc99d\uc11c\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uc778 \ud0a4\ub97c \uc0dd\uc131 \ud544\uc694. cd opt/pki mkdir host1 cd host1 openssl genrsa -out host1.key.pem CSR \uc0dd\uc131 (at a host) \uc0ac\uc6a9\uc790\uc758 \uac1c\uc778 \ud0a4\ub85c CSR \ud30c\uc77c \uc0dd\uc131. CSR \uc0dd\uc131 \uc2dc, Country, State, Locality, Organization \ub294 root CA\uc758 \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ud568(\uae30\ubcf8\uac12), openssl.cnf \uc5d0\uc11c \uc124\uc815 \uac00\ub2a5. openssl req -new -key host1.key.pem -out host1.csr.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Daejeon Locality Name (eg, city) [Default City]:Yuseong Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:host1 Common Name (eg, your name or your server's hostname) []:host1.example.com Email Address []:host1@example.com Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: \uc778\uc99d\uc11c \ubc1c\ud589 (at a root CA) CA\ub85c\ubd80\ud130 \uc778\uc99d\uc11c \ubc1c\ud589. \ubc1c\ud589 \uc131\uacf5 \uc2dc, serial \ubc88\ud638\uac00 \uc99d\uac00\ud558\uba70 index.txt\uc5d0 \ucd94\uac00. serial, index.txt\ub208 \uc784\uc758\ub85c \uc218\uc815\ud558\uba74 \uc548\ub428. man ca \ucc38\uace0. # \uae30\ubcf8\uc801\uc73c\ub85c 'serial\ubc88\ud638.pem' \ud615\uc2dd\uc73c\ub85c \uc0dd\uc131 openssl ca -in host1.csr.pem # \ucd9c\ub825 \ud30c\uc77c \uc774\ub984 \uc9c0\uc815 openssl ca -in host1.csr.pem -out host1.crt.pem \uc635\uc158 \uc5c6\uc774 \uc0ac\uc6a9\ud558\uba74 openssl.cnf\uc5d0\uc11c \uc815\uc758\ub41c CA\uc758 \ud0a4, \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9(\uae30\ubcf8\uac12). openssl.cnf \ucc38\uc870, -config \uc635\uc158\uc73c\ub85c openssl \uc124\uc815 \ud30c\uc77c \uc9c0\uc815 \uac00\ub2a5. \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 $ROOTCADIR/newcerts/\uc2dc\ub9ac\uc5bc\ubc88\ud638.pem \ud615\ud0dc\ub85c \uc0dd\uc131. \uc635\uc158\uc73c\ub85c CA \ud0a4, CA \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998, \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\uc758 \uc704\uce58\uc640 \uc774\ub984\uc744 \uc9c0\uc815 \uac00\ub2a5. MD \uc54c\uace0\ub9ac\uc998\uc740 CA \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ubc1c\ud589 \uac00\ub2a5. \uc778\uc99d\uc11c \ubc1c\ud589 \uc2dc ca \uba85\ub839 openssl ca -in 'csr infile' [-config 'config file'] [-keyfile 'CA keyfile'] [-cert 'CA certificate file'] [-notext] [-md 'md algorithm] [-out 'cert outfile'] ... openssl.cnf \ub0b4\uc6a9 dir = /opt/pki/root # root CA basedir. certs = $dir/certs new_certs_dir = $dir/newcerts # use if no -out option. certificate = $dir/cacert.pem # use if no -cert option. private_key = $dir/private/cakey.pem # use if no -keyfile option. default_days = 365 # use if no -days option. default_md = sha256 # use if no -md option. Example openssl ca -keyfile $ROOTCADIR/private/cakey.pem -cert $ROOTCADIR/cacert.pem -notext -md -sha1 -in host1.csr.pem -out host1.crt.pem X509 \uc778\uc99d\uc11c \ub0b4\uc6a9 \ucd9c\ub825 openssl x509 -in 'infile' -noout -text * Example openssl x509 -in host1.crt.pem -noout -text \uc778\uc99d\uc11c \ubc1c\ud589 \ud655\uc778 (at a root CA) $ cat $ROOTCADIR/index.txt V 170920145518Z 1000 unknown /C=KR/ST=Daejeon/O=example/OU=host1/CN=host1.example.com/emailAddress=host1@example.com \uc778\uc99d\uc11c \uac80\uc99d \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 CA \uc778\uc99d\uc11c\ub85c \uac80\uc99d(Verify)\ud55c\ub2e4. CA \uc778\uc99d\uc11c\ub9cc \uc788\uc73c\uba74 \uac80\uc99d \uac00\ub2a5 \uc778\uc99d\uc11c \uac80\uc99d openssl verify -CAfile 'CA certificate file' 'target certificate file' Example openssl verify -CAfile $ROOTCADIR/cacert.pem host1.crt.pem","title":"Pki"},{"location":"openssl/cli/pki/#settings-for-root-ca","text":"openssl\uc744 \uc774\uc6a9\ud558\uc5ec \uc778\uc99d\uc11c \ubc1c\uae09\uc744 \uc704\ud574 PKI \uc778\ud504\ub77c \uad6c\uc131 root CA \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ub514\ub809\ud130\ub9ac \ubc0f \ud30c\uc77c \uc900\ube44. Example sudo -s mkdir -p /opt/pki/root cd /opt/pki/root export ROOTCADIR=`pwd` mkdir certs crl newcerts private echo 1000 serial ; touch index.txt cp /etc/pki/tls/openssl.cnf $ROOTCADIR/openssl.cnf export OPENSSL_CONF=$ROOTCADIR/openssl.cnf Check root ca for files $ ls /opt/pki/root drwx------. 2 root 4096 Sep 20 21:23 private drwxr-xr-x. 2 root 4096 Sep 20 21:23 newcerts drwxr-xr-x. 2 root 4096 Sep 20 21:23 crl drwxr-xr-x. 2 root 4096 Sep 20 21:23 certs -rw-r--r--. 1 root 5 Sep 20 21:24 serial -rw-r--r--. 1 root 0 Sep 20 21:24 index.txt -rw-r--r--. 1 root 10923 Sep 20 21:24 openssl.cnf openssl.cnf \ub0b4\uc6a9 ... #################################################################### [ ca ] default_ca = CA_default # \uae30\ubcf8 CA \uc139\uc158 #################################################################### [ CA_default ] # default_ca \uc758 \uc9c0\uc815\ud55c \uc139\uc158 \uc2dc\uc791 \ubd80\ubd84 dir = /opt/pki/root # Where everything is kept # \uc704\uc5d0\uc11c \ub9cc\ub4e0 \uacbd\ub85c\ub85c \uc218\uc815 certs = $dir/certs # Where the issued certs are kept crl_dir = $dir/crl # Where the issued crl are kept database = $dir/index.txt # database index file. #unique_subject = no # Set to 'no' to allow creation of # several ctificates with same subject. new_certs_dir = $dir/newcerts # default place for new certs. certificate = $dir/cacert.pem # The CA certificate serial = $dir/serial # The current serial number crlnumber = $dir/crlnumber # the current crl number # must be commented out to leave a V1 CRL crl = $dir/crl.pem # The current CRL private_key = $dir/private/cakey.pem# The private key RANDFILE = $dir/private/.rand # private random number file x509_extensions = usr_cert # The extentions to add to the cert ...","title":"Settings for Root CA"},{"location":"openssl/cli/pki/#root-ca-key","text":"\uc778\uc99d\uc11c \uc0dd\uc131\uc5d0 \ud544\uc694\ud55c CA\uc758 \uac1c\uc778\ud0a4 \ub97c \uc0dd\uc131. OpenSSL \uc758 \" EC key pair \uc0dd\uc131 \" \ucc38\uace0. Example cd $ROOTCA openssl ecparam -genkey -name prime256v1 -out private/cakey.pem openssl ec -in private/cakey.pem -out private/cakey.pem -aes256 chmod 400 private/cakey.pem","title":"root CA key \uc0dd\uc131"},{"location":"openssl/cli/pki/#root-ca","text":"\uc790\uac00 \uc11c\uba85(self-signed) \ub41c \uc778\uc99d\uc11c\ub97c \uc0dd\uc131. x509 \ud615\uc2dd\uc758 \uc778\uc99d\uc11c\ub85c \uc0dd\uc131. PEM\uc73c\ub85c \ucd9c\ub825(default) man req \ucc38\uace0. Example output openssl req -new -x509 -extensions v3_ca -key private/cakey.pem -out cacert.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Seoul Locality Name (eg, city) [Default City]:Seoul Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:root CA Common Name (eg, your name or your server's hostname) []:rootca.example.com Email Address []:rootca@example.com chmod 444 certs/ca.crt.pem","title":"root CA \uc778\uc99d\uc11c \uc0dd\uc131"},{"location":"openssl/cli/pki/#_1","text":"CSR(Certificate Signing Request) \ub97c \uc0dd\uc131 \ud6c4, root CA\uc5d0\uac8c \uc778\uc99d\uc11c \ubc1c\ud589\uc744 \uc694\uccad. PEM\uc73c\ub85c \ucd9c\ub825(\uae30\ubcf8\uac12)","title":"\uc0ac\uc6a9\uc790 \uc778\uc99d\uc11c \uc0dd\uc131"},{"location":"openssl/cli/pki/#at-a-host","text":"\uc778\uc99d\uc11c\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uc778 \ud0a4\ub97c \uc0dd\uc131 \ud544\uc694. cd opt/pki mkdir host1 cd host1 openssl genrsa -out host1.key.pem","title":"\uc0ac\uc6a9\uc790 \uac1c\uc778 \ud0a4 \uc0dd\uc131 (at a host)"},{"location":"openssl/cli/pki/#csr-at-a-host","text":"\uc0ac\uc6a9\uc790\uc758 \uac1c\uc778 \ud0a4\ub85c CSR \ud30c\uc77c \uc0dd\uc131. CSR \uc0dd\uc131 \uc2dc, Country, State, Locality, Organization \ub294 root CA\uc758 \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ud568(\uae30\ubcf8\uac12), openssl.cnf \uc5d0\uc11c \uc124\uc815 \uac00\ub2a5. openssl req -new -key host1.key.pem -out host1.csr.pem ... Country Name (2 letter code) [XX]:KR State or Province Name (full name) []:Daejeon Locality Name (eg, city) [Default City]:Yuseong Organization Name (eg, company) [Default Company Ltd]:example Organizational Unit Name (eg, section) []:host1 Common Name (eg, your name or your server's hostname) []:host1.example.com Email Address []:host1@example.com Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []:","title":"CSR \uc0dd\uc131 (at a host)"},{"location":"openssl/cli/pki/#at-a-root-ca","text":"CA\ub85c\ubd80\ud130 \uc778\uc99d\uc11c \ubc1c\ud589. \ubc1c\ud589 \uc131\uacf5 \uc2dc, serial \ubc88\ud638\uac00 \uc99d\uac00\ud558\uba70 index.txt\uc5d0 \ucd94\uac00. serial, index.txt\ub208 \uc784\uc758\ub85c \uc218\uc815\ud558\uba74 \uc548\ub428. man ca \ucc38\uace0. # \uae30\ubcf8\uc801\uc73c\ub85c 'serial\ubc88\ud638.pem' \ud615\uc2dd\uc73c\ub85c \uc0dd\uc131 openssl ca -in host1.csr.pem # \ucd9c\ub825 \ud30c\uc77c \uc774\ub984 \uc9c0\uc815 openssl ca -in host1.csr.pem -out host1.crt.pem \uc635\uc158 \uc5c6\uc774 \uc0ac\uc6a9\ud558\uba74 openssl.cnf\uc5d0\uc11c \uc815\uc758\ub41c CA\uc758 \ud0a4, \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9(\uae30\ubcf8\uac12). openssl.cnf \ucc38\uc870, -config \uc635\uc158\uc73c\ub85c openssl \uc124\uc815 \ud30c\uc77c \uc9c0\uc815 \uac00\ub2a5. \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 $ROOTCADIR/newcerts/\uc2dc\ub9ac\uc5bc\ubc88\ud638.pem \ud615\ud0dc\ub85c \uc0dd\uc131. \uc635\uc158\uc73c\ub85c CA \ud0a4, CA \uc778\uc99d\uc11c, MD \uc54c\uace0\ub9ac\uc998, \ubc1c\ud589\ub41c \uc778\uc99d\uc11c\uc758 \uc704\uce58\uc640 \uc774\ub984\uc744 \uc9c0\uc815 \uac00\ub2a5. MD \uc54c\uace0\ub9ac\uc998\uc740 CA \uc778\uc99d\uc11c\uc640 \ub3d9\uc77c\ud574\uc57c \ubc1c\ud589 \uac00\ub2a5. \uc778\uc99d\uc11c \ubc1c\ud589 \uc2dc ca \uba85\ub839 openssl ca -in 'csr infile' [-config 'config file'] [-keyfile 'CA keyfile'] [-cert 'CA certificate file'] [-notext] [-md 'md algorithm] [-out 'cert outfile'] ... openssl.cnf \ub0b4\uc6a9 dir = /opt/pki/root # root CA basedir. certs = $dir/certs new_certs_dir = $dir/newcerts # use if no -out option. certificate = $dir/cacert.pem # use if no -cert option. private_key = $dir/private/cakey.pem # use if no -keyfile option. default_days = 365 # use if no -days option. default_md = sha256 # use if no -md option. Example openssl ca -keyfile $ROOTCADIR/private/cakey.pem -cert $ROOTCADIR/cacert.pem -notext -md -sha1 -in host1.csr.pem -out host1.crt.pem","title":"\uc778\uc99d\uc11c \ubc1c\ud589 (at a root CA)"},{"location":"openssl/cli/pki/#x509","text":"openssl x509 -in 'infile' -noout -text * Example openssl x509 -in host1.crt.pem -noout -text","title":"X509 \uc778\uc99d\uc11c \ub0b4\uc6a9 \ucd9c\ub825"},{"location":"openssl/cli/pki/#at-a-root-ca_1","text":"$ cat $ROOTCADIR/index.txt V 170920145518Z 1000 unknown /C=KR/ST=Daejeon/O=example/OU=host1/CN=host1.example.com/emailAddress=host1@example.com","title":"\uc778\uc99d\uc11c \ubc1c\ud589 \ud655\uc778 (at a root CA)"},{"location":"openssl/cli/pki/#_2","text":"\ubc1c\ud589\ub41c \uc778\uc99d\uc11c\ub294 CA \uc778\uc99d\uc11c\ub85c \uac80\uc99d(Verify)\ud55c\ub2e4. CA \uc778\uc99d\uc11c\ub9cc \uc788\uc73c\uba74 \uac80\uc99d \uac00\ub2a5 \uc778\uc99d\uc11c \uac80\uc99d openssl verify -CAfile 'CA certificate file' 'target certificate file' Example openssl verify -CAfile $ROOTCADIR/cacert.pem host1.crt.pem","title":"\uc778\uc99d\uc11c \uac80\uc99d"},{"location":"tips/etc/","text":"Tips Change the Username Test on Ubuntu 16.04 # sudo passwd root # if any usermod -l newname -d /home/ newname -m oldname groupmod -n newgroup oldgroup # passwd -l root # lock root account example # newname, newgroup=jgseong # oldname, oldgroup=ubuntu usermod -l jgseong -d /home/jgseong -m ubuntu groupmod -n jgseong ubuntu Install system tray icon on elementary OS Juno Juno \ub294 elementary OS 5.0 \uc758 GUI. \uae30\ubcf8\uc801\uc73c\ub85c system tray icon\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c About system tray icons. In release-juno , elementaryOS dropped the support of the old Ayatana Indicators (refer to StackExchange ) Ayanata Indicators \uc124\uce58 \ubc0f \uc124\uc815 sudo add-apt-repository -y ppa:yunnxx/elementary sudo apt update sudo apt install -y indicator-application wingpanel-indicator-ayatana sudo sed -i 's/OnlyShowIn=.*;/OnlyShowIn=Pantheon;/' /etc/xdg/autostart/indicator-application.desktop # Alternatively, run 'sudo vim /etc/xdg/autostart/indicator-application.desktop' to edit file sudo systemctl restart lightdm.service # Or restart system. visudo sudo \uad8c\ud55c \ubc0f \ub3d9\uc791 \uc124\uc815 sudo visudo /etc/sudoer \ud30c\uc77c \ud3b8\uc9d1(\ubb38\ubc95 \uac80\uc0ac, \uc800\uc7a5 \uac00\ub2a5) vim\uc73c\ub85c \ud3b8\uc9d1 \uc2dc sudo EDITOR=vim visudo (default: nano) /etc/sudoers.d \uc5d0 \uc124\uc815 \ud30c\uc77c \uc0dd\uc131 \ud6c4, includedir /etc/sudoers.d \uc0ac\uc6a9 \uac00\ub2a5 Default settings (on Ubuntu 16.04) {% code-tabs %} {% code-tabs-item title=\"/etc/sudoer\" %} # # This file MUST be edited with the 'visudo' command as root. # # Please consider adding local content in /etc/sudoers.d/ instead of # directly modifying this file. # # See the man page for details on how to write a sudoers file. # Defaults env_reset Defaults mail_badpass Defaults secure_path= /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin # Host alias specification # User alias specification # Cmnd alias specification # User privilege specification root ALL=(ALL:ALL) ALL # Members of the admin group may gain root privileges %admin ALL=(ALL) ALL # Allow members of group sudo to execute any command %sudo ALL=(ALL:ALL) ALL # See sudoers(5) for more information on #include directives: #includedir /etc/sudoers.d {% endcode-tabs-item %} {% endcode-tabs %} no-password for user jgseong ALL=(ALL:ALL) NOPASSWD:ALL no-password for group %wheel ALL=(ALL) NOPASSWD:ALL On terminal sudo addgroup wheel sudo addgroup ${USER} wheel Fix perl warning about the locale failed \uac04\ud639 \uc6b0\ubd84\ud22c \uc124\uce58 \ud6c4 \ubc1c\uc0dd\ud558\ub294 \uc5d0\ub7ec perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_PAPER = ko_KR.UTF-8 , LC_ADDRESS = ko_KR.UTF-8 , LC_MONETARY = ko_KR.UTF-8 , LC_NUMERIC = ko_KR.UTF-8 , LC_TELEPHONE = ko_KR.UTF-8 , LC_IDENTIFICATION = ko_KR.UTF-8 , LC_MEASUREMENT = ko_KR.UTF-8 , LC_TIME = ko_KR.UTF-8 , LC_NAME = ko_KR.UTF-8 , LANG = en_US.UTF-8 are supported and installed on your system. perl: warning: Falling back to a fallback locale ( en_US.UTF-8 ). sudo locale-gen sudo dpkg-reconfigure locales # locale \uc124\uc815 \ud6c4 OK, e.g) en_US.UTF-8 Generating locales (this might take a while)... en_AG.UTF-8... done en_AU.UTF-8... done en_BW.UTF-8... done en_CA.UTF-8... done en_DK.UTF-8... done en_GB.UTF-8... done en_HK.UTF-8... done en_IE.UTF-8... done en_IN.UTF-8... done en_NG.UTF-8... done en_NZ.UTF-8... done en_PH.UTF-8... done en_SG.UTF-8... done en_US.UTF-8... done en_ZA.UTF-8... done en_ZM.UTF-8... done en_ZW.UTF-8... done ko_KR.EUC-KR... done ko_KR.UTF-8... done Generation complete. SSH login with public key \uacf5\uac1c\ud0a4\ub97c \uc774\uc6a9\ud55c \ub85c\uadf8\uc778 (at client side) SSH \ud0a4\uc30d \uc0dd\uc131 ```bash ssh-keygen -c ed25519 -N '' -C '' -f ~/.ssh/id_ed25519 # -N : New passphrase, no encryption if empty. # -C : Comment, in public key file(.pub) # -f : specify a file(output) # -c : cipher type, ' rsa | dsa | ecdsa | ed25519 ' ``` SSH \uacf5\uac1c \ud0a4 \ubcf5\uc0ac bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 cat ~/.ssh/id_ed25519.pub | ssh -t ${SSH_USER}@${SSH_REMOTE} 'tee -a ~/.ssh/authorized_keys' SSH \uc811\uc18d -i \uc635\uc158\uc73c\ub85c \ud0a4 \uc9c0\uc815 bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 ssh -i ~/.ssh/id_ed25519 ${SSH_USER}@${SSH_REMOTE} config \ud30c\uc77c \uc124\uc815 ~/.ssh/config bash Host 192.168.0.2 # 2 options to ignore host key check # UserKnownHostsFile /dev/null # StrictHostKeyChecking no SendEnv LANG LC_* HashKnownHosts yes GSSAPIAuthentication yes # Append to specify identity file IdentityFile ~/.ssh/id_ed25519 '192.168.0.2' \uc811\uc18d \uc2dc, -i \uc5c6\uc774 \uc811\uc18d bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 ssh ${SSH_USER}@${SSH_REMOTE}","title":"Tips"},{"location":"tips/etc/#tips","text":"","title":"Tips"},{"location":"tips/etc/#change-the-username","text":"Test on Ubuntu 16.04 # sudo passwd root # if any usermod -l newname -d /home/ newname -m oldname groupmod -n newgroup oldgroup # passwd -l root # lock root account example # newname, newgroup=jgseong # oldname, oldgroup=ubuntu usermod -l jgseong -d /home/jgseong -m ubuntu groupmod -n jgseong ubuntu","title":"Change the Username"},{"location":"tips/etc/#install-system-tray-icon-on-elementary-os-juno","text":"Juno \ub294 elementary OS 5.0 \uc758 GUI. \uae30\ubcf8\uc801\uc73c\ub85c system tray icon\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c About system tray icons. In release-juno , elementaryOS dropped the support of the old Ayatana Indicators (refer to StackExchange ) Ayanata Indicators \uc124\uce58 \ubc0f \uc124\uc815 sudo add-apt-repository -y ppa:yunnxx/elementary sudo apt update sudo apt install -y indicator-application wingpanel-indicator-ayatana sudo sed -i 's/OnlyShowIn=.*;/OnlyShowIn=Pantheon;/' /etc/xdg/autostart/indicator-application.desktop # Alternatively, run 'sudo vim /etc/xdg/autostart/indicator-application.desktop' to edit file sudo systemctl restart lightdm.service # Or restart system.","title":"Install system tray icon on elementary OS Juno"},{"location":"tips/etc/#visudo","text":"sudo \uad8c\ud55c \ubc0f \ub3d9\uc791 \uc124\uc815 sudo visudo /etc/sudoer \ud30c\uc77c \ud3b8\uc9d1(\ubb38\ubc95 \uac80\uc0ac, \uc800\uc7a5 \uac00\ub2a5) vim\uc73c\ub85c \ud3b8\uc9d1 \uc2dc sudo EDITOR=vim visudo (default: nano) /etc/sudoers.d \uc5d0 \uc124\uc815 \ud30c\uc77c \uc0dd\uc131 \ud6c4, includedir /etc/sudoers.d \uc0ac\uc6a9 \uac00\ub2a5","title":"visudo"},{"location":"tips/etc/#default-settings-40on-ubuntu-160441","text":"{% code-tabs %} {% code-tabs-item title=\"/etc/sudoer\" %} # # This file MUST be edited with the 'visudo' command as root. # # Please consider adding local content in /etc/sudoers.d/ instead of # directly modifying this file. # # See the man page for details on how to write a sudoers file. # Defaults env_reset Defaults mail_badpass Defaults secure_path= /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin # Host alias specification # User alias specification # Cmnd alias specification # User privilege specification root ALL=(ALL:ALL) ALL # Members of the admin group may gain root privileges %admin ALL=(ALL) ALL # Allow members of group sudo to execute any command %sudo ALL=(ALL:ALL) ALL # See sudoers(5) for more information on #include directives: #includedir /etc/sudoers.d {% endcode-tabs-item %} {% endcode-tabs %}","title":"Default settings (on Ubuntu 16.04)"},{"location":"tips/etc/#no-password-for-user","text":"jgseong ALL=(ALL:ALL) NOPASSWD:ALL","title":"no-password for user"},{"location":"tips/etc/#no-password-for-group","text":"%wheel ALL=(ALL) NOPASSWD:ALL On terminal sudo addgroup wheel sudo addgroup ${USER} wheel","title":"no-password for group"},{"location":"tips/etc/#fix-perl-warning-about-the-locale-failed","text":"\uac04\ud639 \uc6b0\ubd84\ud22c \uc124\uce58 \ud6c4 \ubc1c\uc0dd\ud558\ub294 \uc5d0\ub7ec perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_PAPER = ko_KR.UTF-8 , LC_ADDRESS = ko_KR.UTF-8 , LC_MONETARY = ko_KR.UTF-8 , LC_NUMERIC = ko_KR.UTF-8 , LC_TELEPHONE = ko_KR.UTF-8 , LC_IDENTIFICATION = ko_KR.UTF-8 , LC_MEASUREMENT = ko_KR.UTF-8 , LC_TIME = ko_KR.UTF-8 , LC_NAME = ko_KR.UTF-8 , LANG = en_US.UTF-8 are supported and installed on your system. perl: warning: Falling back to a fallback locale ( en_US.UTF-8 ). sudo locale-gen sudo dpkg-reconfigure locales # locale \uc124\uc815 \ud6c4 OK, e.g) en_US.UTF-8 Generating locales (this might take a while)... en_AG.UTF-8... done en_AU.UTF-8... done en_BW.UTF-8... done en_CA.UTF-8... done en_DK.UTF-8... done en_GB.UTF-8... done en_HK.UTF-8... done en_IE.UTF-8... done en_IN.UTF-8... done en_NG.UTF-8... done en_NZ.UTF-8... done en_PH.UTF-8... done en_SG.UTF-8... done en_US.UTF-8... done en_ZA.UTF-8... done en_ZM.UTF-8... done en_ZW.UTF-8... done ko_KR.EUC-KR... done ko_KR.UTF-8... done Generation complete.","title":"Fix perl warning about the locale failed"},{"location":"tips/etc/#ssh-login-with-public-key","text":"\uacf5\uac1c\ud0a4\ub97c \uc774\uc6a9\ud55c \ub85c\uadf8\uc778 (at client side) SSH \ud0a4\uc30d \uc0dd\uc131 ```bash ssh-keygen -c ed25519 -N '' -C '' -f ~/.ssh/id_ed25519 # -N : New passphrase, no encryption if empty. # -C : Comment, in public key file(.pub) # -f : specify a file(output) # -c : cipher type, ' rsa | dsa | ecdsa | ed25519 ' ``` SSH \uacf5\uac1c \ud0a4 \ubcf5\uc0ac bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 cat ~/.ssh/id_ed25519.pub | ssh -t ${SSH_USER}@${SSH_REMOTE} 'tee -a ~/.ssh/authorized_keys' SSH \uc811\uc18d -i \uc635\uc158\uc73c\ub85c \ud0a4 \uc9c0\uc815 bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 ssh -i ~/.ssh/id_ed25519 ${SSH_USER}@${SSH_REMOTE} config \ud30c\uc77c \uc124\uc815 ~/.ssh/config bash Host 192.168.0.2 # 2 options to ignore host key check # UserKnownHostsFile /dev/null # StrictHostKeyChecking no SendEnv LANG LC_* HashKnownHosts yes GSSAPIAuthentication yes # Append to specify identity file IdentityFile ~/.ssh/id_ed25519 '192.168.0.2' \uc811\uc18d \uc2dc, -i \uc5c6\uc774 \uc811\uc18d bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 ssh ${SSH_USER}@${SSH_REMOTE}","title":"SSH login with public key"},{"location":"tips/linux/","text":"Tips Change the Username Test on Ubuntu 16.04 # sudo passwd root # if any usermod -l newname -d /home/ newname -m oldname groupmod -n newgroup oldgroup # passwd -l root # lock root account example # newname, newgroup=jgseong # oldname, oldgroup=ubuntu usermod -l jgseong -d /home/jgseong -m ubuntu groupmod -n jgseong ubuntu Install system tray icon on elementary OS Juno Juno \ub294 elementary OS 5.0 \uc758 GUI. \uae30\ubcf8\uc801\uc73c\ub85c system tray icon\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c About system tray icons. In release-juno , elementaryOS dropped the support of the old Ayatana Indicators (refer to StackExchange ) Ayanata Indicators \uc124\uce58 \ubc0f \uc124\uc815 sudo add-apt-repository -y ppa:yunnxx/elementary sudo apt update sudo apt install -y indicator-application wingpanel-indicator-ayatana sudo sed -i 's/OnlyShowIn=.*;/OnlyShowIn=Pantheon;/' /etc/xdg/autostart/indicator-application.desktop # Alternatively, run 'sudo vim /etc/xdg/autostart/indicator-application.desktop' to edit file sudo systemctl restart lightdm.service # Or restart system. visudo sudo \uad8c\ud55c \ubc0f \ub3d9\uc791 \uc124\uc815 sudo visudo /etc/sudoer \ud30c\uc77c \ud3b8\uc9d1(\ubb38\ubc95 \uac80\uc0ac, \uc800\uc7a5 \uac00\ub2a5) vim\uc73c\ub85c \ud3b8\uc9d1 \uc2dc sudo EDITOR=vim visudo (default: nano) /etc/sudoers.d \uc5d0 \uc124\uc815 \ud30c\uc77c \uc0dd\uc131 \ud6c4, includedir /etc/sudoers.d \uc0ac\uc6a9 \uac00\ub2a5 Default settings (on Ubuntu 16.04) {% code-tabs %} {% code-tabs-item title=\"/etc/sudoer\" %} # # This file MUST be edited with the 'visudo' command as root. # # Please consider adding local content in /etc/sudoers.d/ instead of # directly modifying this file. # # See the man page for details on how to write a sudoers file. # Defaults env_reset Defaults mail_badpass Defaults secure_path= /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin # Host alias specification # User alias specification # Cmnd alias specification # User privilege specification root ALL=(ALL:ALL) ALL # Members of the admin group may gain root privileges %admin ALL=(ALL) ALL # Allow members of group sudo to execute any command %sudo ALL=(ALL:ALL) ALL # See sudoers(5) for more information on #include directives: #includedir /etc/sudoers.d {% endcode-tabs-item %} {% endcode-tabs %} no-password for user jgseong ALL=(ALL:ALL) NOPASSWD:ALL no-password for group %wheel ALL=(ALL) NOPASSWD:ALL On terminal sudo addgroup wheel sudo addgroup ${USER} wheel Fix perl warning about the locale failed \uac04\ud639 \uc6b0\ubd84\ud22c \uc124\uce58 \ud6c4 \ubc1c\uc0dd\ud558\ub294 \uc5d0\ub7ec perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_PAPER = ko_KR.UTF-8 , LC_ADDRESS = ko_KR.UTF-8 , LC_MONETARY = ko_KR.UTF-8 , LC_NUMERIC = ko_KR.UTF-8 , LC_TELEPHONE = ko_KR.UTF-8 , LC_IDENTIFICATION = ko_KR.UTF-8 , LC_MEASUREMENT = ko_KR.UTF-8 , LC_TIME = ko_KR.UTF-8 , LC_NAME = ko_KR.UTF-8 , LANG = en_US.UTF-8 are supported and installed on your system. perl: warning: Falling back to a fallback locale ( en_US.UTF-8 ). sudo locale-gen sudo dpkg-reconfigure locales # locale \uc124\uc815 \ud6c4 OK, e.g) en_US.UTF-8 Generating locales (this might take a while)... en_AG.UTF-8... done en_AU.UTF-8... done en_BW.UTF-8... done en_CA.UTF-8... done en_DK.UTF-8... done en_GB.UTF-8... done en_HK.UTF-8... done en_IE.UTF-8... done en_IN.UTF-8... done en_NG.UTF-8... done en_NZ.UTF-8... done en_PH.UTF-8... done en_SG.UTF-8... done en_US.UTF-8... done en_ZA.UTF-8... done en_ZM.UTF-8... done en_ZW.UTF-8... done ko_KR.EUC-KR... done ko_KR.UTF-8... done Generation complete. SSH login with public key \uacf5\uac1c\ud0a4\ub97c \uc774\uc6a9\ud55c \ub85c\uadf8\uc778 (at client side) SSH \ud0a4\uc30d \uc0dd\uc131 ```bash ssh-keygen -c ed25519 -N '' -C '' -f ~/.ssh/id_ed25519 # -N : New passphrase, no encryption if empty. # -C : Comment, in public key file(.pub) # -f : specify a file(output) # -c : cipher type, ' rsa | dsa | ecdsa | ed25519 ' ``` SSH \uacf5\uac1c \ud0a4 \ubcf5\uc0ac bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 cat ~/.ssh/id_ed25519.pub | ssh -t ${SSH_USER}@${SSH_REMOTE} 'tee -a ~/.ssh/authorized_keys' SSH \uc811\uc18d -i \uc635\uc158\uc73c\ub85c \ud0a4 \uc9c0\uc815 bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 ssh -i ~/.ssh/id_ed25519 ${SSH_USER}@${SSH_REMOTE} config \ud30c\uc77c \uc124\uc815 ~/.ssh/config bash Host 192.168.0.2 # 2 options to ignore host key check # UserKnownHostsFile /dev/null # StrictHostKeyChecking no SendEnv LANG LC_* HashKnownHosts yes GSSAPIAuthentication yes # Append to specify identity file IdentityFile ~/.ssh/id_ed25519 '192.168.0.2' \uc811\uc18d \uc2dc, -i \uc5c6\uc774 \uc811\uc18d bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 ssh ${SSH_USER}@${SSH_REMOTE} MBR \uc81c\uac70 Windows HxD \uc2e4\ud589 - HxD \ub2e4\uc6b4\ub85c\ub4dc \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \uc2e4\ud589 \ub514\uc2a4\ud06c \uc5f4\uae30 (\uae30\ud0c0\uc124\uc815 - \ub514\uc2a4\ud06c \uc5f4\uae30) \uc77d\uae30 \uc804\uc6a9\uc73c\ub85c \uc77d\uae30 \uccb4\ud06c\ubc15\uc2a4 \ud574\uc81c - \ubb3c\ub9ac\ub514\uc2a4\ud06c - \ud574\ub2f9 \ub514\uc2a4\ud06c \uc120\ud0dd \ub514\uc2a4\ud06c \uc218\uc815\uc5d0 \ub300\ud55c \uacbd\uace0 \ud31d\uc5c5 - '\uc218\ub77d' \ube14\ub85d \uc120\ud0dd (\ud3b8\uc9d1 - \ube14\ub85d \uc120\ud0dd, Ctrl+E) '10\uc9c4\uc218' \uc120\ud0dd \uc624\ud504\uc14b \uc2dc\uc791 0, \uae38\uc774 446 0x00000000 ~ 0x000001BD (446 Bytes) : MBR \uc601\uc5ed '\uc218\ub77d' \uc120\ud0dd \ucc44\uc6b0\uae30 (\ud3b8\uc9d1 - \uc120\ud0dd \ucc44\uc6b0\uae30) \ud504\ub9ac\uc14b \uc0ad\uc81c \ubc29\ubc95 - \uc81c\ub85c\ubc14\uc774\ud2b8 '\uc218\ub77d' \uc800\uc7a5 (\ud30c\uc77c - \uc800\uc7a5, Ctrl+S) \ud30c\ud2f0\uc158\uc758 \ubd80\ud305 \uac00\ub2a5 \uc18d\uc131 \uc81c\uac70 '\uba85\ub839 \ud504\ub86c\ud504\ud2b8' \uc2e4\ud589(\uad00\ub9ac\uc790 \uad8c\ud55c) diskpart \uc2e4\ud589 \uc608\uc2dc) \ub514\uc2a4\ud06c 3 \uc758 1\ubc88 \ud30c\ud2f0\uc158\uc774 \ubd80\ud305 \uac00\ub2a5 \uc18d\uc131\uc744 \uc81c\uac70\ud560 \uacbd\uc6b0. C:\\Windows\\system32 diskpart Microsoft DiskPart \ubc84\uc804 10.0.17134.1 Copyright (C) Microsoft Corporation. \ucef4\ud4e8\ud130: DISKPART list disk \ub514\uc2a4\ud06c ### \uc0c1\ud0dc \ud06c\uae30 \uc0ac\uc6a9 \uac00\ub2a5 Dyn Gpt ---------- ------------- ------- ------------ --- --- \ub514\uc2a4\ud06c 0 \uc628\ub77c\uc778 465 GB 0 B \ub514\uc2a4\ud06c 1 \uc628\ub77c\uc778 119 GB 1024 KB \ub514\uc2a4\ud06c 2 \uc628\ub77c\uc778 59 GB 2048 KB \ub514\uc2a4\ud06c 3 \uc628\ub77c\uc778 14 GB 0 B DISKPART select disk 3 3 \ub514\uc2a4\ud06c\uac00 \uc120\ud0dd\ud55c \ub514\uc2a4\ud06c\uc785\ub2c8\ub2e4. DISKPART list partition \ud30c\ud2f0\uc158 ### \uc885\ub958 \ud06c\uae30 \uc624\ud504\uc14b ---------- ---------------- ------- ------- \ud30c\ud2f0\uc158 1 \uc8fc 14 GB 1024 KB DISKPART select partition 1 1 \ud30c\ud2f0\uc158\uc774 \uc120\ud0dd\ud55c \ud30c\ud2f0\uc158\uc785\ub2c8\ub2e4. DISKPART inactive DiskPart\uc5d0\uc11c \ud604\uc7ac \ud30c\ud2f0\uc158\uc744 \ube44\ud65c\uc131\uc744 \ud45c\uc2dc\ud588\uc2b5\ub2c8\ub2e4. DISKPART exit DiskPart \ub9c8\uce58\ub294 \uc911... Linux fdisk \ub610\ub294 disk \uad00\ub828 \uc720\ud2f8\uc744 \ud1b5\ud574 \ud574\ub2f9 \ub514\uc2a4\ud06c\uc758 \uc7a5\uce58 \ud30c\uc77c\uc744 \ud30c\uc545 Example) /dev/sda sudo dd if=/dev/zero of=/dev/sda bs=446 count=1 MBR \uc601\uc5ed\uc744 0\uc73c\ub85c \ucc44\uc6c0 bs(block size), count : bs \ud06c\uae30\ub97c count \ub9cc\ud07c \uc218\ud589 NTFS mount error the disk contains an unclean file system (0 0) ... \ud558\uba74\uc11c, \uc5b4\uca4c\uace0 \uc800\uca4c\uace0 \uc5d0\ub7ec \ub0a0\ub54c \ub4c0\uc5bc \ubd80\ud305 \ub610\ub294 MBR\uc744 \uc798\ubabb \uac74\ub4e4\uc600\uc744 \ub54c, \ub098\ud0c0\ub098\ub294 \uc99d\uc0c1 \ub0b4 \ud658\uacbd : Grub2(sdb1) - Windows10(sdb2), Linux Mint 18.3(sdc*), NTFS-HDD(sda1) \ubcf4\ud1b5 ntfsfix\ub85c \ud574\uacb0 \uac00\ub2a5 ntfs HDD dev \ud30c\uc77c\uc774 /dev/sda1\uc778 \uacbd\uc6b0 sudo ntfsfix /dev/sda1 output example $ sudo ntfsfix /dev/sda1 Mounting volume... The disk contains an unclean file system (0, 0). Metadata kept in Windows cache, refused to mount. FAILED Attempting to correct errors... Processing $MFT and $MFTMirr... Reading $MFT... OK Reading $MFTMirr... OK Comparing $MFTMirr to $MFT... OK Processing of $MFT and $MFTMirr completed successfully. Setting required flags on partition... OK Going to empty the journal ($LogFile)... OK Checking the alternate boot sector... OK NTFS volume version is 3.1. NTFS partition /dev/sda1 was processed successfully. $ grub-customizer GUI tools for GRUB bootloader sudo add-apt-repository ppa:danielrichter2007/grub-customizer sudo apt-get update sudo apt-get install grub-customizer ```# SSH connection by public key authentication ## Generate key pair by `ssh-keygen` at the client machine ```bash # refer to `man ssh-keygen`, `ssh-keygen --help` ssh-keygen -t ed25519 -b 512 -f ~/.ssh/jgseong7@naver.com -C jgseong7@naver.com # -t : public key cipher type # -b : key length in bit # -f : output file # -C : comment for key #@note: to encrypt key file, input a passphrase. if empty passphrase, then the private key file would be written as cleartext. #@note: the file names and private key comments can be arbitrary. Check key pair $ ls ~/.ssh/ authorized_keys jgseong7@naver.com jgseong7@naver.com.pub # authorized_keys : a file for public key authentication (may be not existed) # jgseong7@naver.com : private key generated by previous step. # jgseong7@naver.com.pub : public key generated by previous step. typically, the file name is followed by the suffix '.pub'. Copy the public key to server do follows at client side. # copy a file contents in 'jgseong7@naver.com.pub' and write it to 'authorized_keys' file by ssh and tee cat ~/.ssh/jgseong7@naver.com.pub | ssh -t ubuntu@172.16.99.17 'tee -a ~/.ssh/authorized_keys' # in alternative way, copy the public key file and write it to 'authorized_keys' file by scp and ssh scp ~/.ssh/jgseong7@naver.com.pub ubuntu@172.16.99.17: ssh ubuntu@172.16.99.17 'cat jgseong7@naver.com.pub ~/.ssh/authorized_keys' ssh ubuntu@172.16.99.17 'rm jgseong7@naver.com.pub' Check sshd_config and restart sshd # '/etc/ssh/sshd_config' in default on ubuntu 16.04 LTS cat /etc/ssh/sshd_config | grep -E 'PubkeyAuthentication`|RSAAuthentication' # check PubkeyAuthentication yes # check RSAAuthentication yes # for RSA public key cat /etc/ssh/sshd_config | grep -E 'AuthorizedKeysFile' # check 'AuthorizedKeysFile %h/.ssh/authorized_keys' or '#AuthorizedKeysFile %h/.ssh/authorized_keys' # default authorizedKyesFile path is '%h/.ssh/authorized_keys' # Restart ssh daemons sudo systemctl restart sshd Connect SSH by pubkey # -i : specify a identity file. (a.k.a. private key) ssh -i ~/.ssh/jgseong7@naver.com ubuntu@172.16.99.17 # identity file could be specifable in `ssh_config` # check 'IdentityFile' cat .ssh/config # refter to `man ssh` !-- TITLE: Vim-- !-- SUBTITLE: Editor Vim \uc758 \ud65c\uc6a9/\uc124\uc815 -- # \uc790\ub3d9\uac1c\ud589\ubb38\uc790 \uc0bd\uc785 disable * \uba85\ub839 \ubaa8\ub4dc\uc5d0\uc11c ```vim :set binary :set noeol \\\"\ub294 .vimrc \ud30c\uc77c\uc5d0\uc11c \ud574\ub2f9 \uc904(line)\uc774 \uc8fc\uc11d. vimrc \uc124\uc815( ~/.vimrc ) ~/.vimrc set binary set noeol Windows 10 Portable program, \uac80\uc0c9 \ubc14\uc5d0 \ub098\uc624\uac8c \ud558\uae30 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs \uc5d0 portable \ud504\ub85c\uadf8\ub7a8\uc758 \ubc14\ub85c\uac00\uae30 \ubcf5\uc0ac. \uc2dc\uc791 \uba54\ub274-\ud504\ub85c\uadf8\ub7a8 \ud3f4\ub354 \ud0a4 \ub85c \uac80\uc0c9 \uac00\ub2a5 \uc0ac\uc6a9\uc790 \uacc4\uc815\uc73c\ub85c wireshark \uc2e4\ud589 dumpcap \ud30c\uc77c\uc758 \uc18c\uc720 \uadf8\ub8f9\uacfc \uadf8\ub8f9 \uc2e4\ud589 \uad8c\ud55c \ud655\uc778 which dumpcap \uc73c\ub85c \uacbd\ub85c \ud655\uc778 \uac00\ub2a5 'wireshark' \uadf8\ub8f9\uc5d0 \ud604\uc7ac \uc0ac\uc6a9\uc790 \ucd94\uac00 sudo usermod -a -G wireshark $USER output example # dumpcap \ud30c\uc77c\uc758 \uc18c\uc720 \uadf8\ub8f9\uacfc \uadf8\ub8f9 \uc2e4\ud589 \uad8c\ud55c \ud655\uc778 ls /usr/bin/dumpcap -l # or 'ls -l $(which dumpcap)' -rwxr-xr-- 1 root wireshark 96464 Jun 1 2017 /usr/bin/dumpcap* sudo usermod -a -G wireshark $USER reboot # or logout/re-login","title":"Linux"},{"location":"tips/linux/#tips","text":"","title":"Tips"},{"location":"tips/linux/#change-the-username","text":"Test on Ubuntu 16.04 # sudo passwd root # if any usermod -l newname -d /home/ newname -m oldname groupmod -n newgroup oldgroup # passwd -l root # lock root account example # newname, newgroup=jgseong # oldname, oldgroup=ubuntu usermod -l jgseong -d /home/jgseong -m ubuntu groupmod -n jgseong ubuntu","title":"Change the Username"},{"location":"tips/linux/#install-system-tray-icon-on-elementary-os-juno","text":"Juno \ub294 elementary OS 5.0 \uc758 GUI. \uae30\ubcf8\uc801\uc73c\ub85c system tray icon\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c About system tray icons. In release-juno , elementaryOS dropped the support of the old Ayatana Indicators (refer to StackExchange ) Ayanata Indicators \uc124\uce58 \ubc0f \uc124\uc815 sudo add-apt-repository -y ppa:yunnxx/elementary sudo apt update sudo apt install -y indicator-application wingpanel-indicator-ayatana sudo sed -i 's/OnlyShowIn=.*;/OnlyShowIn=Pantheon;/' /etc/xdg/autostart/indicator-application.desktop # Alternatively, run 'sudo vim /etc/xdg/autostart/indicator-application.desktop' to edit file sudo systemctl restart lightdm.service # Or restart system.","title":"Install system tray icon on elementary OS Juno"},{"location":"tips/linux/#visudo","text":"sudo \uad8c\ud55c \ubc0f \ub3d9\uc791 \uc124\uc815 sudo visudo /etc/sudoer \ud30c\uc77c \ud3b8\uc9d1(\ubb38\ubc95 \uac80\uc0ac, \uc800\uc7a5 \uac00\ub2a5) vim\uc73c\ub85c \ud3b8\uc9d1 \uc2dc sudo EDITOR=vim visudo (default: nano) /etc/sudoers.d \uc5d0 \uc124\uc815 \ud30c\uc77c \uc0dd\uc131 \ud6c4, includedir /etc/sudoers.d \uc0ac\uc6a9 \uac00\ub2a5","title":"visudo"},{"location":"tips/linux/#default-settings-40on-ubuntu-160441","text":"{% code-tabs %} {% code-tabs-item title=\"/etc/sudoer\" %} # # This file MUST be edited with the 'visudo' command as root. # # Please consider adding local content in /etc/sudoers.d/ instead of # directly modifying this file. # # See the man page for details on how to write a sudoers file. # Defaults env_reset Defaults mail_badpass Defaults secure_path= /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin # Host alias specification # User alias specification # Cmnd alias specification # User privilege specification root ALL=(ALL:ALL) ALL # Members of the admin group may gain root privileges %admin ALL=(ALL) ALL # Allow members of group sudo to execute any command %sudo ALL=(ALL:ALL) ALL # See sudoers(5) for more information on #include directives: #includedir /etc/sudoers.d {% endcode-tabs-item %} {% endcode-tabs %}","title":"Default settings (on Ubuntu 16.04)"},{"location":"tips/linux/#no-password-for-user","text":"jgseong ALL=(ALL:ALL) NOPASSWD:ALL","title":"no-password for user"},{"location":"tips/linux/#no-password-for-group","text":"%wheel ALL=(ALL) NOPASSWD:ALL On terminal sudo addgroup wheel sudo addgroup ${USER} wheel","title":"no-password for group"},{"location":"tips/linux/#fix-perl-warning-about-the-locale-failed","text":"\uac04\ud639 \uc6b0\ubd84\ud22c \uc124\uce58 \ud6c4 \ubc1c\uc0dd\ud558\ub294 \uc5d0\ub7ec perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_PAPER = ko_KR.UTF-8 , LC_ADDRESS = ko_KR.UTF-8 , LC_MONETARY = ko_KR.UTF-8 , LC_NUMERIC = ko_KR.UTF-8 , LC_TELEPHONE = ko_KR.UTF-8 , LC_IDENTIFICATION = ko_KR.UTF-8 , LC_MEASUREMENT = ko_KR.UTF-8 , LC_TIME = ko_KR.UTF-8 , LC_NAME = ko_KR.UTF-8 , LANG = en_US.UTF-8 are supported and installed on your system. perl: warning: Falling back to a fallback locale ( en_US.UTF-8 ). sudo locale-gen sudo dpkg-reconfigure locales # locale \uc124\uc815 \ud6c4 OK, e.g) en_US.UTF-8 Generating locales (this might take a while)... en_AG.UTF-8... done en_AU.UTF-8... done en_BW.UTF-8... done en_CA.UTF-8... done en_DK.UTF-8... done en_GB.UTF-8... done en_HK.UTF-8... done en_IE.UTF-8... done en_IN.UTF-8... done en_NG.UTF-8... done en_NZ.UTF-8... done en_PH.UTF-8... done en_SG.UTF-8... done en_US.UTF-8... done en_ZA.UTF-8... done en_ZM.UTF-8... done en_ZW.UTF-8... done ko_KR.EUC-KR... done ko_KR.UTF-8... done Generation complete.","title":"Fix perl warning about the locale failed"},{"location":"tips/linux/#ssh-login-with-public-key","text":"\uacf5\uac1c\ud0a4\ub97c \uc774\uc6a9\ud55c \ub85c\uadf8\uc778 (at client side) SSH \ud0a4\uc30d \uc0dd\uc131 ```bash ssh-keygen -c ed25519 -N '' -C '' -f ~/.ssh/id_ed25519 # -N : New passphrase, no encryption if empty. # -C : Comment, in public key file(.pub) # -f : specify a file(output) # -c : cipher type, ' rsa | dsa | ecdsa | ed25519 ' ``` SSH \uacf5\uac1c \ud0a4 \ubcf5\uc0ac bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 cat ~/.ssh/id_ed25519.pub | ssh -t ${SSH_USER}@${SSH_REMOTE} 'tee -a ~/.ssh/authorized_keys' SSH \uc811\uc18d -i \uc635\uc158\uc73c\ub85c \ud0a4 \uc9c0\uc815 bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 ssh -i ~/.ssh/id_ed25519 ${SSH_USER}@${SSH_REMOTE} config \ud30c\uc77c \uc124\uc815 ~/.ssh/config bash Host 192.168.0.2 # 2 options to ignore host key check # UserKnownHostsFile /dev/null # StrictHostKeyChecking no SendEnv LANG LC_* HashKnownHosts yes GSSAPIAuthentication yes # Append to specify identity file IdentityFile ~/.ssh/id_ed25519 '192.168.0.2' \uc811\uc18d \uc2dc, -i \uc5c6\uc774 \uc811\uc18d bash SSH_USER=jgseong SSH_REMOTE=192.168.0.2 ssh ${SSH_USER}@${SSH_REMOTE}","title":"SSH login with public key"},{"location":"tips/linux/#mbr","text":"","title":"MBR \uc81c\uac70"},{"location":"tips/linux/#windows","text":"HxD \uc2e4\ud589 - HxD \ub2e4\uc6b4\ub85c\ub4dc \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \uc2e4\ud589 \ub514\uc2a4\ud06c \uc5f4\uae30 (\uae30\ud0c0\uc124\uc815 - \ub514\uc2a4\ud06c \uc5f4\uae30) \uc77d\uae30 \uc804\uc6a9\uc73c\ub85c \uc77d\uae30 \uccb4\ud06c\ubc15\uc2a4 \ud574\uc81c - \ubb3c\ub9ac\ub514\uc2a4\ud06c - \ud574\ub2f9 \ub514\uc2a4\ud06c \uc120\ud0dd \ub514\uc2a4\ud06c \uc218\uc815\uc5d0 \ub300\ud55c \uacbd\uace0 \ud31d\uc5c5 - '\uc218\ub77d' \ube14\ub85d \uc120\ud0dd (\ud3b8\uc9d1 - \ube14\ub85d \uc120\ud0dd, Ctrl+E) '10\uc9c4\uc218' \uc120\ud0dd \uc624\ud504\uc14b \uc2dc\uc791 0, \uae38\uc774 446 0x00000000 ~ 0x000001BD (446 Bytes) : MBR \uc601\uc5ed '\uc218\ub77d' \uc120\ud0dd \ucc44\uc6b0\uae30 (\ud3b8\uc9d1 - \uc120\ud0dd \ucc44\uc6b0\uae30) \ud504\ub9ac\uc14b \uc0ad\uc81c \ubc29\ubc95 - \uc81c\ub85c\ubc14\uc774\ud2b8 '\uc218\ub77d' \uc800\uc7a5 (\ud30c\uc77c - \uc800\uc7a5, Ctrl+S) \ud30c\ud2f0\uc158\uc758 \ubd80\ud305 \uac00\ub2a5 \uc18d\uc131 \uc81c\uac70 '\uba85\ub839 \ud504\ub86c\ud504\ud2b8' \uc2e4\ud589(\uad00\ub9ac\uc790 \uad8c\ud55c) diskpart \uc2e4\ud589 \uc608\uc2dc) \ub514\uc2a4\ud06c 3 \uc758 1\ubc88 \ud30c\ud2f0\uc158\uc774 \ubd80\ud305 \uac00\ub2a5 \uc18d\uc131\uc744 \uc81c\uac70\ud560 \uacbd\uc6b0. C:\\Windows\\system32 diskpart Microsoft DiskPart \ubc84\uc804 10.0.17134.1 Copyright (C) Microsoft Corporation. \ucef4\ud4e8\ud130: DISKPART list disk \ub514\uc2a4\ud06c ### \uc0c1\ud0dc \ud06c\uae30 \uc0ac\uc6a9 \uac00\ub2a5 Dyn Gpt ---------- ------------- ------- ------------ --- --- \ub514\uc2a4\ud06c 0 \uc628\ub77c\uc778 465 GB 0 B \ub514\uc2a4\ud06c 1 \uc628\ub77c\uc778 119 GB 1024 KB \ub514\uc2a4\ud06c 2 \uc628\ub77c\uc778 59 GB 2048 KB \ub514\uc2a4\ud06c 3 \uc628\ub77c\uc778 14 GB 0 B DISKPART select disk 3 3 \ub514\uc2a4\ud06c\uac00 \uc120\ud0dd\ud55c \ub514\uc2a4\ud06c\uc785\ub2c8\ub2e4. DISKPART list partition \ud30c\ud2f0\uc158 ### \uc885\ub958 \ud06c\uae30 \uc624\ud504\uc14b ---------- ---------------- ------- ------- \ud30c\ud2f0\uc158 1 \uc8fc 14 GB 1024 KB DISKPART select partition 1 1 \ud30c\ud2f0\uc158\uc774 \uc120\ud0dd\ud55c \ud30c\ud2f0\uc158\uc785\ub2c8\ub2e4. DISKPART inactive DiskPart\uc5d0\uc11c \ud604\uc7ac \ud30c\ud2f0\uc158\uc744 \ube44\ud65c\uc131\uc744 \ud45c\uc2dc\ud588\uc2b5\ub2c8\ub2e4. DISKPART exit DiskPart \ub9c8\uce58\ub294 \uc911...","title":"Windows"},{"location":"tips/linux/#linux","text":"fdisk \ub610\ub294 disk \uad00\ub828 \uc720\ud2f8\uc744 \ud1b5\ud574 \ud574\ub2f9 \ub514\uc2a4\ud06c\uc758 \uc7a5\uce58 \ud30c\uc77c\uc744 \ud30c\uc545 Example) /dev/sda sudo dd if=/dev/zero of=/dev/sda bs=446 count=1 MBR \uc601\uc5ed\uc744 0\uc73c\ub85c \ucc44\uc6c0 bs(block size), count : bs \ud06c\uae30\ub97c count \ub9cc\ud07c \uc218\ud589","title":"Linux"},{"location":"tips/linux/#ntfs-mount-error","text":"the disk contains an unclean file system (0 0) ... \ud558\uba74\uc11c, \uc5b4\uca4c\uace0 \uc800\uca4c\uace0 \uc5d0\ub7ec \ub0a0\ub54c \ub4c0\uc5bc \ubd80\ud305 \ub610\ub294 MBR\uc744 \uc798\ubabb \uac74\ub4e4\uc600\uc744 \ub54c, \ub098\ud0c0\ub098\ub294 \uc99d\uc0c1 \ub0b4 \ud658\uacbd : Grub2(sdb1) - Windows10(sdb2), Linux Mint 18.3(sdc*), NTFS-HDD(sda1) \ubcf4\ud1b5 ntfsfix\ub85c \ud574\uacb0 \uac00\ub2a5 ntfs HDD dev \ud30c\uc77c\uc774 /dev/sda1\uc778 \uacbd\uc6b0 sudo ntfsfix /dev/sda1 output example $ sudo ntfsfix /dev/sda1 Mounting volume... The disk contains an unclean file system (0, 0). Metadata kept in Windows cache, refused to mount. FAILED Attempting to correct errors... Processing $MFT and $MFTMirr... Reading $MFT... OK Reading $MFTMirr... OK Comparing $MFTMirr to $MFT... OK Processing of $MFT and $MFTMirr completed successfully. Setting required flags on partition... OK Going to empty the journal ($LogFile)... OK Checking the alternate boot sector... OK NTFS volume version is 3.1. NTFS partition /dev/sda1 was processed successfully. $","title":"NTFS mount error"},{"location":"tips/linux/#grub-customizer","text":"GUI tools for GRUB bootloader sudo add-apt-repository ppa:danielrichter2007/grub-customizer sudo apt-get update sudo apt-get install grub-customizer ```# SSH connection by public key authentication ## Generate key pair by `ssh-keygen` at the client machine ```bash # refer to `man ssh-keygen`, `ssh-keygen --help` ssh-keygen -t ed25519 -b 512 -f ~/.ssh/jgseong7@naver.com -C jgseong7@naver.com # -t : public key cipher type # -b : key length in bit # -f : output file # -C : comment for key #@note: to encrypt key file, input a passphrase. if empty passphrase, then the private key file would be written as cleartext. #@note: the file names and private key comments can be arbitrary.","title":"grub-customizer"},{"location":"tips/linux/#check-key-pair","text":"$ ls ~/.ssh/ authorized_keys jgseong7@naver.com jgseong7@naver.com.pub # authorized_keys : a file for public key authentication (may be not existed) # jgseong7@naver.com : private key generated by previous step. # jgseong7@naver.com.pub : public key generated by previous step. typically, the file name is followed by the suffix '.pub'.","title":"Check key pair"},{"location":"tips/linux/#copy-the-public-key-to-server","text":"do follows at client side. # copy a file contents in 'jgseong7@naver.com.pub' and write it to 'authorized_keys' file by ssh and tee cat ~/.ssh/jgseong7@naver.com.pub | ssh -t ubuntu@172.16.99.17 'tee -a ~/.ssh/authorized_keys' # in alternative way, copy the public key file and write it to 'authorized_keys' file by scp and ssh scp ~/.ssh/jgseong7@naver.com.pub ubuntu@172.16.99.17: ssh ubuntu@172.16.99.17 'cat jgseong7@naver.com.pub ~/.ssh/authorized_keys' ssh ubuntu@172.16.99.17 'rm jgseong7@naver.com.pub'","title":"Copy the public key to server"},{"location":"tips/linux/#check-sshd_config-and-restart-sshd","text":"# '/etc/ssh/sshd_config' in default on ubuntu 16.04 LTS cat /etc/ssh/sshd_config | grep -E 'PubkeyAuthentication`|RSAAuthentication' # check PubkeyAuthentication yes # check RSAAuthentication yes # for RSA public key cat /etc/ssh/sshd_config | grep -E 'AuthorizedKeysFile' # check 'AuthorizedKeysFile %h/.ssh/authorized_keys' or '#AuthorizedKeysFile %h/.ssh/authorized_keys' # default authorizedKyesFile path is '%h/.ssh/authorized_keys' # Restart ssh daemons sudo systemctl restart sshd","title":"Check sshd_config and restart sshd"},{"location":"tips/linux/#connect-ssh-by-pubkey","text":"# -i : specify a identity file. (a.k.a. private key) ssh -i ~/.ssh/jgseong7@naver.com ubuntu@172.16.99.17 # identity file could be specifable in `ssh_config` # check 'IdentityFile' cat .ssh/config # refter to `man ssh` !-- TITLE: Vim-- !-- SUBTITLE: Editor Vim \uc758 \ud65c\uc6a9/\uc124\uc815 -- # \uc790\ub3d9\uac1c\ud589\ubb38\uc790 \uc0bd\uc785 disable * \uba85\ub839 \ubaa8\ub4dc\uc5d0\uc11c ```vim :set binary :set noeol \\\"\ub294 .vimrc \ud30c\uc77c\uc5d0\uc11c \ud574\ub2f9 \uc904(line)\uc774 \uc8fc\uc11d. vimrc \uc124\uc815( ~/.vimrc ) ~/.vimrc set binary set noeol","title":"Connect SSH by pubkey"},{"location":"tips/linux/#windows-10","text":"","title":"Windows 10"},{"location":"tips/linux/#portable-program","text":"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs \uc5d0 portable \ud504\ub85c\uadf8\ub7a8\uc758 \ubc14\ub85c\uac00\uae30 \ubcf5\uc0ac. \uc2dc\uc791 \uba54\ub274-\ud504\ub85c\uadf8\ub7a8 \ud3f4\ub354 \ud0a4 \ub85c \uac80\uc0c9 \uac00\ub2a5","title":"Portable program, \uac80\uc0c9 \ubc14\uc5d0 \ub098\uc624\uac8c \ud558\uae30"},{"location":"tips/linux/#wireshark","text":"dumpcap \ud30c\uc77c\uc758 \uc18c\uc720 \uadf8\ub8f9\uacfc \uadf8\ub8f9 \uc2e4\ud589 \uad8c\ud55c \ud655\uc778 which dumpcap \uc73c\ub85c \uacbd\ub85c \ud655\uc778 \uac00\ub2a5 'wireshark' \uadf8\ub8f9\uc5d0 \ud604\uc7ac \uc0ac\uc6a9\uc790 \ucd94\uac00 sudo usermod -a -G wireshark $USER output example # dumpcap \ud30c\uc77c\uc758 \uc18c\uc720 \uadf8\ub8f9\uacfc \uadf8\ub8f9 \uc2e4\ud589 \uad8c\ud55c \ud655\uc778 ls /usr/bin/dumpcap -l # or 'ls -l $(which dumpcap)' -rwxr-xr-- 1 root wireshark 96464 Jun 1 2017 /usr/bin/dumpcap* sudo usermod -a -G wireshark $USER reboot # or logout/re-login","title":"\uc0ac\uc6a9\uc790 \uacc4\uc815\uc73c\ub85c wireshark \uc2e4\ud589"},{"location":"tips/mbr/","text":"MBR \uc81c\uac70 Windows HxD \uc2e4\ud589 - HxD \ub2e4\uc6b4\ub85c\ub4dc \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \uc2e4\ud589 \ub514\uc2a4\ud06c \uc5f4\uae30 (\uae30\ud0c0\uc124\uc815 - \ub514\uc2a4\ud06c \uc5f4\uae30) \uc77d\uae30 \uc804\uc6a9\uc73c\ub85c \uc77d\uae30 \uccb4\ud06c\ubc15\uc2a4 \ud574\uc81c - \ubb3c\ub9ac\ub514\uc2a4\ud06c - \ud574\ub2f9 \ub514\uc2a4\ud06c \uc120\ud0dd \ub514\uc2a4\ud06c \uc218\uc815\uc5d0 \ub300\ud55c \uacbd\uace0 \ud31d\uc5c5 - '\uc218\ub77d' \ube14\ub85d \uc120\ud0dd (\ud3b8\uc9d1 - \ube14\ub85d \uc120\ud0dd, Ctrl+E) '10\uc9c4\uc218' \uc120\ud0dd \uc624\ud504\uc14b \uc2dc\uc791 0, \uae38\uc774 446 0x00000000 ~ 0x000001BD (446 Bytes) : MBR \uc601\uc5ed '\uc218\ub77d' \uc120\ud0dd \ucc44\uc6b0\uae30 (\ud3b8\uc9d1 - \uc120\ud0dd \ucc44\uc6b0\uae30) \ud504\ub9ac\uc14b \uc0ad\uc81c \ubc29\ubc95 - \uc81c\ub85c\ubc14\uc774\ud2b8 '\uc218\ub77d' \uc800\uc7a5 (\ud30c\uc77c - \uc800\uc7a5, Ctrl+S) \ud30c\ud2f0\uc158\uc758 \ubd80\ud305 \uac00\ub2a5 \uc18d\uc131 \uc81c\uac70 '\uba85\ub839 \ud504\ub86c\ud504\ud2b8' \uc2e4\ud589(\uad00\ub9ac\uc790 \uad8c\ud55c) diskpart \uc2e4\ud589 \uc608\uc2dc) \ub514\uc2a4\ud06c 3 \uc758 1\ubc88 \ud30c\ud2f0\uc158\uc774 \ubd80\ud305 \uac00\ub2a5 \uc18d\uc131\uc744 \uc81c\uac70\ud560 \uacbd\uc6b0. C:\\Windows\\system32 diskpart Microsoft DiskPart \ubc84\uc804 10.0.17134.1 Copyright (C) Microsoft Corporation. \ucef4\ud4e8\ud130: DISKPART list disk \ub514\uc2a4\ud06c ### \uc0c1\ud0dc \ud06c\uae30 \uc0ac\uc6a9 \uac00\ub2a5 Dyn Gpt ---------- ------------- ------- ------------ --- --- \ub514\uc2a4\ud06c 0 \uc628\ub77c\uc778 465 GB 0 B \ub514\uc2a4\ud06c 1 \uc628\ub77c\uc778 119 GB 1024 KB \ub514\uc2a4\ud06c 2 \uc628\ub77c\uc778 59 GB 2048 KB \ub514\uc2a4\ud06c 3 \uc628\ub77c\uc778 14 GB 0 B DISKPART select disk 3 3 \ub514\uc2a4\ud06c\uac00 \uc120\ud0dd\ud55c \ub514\uc2a4\ud06c\uc785\ub2c8\ub2e4. DISKPART list partition \ud30c\ud2f0\uc158 ### \uc885\ub958 \ud06c\uae30 \uc624\ud504\uc14b ---------- ---------------- ------- ------- \ud30c\ud2f0\uc158 1 \uc8fc 14 GB 1024 KB DISKPART select partition 1 1 \ud30c\ud2f0\uc158\uc774 \uc120\ud0dd\ud55c \ud30c\ud2f0\uc158\uc785\ub2c8\ub2e4. DISKPART inactive DiskPart\uc5d0\uc11c \ud604\uc7ac \ud30c\ud2f0\uc158\uc744 \ube44\ud65c\uc131\uc744 \ud45c\uc2dc\ud588\uc2b5\ub2c8\ub2e4. DISKPART exit DiskPart \ub9c8\uce58\ub294 \uc911... Linux fdisk \ub610\ub294 disk \uad00\ub828 \uc720\ud2f8\uc744 \ud1b5\ud574 \ud574\ub2f9 \ub514\uc2a4\ud06c\uc758 \uc7a5\uce58 \ud30c\uc77c\uc744 \ud30c\uc545 Example) /dev/sda sudo dd if=/dev/zero of=/dev/sda bs=446 count=1 MBR \uc601\uc5ed\uc744 0\uc73c\ub85c \ucc44\uc6c0 bs(block size), count : bs \ud06c\uae30\ub97c count \ub9cc\ud07c \uc218\ud589","title":"Mbr"},{"location":"tips/mbr/#mbr","text":"","title":"MBR \uc81c\uac70"},{"location":"tips/mbr/#windows","text":"HxD \uc2e4\ud589 - HxD \ub2e4\uc6b4\ub85c\ub4dc \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \uc2e4\ud589 \ub514\uc2a4\ud06c \uc5f4\uae30 (\uae30\ud0c0\uc124\uc815 - \ub514\uc2a4\ud06c \uc5f4\uae30) \uc77d\uae30 \uc804\uc6a9\uc73c\ub85c \uc77d\uae30 \uccb4\ud06c\ubc15\uc2a4 \ud574\uc81c - \ubb3c\ub9ac\ub514\uc2a4\ud06c - \ud574\ub2f9 \ub514\uc2a4\ud06c \uc120\ud0dd \ub514\uc2a4\ud06c \uc218\uc815\uc5d0 \ub300\ud55c \uacbd\uace0 \ud31d\uc5c5 - '\uc218\ub77d' \ube14\ub85d \uc120\ud0dd (\ud3b8\uc9d1 - \ube14\ub85d \uc120\ud0dd, Ctrl+E) '10\uc9c4\uc218' \uc120\ud0dd \uc624\ud504\uc14b \uc2dc\uc791 0, \uae38\uc774 446 0x00000000 ~ 0x000001BD (446 Bytes) : MBR \uc601\uc5ed '\uc218\ub77d' \uc120\ud0dd \ucc44\uc6b0\uae30 (\ud3b8\uc9d1 - \uc120\ud0dd \ucc44\uc6b0\uae30) \ud504\ub9ac\uc14b \uc0ad\uc81c \ubc29\ubc95 - \uc81c\ub85c\ubc14\uc774\ud2b8 '\uc218\ub77d' \uc800\uc7a5 (\ud30c\uc77c - \uc800\uc7a5, Ctrl+S) \ud30c\ud2f0\uc158\uc758 \ubd80\ud305 \uac00\ub2a5 \uc18d\uc131 \uc81c\uac70 '\uba85\ub839 \ud504\ub86c\ud504\ud2b8' \uc2e4\ud589(\uad00\ub9ac\uc790 \uad8c\ud55c) diskpart \uc2e4\ud589 \uc608\uc2dc) \ub514\uc2a4\ud06c 3 \uc758 1\ubc88 \ud30c\ud2f0\uc158\uc774 \ubd80\ud305 \uac00\ub2a5 \uc18d\uc131\uc744 \uc81c\uac70\ud560 \uacbd\uc6b0. C:\\Windows\\system32 diskpart Microsoft DiskPart \ubc84\uc804 10.0.17134.1 Copyright (C) Microsoft Corporation. \ucef4\ud4e8\ud130: DISKPART list disk \ub514\uc2a4\ud06c ### \uc0c1\ud0dc \ud06c\uae30 \uc0ac\uc6a9 \uac00\ub2a5 Dyn Gpt ---------- ------------- ------- ------------ --- --- \ub514\uc2a4\ud06c 0 \uc628\ub77c\uc778 465 GB 0 B \ub514\uc2a4\ud06c 1 \uc628\ub77c\uc778 119 GB 1024 KB \ub514\uc2a4\ud06c 2 \uc628\ub77c\uc778 59 GB 2048 KB \ub514\uc2a4\ud06c 3 \uc628\ub77c\uc778 14 GB 0 B DISKPART select disk 3 3 \ub514\uc2a4\ud06c\uac00 \uc120\ud0dd\ud55c \ub514\uc2a4\ud06c\uc785\ub2c8\ub2e4. DISKPART list partition \ud30c\ud2f0\uc158 ### \uc885\ub958 \ud06c\uae30 \uc624\ud504\uc14b ---------- ---------------- ------- ------- \ud30c\ud2f0\uc158 1 \uc8fc 14 GB 1024 KB DISKPART select partition 1 1 \ud30c\ud2f0\uc158\uc774 \uc120\ud0dd\ud55c \ud30c\ud2f0\uc158\uc785\ub2c8\ub2e4. DISKPART inactive DiskPart\uc5d0\uc11c \ud604\uc7ac \ud30c\ud2f0\uc158\uc744 \ube44\ud65c\uc131\uc744 \ud45c\uc2dc\ud588\uc2b5\ub2c8\ub2e4. DISKPART exit DiskPart \ub9c8\uce58\ub294 \uc911...","title":"Windows"},{"location":"tips/mbr/#linux","text":"fdisk \ub610\ub294 disk \uad00\ub828 \uc720\ud2f8\uc744 \ud1b5\ud574 \ud574\ub2f9 \ub514\uc2a4\ud06c\uc758 \uc7a5\uce58 \ud30c\uc77c\uc744 \ud30c\uc545 Example) /dev/sda sudo dd if=/dev/zero of=/dev/sda bs=446 count=1 MBR \uc601\uc5ed\uc744 0\uc73c\ub85c \ucc44\uc6c0 bs(block size), count : bs \ud06c\uae30\ub97c count \ub9cc\ud07c \uc218\ud589","title":"Linux"},{"location":"tips/mount-errors/","text":"NTFS mount error the disk contains an unclean file system (0 0) ... \ud558\uba74\uc11c, \uc5b4\uca4c\uace0 \uc800\uca4c\uace0 \uc5d0\ub7ec \ub0a0\ub54c \ub4c0\uc5bc \ubd80\ud305 \ub610\ub294 MBR\uc744 \uc798\ubabb \uac74\ub4e4\uc600\uc744 \ub54c, \ub098\ud0c0\ub098\ub294 \uc99d\uc0c1 \ub0b4 \ud658\uacbd : Grub2(sdb1) - Windows10(sdb2), Linux Mint 18.3(sdc*), NTFS-HDD(sda1) \ubcf4\ud1b5 ntfsfix\ub85c \ud574\uacb0 \uac00\ub2a5 ntfs HDD dev \ud30c\uc77c\uc774 /dev/sda1\uc778 \uacbd\uc6b0 sudo ntfsfix /dev/sda1 output example $ sudo ntfsfix /dev/sda1 Mounting volume... The disk contains an unclean file system (0, 0). Metadata kept in Windows cache, refused to mount. FAILED Attempting to correct errors... Processing $MFT and $MFTMirr... Reading $MFT... OK Reading $MFTMirr... OK Comparing $MFTMirr to $MFT... OK Processing of $MFT and $MFTMirr completed successfully. Setting required flags on partition... OK Going to empty the journal ($LogFile)... OK Checking the alternate boot sector... OK NTFS volume version is 3.1. NTFS partition /dev/sda1 was processed successfully. $","title":"Mount errors"},{"location":"tips/mount-errors/#ntfs-mount-error","text":"the disk contains an unclean file system (0 0) ... \ud558\uba74\uc11c, \uc5b4\uca4c\uace0 \uc800\uca4c\uace0 \uc5d0\ub7ec \ub0a0\ub54c \ub4c0\uc5bc \ubd80\ud305 \ub610\ub294 MBR\uc744 \uc798\ubabb \uac74\ub4e4\uc600\uc744 \ub54c, \ub098\ud0c0\ub098\ub294 \uc99d\uc0c1 \ub0b4 \ud658\uacbd : Grub2(sdb1) - Windows10(sdb2), Linux Mint 18.3(sdc*), NTFS-HDD(sda1) \ubcf4\ud1b5 ntfsfix\ub85c \ud574\uacb0 \uac00\ub2a5 ntfs HDD dev \ud30c\uc77c\uc774 /dev/sda1\uc778 \uacbd\uc6b0 sudo ntfsfix /dev/sda1 output example $ sudo ntfsfix /dev/sda1 Mounting volume... The disk contains an unclean file system (0, 0). Metadata kept in Windows cache, refused to mount. FAILED Attempting to correct errors... Processing $MFT and $MFTMirr... Reading $MFT... OK Reading $MFTMirr... OK Comparing $MFTMirr to $MFT... OK Processing of $MFT and $MFTMirr completed successfully. Setting required flags on partition... OK Going to empty the journal ($LogFile)... OK Checking the alternate boot sector... OK NTFS volume version is 3.1. NTFS partition /dev/sda1 was processed successfully. $","title":"NTFS mount error"},{"location":"tips/ppa/","text":"grub-customizer GUI tools for GRUB bootloader sudo add-apt-repository ppa:danielrichter2007/grub-customizer sudo apt-get update sudo apt-get install grub-customizer","title":"Ppa"},{"location":"tips/ppa/#grub-customizer","text":"GUI tools for GRUB bootloader sudo add-apt-repository ppa:danielrichter2007/grub-customizer sudo apt-get update sudo apt-get install grub-customizer","title":"grub-customizer"},{"location":"tips/ssh/","text":"SSH connection by public key authentication Generate key pair by ssh-keygen at the client machine # refer to `man ssh-keygen`, `ssh-keygen --help` ssh-keygen -t ed25519 -b 512 -f ~/.ssh/jgseong7@naver.com -C jgseong7@naver.com # -t : public key cipher type # -b : key length in bit # -f : output file # -C : comment for key #@note: to encrypt key file, input a passphrase. if empty passphrase, then the private key file would be written as cleartext. #@note: the file names and private key comments can be arbitrary. Check key pair $ ls ~/.ssh/ authorized_keys jgseong7@naver.com jgseong7@naver.com.pub # authorized_keys : a file for public key authentication (may be not existed) # jgseong7@naver.com : private key generated by previous step. # jgseong7@naver.com.pub : public key generated by previous step. typically, the file name is followed by the suffix '.pub'. Copy the public key to server do follows at client side. # copy a file contents in 'jgseong7@naver.com.pub' and write it to 'authorized_keys' file by ssh and tee cat ~/.ssh/jgseong7@naver.com.pub | ssh -t ubuntu@172.16.99.17 'tee -a ~/.ssh/authorized_keys' # in alternative way, copy the public key file and write it to 'authorized_keys' file by scp and ssh scp ~/.ssh/jgseong7@naver.com.pub ubuntu@172.16.99.17: ssh ubuntu@172.16.99.17 'cat jgseong7@naver.com.pub ~/.ssh/authorized_keys' ssh ubuntu@172.16.99.17 'rm jgseong7@naver.com.pub' Check sshd_config and restart sshd # '/etc/ssh/sshd_config' in default on ubuntu 16.04 LTS cat /etc/ssh/sshd_config | grep -E 'PubkeyAuthentication`|RSAAuthentication' # check PubkeyAuthentication yes # check RSAAuthentication yes # for RSA public key cat /etc/ssh/sshd_config | grep -E 'AuthorizedKeysFile' # check 'AuthorizedKeysFile %h/.ssh/authorized_keys' or '#AuthorizedKeysFile %h/.ssh/authorized_keys' # default authorizedKyesFile path is '%h/.ssh/authorized_keys' # Restart ssh daemons sudo systemctl restart sshd Connect SSH by pubkey ```bash -i : specify a identity file. (a.k.a. private key) ssh -i ~/.ssh/jgseong7@naver.com ubuntu@172.16.99.17 identity file could be specifable in ssh_config check 'IdentityFile' cat .ssh/config # refter to man ssh","title":"SSH connection by public key authentication"},{"location":"tips/ssh/#ssh-connection-by-public-key-authentication","text":"","title":"SSH connection by public key authentication"},{"location":"tips/ssh/#generate-key-pair-by-ssh-keygen-at-the-client-machine","text":"# refer to `man ssh-keygen`, `ssh-keygen --help` ssh-keygen -t ed25519 -b 512 -f ~/.ssh/jgseong7@naver.com -C jgseong7@naver.com # -t : public key cipher type # -b : key length in bit # -f : output file # -C : comment for key #@note: to encrypt key file, input a passphrase. if empty passphrase, then the private key file would be written as cleartext. #@note: the file names and private key comments can be arbitrary.","title":"Generate key pair by ssh-keygen at the client machine"},{"location":"tips/ssh/#check-key-pair","text":"$ ls ~/.ssh/ authorized_keys jgseong7@naver.com jgseong7@naver.com.pub # authorized_keys : a file for public key authentication (may be not existed) # jgseong7@naver.com : private key generated by previous step. # jgseong7@naver.com.pub : public key generated by previous step. typically, the file name is followed by the suffix '.pub'.","title":"Check key pair"},{"location":"tips/ssh/#copy-the-public-key-to-server","text":"do follows at client side. # copy a file contents in 'jgseong7@naver.com.pub' and write it to 'authorized_keys' file by ssh and tee cat ~/.ssh/jgseong7@naver.com.pub | ssh -t ubuntu@172.16.99.17 'tee -a ~/.ssh/authorized_keys' # in alternative way, copy the public key file and write it to 'authorized_keys' file by scp and ssh scp ~/.ssh/jgseong7@naver.com.pub ubuntu@172.16.99.17: ssh ubuntu@172.16.99.17 'cat jgseong7@naver.com.pub ~/.ssh/authorized_keys' ssh ubuntu@172.16.99.17 'rm jgseong7@naver.com.pub'","title":"Copy the public key to server"},{"location":"tips/ssh/#check-sshd_config-and-restart-sshd","text":"# '/etc/ssh/sshd_config' in default on ubuntu 16.04 LTS cat /etc/ssh/sshd_config | grep -E 'PubkeyAuthentication`|RSAAuthentication' # check PubkeyAuthentication yes # check RSAAuthentication yes # for RSA public key cat /etc/ssh/sshd_config | grep -E 'AuthorizedKeysFile' # check 'AuthorizedKeysFile %h/.ssh/authorized_keys' or '#AuthorizedKeysFile %h/.ssh/authorized_keys' # default authorizedKyesFile path is '%h/.ssh/authorized_keys' # Restart ssh daemons sudo systemctl restart sshd","title":"Check sshd_config and restart sshd"},{"location":"tips/ssh/#connect-ssh-by-pubkey","text":"```bash","title":"Connect SSH by pubkey"},{"location":"tips/ssh/#-i-specify-a-identity-file-aka-private-key","text":"ssh -i ~/.ssh/jgseong7@naver.com ubuntu@172.16.99.17","title":"-i : specify a identity file. (a.k.a. private key)"},{"location":"tips/ssh/#identity-file-could-be-specifable-in-ssh_config","text":"","title":"identity file could be specifable in ssh_config"},{"location":"tips/ssh/#check-identityfile","text":"cat .ssh/config # refter to man ssh","title":"check 'IdentityFile'"},{"location":"tips/vim/","text":"\uc790\ub3d9\uac1c\ud589\ubb38\uc790 \uc0bd\uc785 disable \uba85\ub839 \ubaa8\ub4dc\uc5d0\uc11c :set binary :set noeol \\\"\ub294 .vimrc \ud30c\uc77c\uc5d0\uc11c \ud574\ub2f9 \uc904(line)\uc774 \uc8fc\uc11d. vimrc \uc124\uc815( ~/.vimrc ) ~/.vimrc set binary set noeol","title":"Vim"},{"location":"tips/vim/#disable","text":"\uba85\ub839 \ubaa8\ub4dc\uc5d0\uc11c :set binary :set noeol \\\"\ub294 .vimrc \ud30c\uc77c\uc5d0\uc11c \ud574\ub2f9 \uc904(line)\uc774 \uc8fc\uc11d. vimrc \uc124\uc815( ~/.vimrc ) ~/.vimrc set binary set noeol","title":"\uc790\ub3d9\uac1c\ud589\ubb38\uc790 \uc0bd\uc785 disable"},{"location":"tips/windows/","text":"Windows 10 Portable program, \uac80\uc0c9 \ubc14\uc5d0 \ub098\uc624\uac8c \ud558\uae30 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs \uc5d0 portable \ud504\ub85c\uadf8\ub7a8\uc758 \ubc14\ub85c\uac00\uae30 \ubcf5\uc0ac. \uc2dc\uc791 \uba54\ub274-\ud504\ub85c\uadf8\ub7a8 \ud3f4\ub354 \ud0a4 \ub85c \uac80\uc0c9 \uac00\ub2a5","title":"Windows"},{"location":"tips/windows/#windows-10","text":"","title":"Windows 10"},{"location":"tips/windows/#portable-program","text":"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs \uc5d0 portable \ud504\ub85c\uadf8\ub7a8\uc758 \ubc14\ub85c\uac00\uae30 \ubcf5\uc0ac. \uc2dc\uc791 \uba54\ub274-\ud504\ub85c\uadf8\ub7a8 \ud3f4\ub354 \ud0a4 \ub85c \uac80\uc0c9 \uac00\ub2a5","title":"Portable program, \uac80\uc0c9 \ubc14\uc5d0 \ub098\uc624\uac8c \ud558\uae30"},{"location":"tips/wireshark/","text":"\uc0ac\uc6a9\uc790 \uacc4\uc815\uc73c\ub85c wireshark \uc2e4\ud589 dumpcap \ud30c\uc77c\uc758 \uc18c\uc720 \uadf8\ub8f9\uacfc \uadf8\ub8f9 \uc2e4\ud589 \uad8c\ud55c \ud655\uc778 which dumpcap \uc73c\ub85c \uacbd\ub85c \ud655\uc778 \uac00\ub2a5 'wireshark' \uadf8\ub8f9\uc5d0 \ud604\uc7ac \uc0ac\uc6a9\uc790 \ucd94\uac00 sudo usermod -a -G wireshark $USER output example # dumpcap \ud30c\uc77c\uc758 \uc18c\uc720 \uadf8\ub8f9\uacfc \uadf8\ub8f9 \uc2e4\ud589 \uad8c\ud55c \ud655\uc778 ls /usr/bin/dumpcap -l # or 'ls -l $(which dumpcap)' -rwxr-xr-- 1 root wireshark 96464 Jun 1 2017 /usr/bin/dumpcap* sudo usermod -a -G wireshark $USER reboot # or logout/re-login","title":"Wireshark"},{"location":"tips/wireshark/#wireshark","text":"dumpcap \ud30c\uc77c\uc758 \uc18c\uc720 \uadf8\ub8f9\uacfc \uadf8\ub8f9 \uc2e4\ud589 \uad8c\ud55c \ud655\uc778 which dumpcap \uc73c\ub85c \uacbd\ub85c \ud655\uc778 \uac00\ub2a5 'wireshark' \uadf8\ub8f9\uc5d0 \ud604\uc7ac \uc0ac\uc6a9\uc790 \ucd94\uac00 sudo usermod -a -G wireshark $USER output example # dumpcap \ud30c\uc77c\uc758 \uc18c\uc720 \uadf8\ub8f9\uacfc \uadf8\ub8f9 \uc2e4\ud589 \uad8c\ud55c \ud655\uc778 ls /usr/bin/dumpcap -l # or 'ls -l $(which dumpcap)' -rwxr-xr-- 1 root wireshark 96464 Jun 1 2017 /usr/bin/dumpcap* sudo usermod -a -G wireshark $USER reboot # or logout/re-login","title":"\uc0ac\uc6a9\uc790 \uacc4\uc815\uc73c\ub85c wireshark \uc2e4\ud589"},{"location":"tools/tmux/","text":"Tmux Install Tmux by APT sudo add-apt-repository -y ppa:hnakamur/tmux sudo apt update sudo apt install tmux Install Tmux to compile #!/bin/bash sudo apt update # install packages need to build sudo pat install -y git automake build-essential pkg-config libevent-dev libncurses5-dev [ -d /tmp/tmux ] rm -rf /tmp/tmux git clone https://github.com/tmux/tmux.git /tmp/tmux cd /tmp/tmux \\ git checkout master \\ ./autogen.sh \\ ./configure \\ make \\ sudo make install \\ cd - \\ rm -rf /tmp/tmux Components session : tmux \uc2e4\ud589\ub2e8\uc704, windows\ub85c \uad6c\uc131 window : terminal \ub0b4 \ud654\uba74 \ub2e8\uc704(tab) pane : window \ub0b4 \ubd84\ud560\ub41c \ud654\uba74 \ub2e8\uc704 status bar : \uc0c1\ud0dc bar Commands Shortcuts Ctrl+b, key # ^b # Help Ctrl+b, ? # ^b ? # Command mode Ctrl+b, : Session New session `tmux new -s 'session name' in shell ^b n Edit session name ^b $ Detach session ^b d in tmux Attach session tmux attach -t 'session-number' # or 'session name' List sessions tmux ls Window New window ^b c New Sesseion with window tmux new -s 'session name' -n 'window name' Edit Window name ^b , Terminate Window ^b ^d in pane Move to window space ^b number ^b n : next window ^b p : previous window ^b l : last window ^b w : window selector ^b f : find by name Pane Divide pane ^b % : vertical ^b \" : horizontal Move to pane space `^b q ^b o : \uc21c\uc11c\ub300\ub85c `^b : \ubc29\ud5a5\ud0a4\ub85c \uc120\ud0dd Delete pane ^b x ^d in pane Adjust size fo pane ^b : resize-pane -[L|R|D|U] 'size' Modify Layout ^b space Link tmux \uc785\ubb38\uc790 \uc2dc\ub9ac\uc988 \uc694\uc57d","title":"tmux"},{"location":"tools/tmux/#tmux","text":"","title":"Tmux"},{"location":"tools/tmux/#install-tmux-by-apt","text":"sudo add-apt-repository -y ppa:hnakamur/tmux sudo apt update sudo apt install tmux","title":"Install Tmux by APT"},{"location":"tools/tmux/#install-tmux-to-compile","text":"#!/bin/bash sudo apt update # install packages need to build sudo pat install -y git automake build-essential pkg-config libevent-dev libncurses5-dev [ -d /tmp/tmux ] rm -rf /tmp/tmux git clone https://github.com/tmux/tmux.git /tmp/tmux cd /tmp/tmux \\ git checkout master \\ ./autogen.sh \\ ./configure \\ make \\ sudo make install \\ cd - \\ rm -rf /tmp/tmux","title":"Install Tmux to compile"},{"location":"tools/tmux/#components","text":"session : tmux \uc2e4\ud589\ub2e8\uc704, windows\ub85c \uad6c\uc131 window : terminal \ub0b4 \ud654\uba74 \ub2e8\uc704(tab) pane : window \ub0b4 \ubd84\ud560\ub41c \ud654\uba74 \ub2e8\uc704 status bar : \uc0c1\ud0dc bar","title":"Components"},{"location":"tools/tmux/#commands-shortcuts","text":"Ctrl+b, key # ^b # Help Ctrl+b, ? # ^b ? # Command mode Ctrl+b, :","title":"Commands Shortcuts"},{"location":"tools/tmux/#session","text":"New session `tmux new -s 'session name' in shell ^b n Edit session name ^b $ Detach session ^b d in tmux Attach session tmux attach -t 'session-number' # or 'session name' List sessions tmux ls","title":"Session"},{"location":"tools/tmux/#window","text":"New window ^b c New Sesseion with window tmux new -s 'session name' -n 'window name' Edit Window name ^b , Terminate Window ^b ^d in pane Move to window space ^b number ^b n : next window ^b p : previous window ^b l : last window ^b w : window selector ^b f : find by name","title":"Window"},{"location":"tools/tmux/#pane","text":"Divide pane ^b % : vertical ^b \" : horizontal Move to pane space `^b q ^b o : \uc21c\uc11c\ub300\ub85c `^b : \ubc29\ud5a5\ud0a4\ub85c \uc120\ud0dd Delete pane ^b x ^d in pane Adjust size fo pane ^b : resize-pane -[L|R|D|U] 'size' Modify Layout ^b space","title":"Pane"},{"location":"tools/tmux/#link","text":"tmux \uc785\ubb38\uc790 \uc2dc\ub9ac\uc988 \uc694\uc57d","title":"Link"},{"location":"tutorials/jekyll-simple/","text":"Jekyll - Simply summary Install # Install ruby sudo apt install ruby ruby-dev build-essential # Set up environments echo '# Install Ruby Gems to ~/gems' ~/.bashrc echo 'export GEM_HOME=$HOME/gems' ~/.bashrc echo 'export PATH=$HOME/gems/bin:$PATH' ~/.bashrc source ~/.bashrc # Install jekyll gem install jekyll bundler # Check version ruby -v gem -v Create new site with basic theme(minima) # \ud604\uc7ac \uc704\uce58\uc758 contents\ub85c ./_site\uc5d0 \uc0ac\uc774\ud2b8 \uc0dd\uc131. jekyll build with options # source/destination \uc9c0\uc815 jekyll build --destination destination jekyll build --source source --destination destination # run `jekyll build` with auto re-generation # when detect to modify any contents. jekyll build --watch To change the default configurations for developing environments. Default service URL : http://localhost:4000 To change the URL, edit url: in '_config.yml', then JEKYLL_ENV=production bundle exec jekyll build When re-build with auto-regeneration(with --watch), not update the _config.yml . \uc8fc \ud658\uacbd\uc124\uc815 \ud30c\uc77c\uc778 _config.yml \uc5d0\ub294 \uc804\uc5ed \ud658\uacbd\uc124\uc815\uacfc \ubcc0\uc218\ub4e4\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\uba70, \uc2e4\ud589 \uc2dc\uc810\uc5d0 \ud55c \ubc88\ub9cc \uc77d\uc5b4\ub4e4\uc785\ub2c8\ub2e4. \uc790\ub3d9 \uc7ac\uc0dd\uc131\uc744 \uc0ac\uc6a9\ud558\ub294 \uc911\uc774\ub77c\ub3c4, \uc644\uc804\ud788 \uc0c8\ub85c \uc2e4\ud589\ud558\uae30 \uc804\uae4c\uc9c0\ub294 _config.yml \uc758 \ubcc0\uacbd\uc0ac\ud56d\uc744 \uc77d\uc5b4\ub4e4\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc790\ub3d9 \uc7ac\uc0dd\uc131 \uacfc\uc815\uc5d0\uc11c \ub370\uc774\ud130 \ud30c\uc77c\uc740 \ub2e4\uc2dc \uc77d\uc5b4\ub4e4\uc785\ub2c8\ub2e4. Site Destination \ud3f4\ub354\ub294 \uc0ac\uc774\ud2b8 \ube4c\ub4dc \uc2dc \ucd08\uae30\ud654\ub429\ub2c8\ub2e4. \uc0ac\uc774\ud2b8 \ube4c\ub4dc \uc2dc\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc548\uc758 \ud30c\uc77c\ub4e4\uc744 \uc9c0\uc6b0\ub294 \uac83\uc774 \ub514\ud3f4\ud2b8\ub85c \uc124\uc815\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc774\ud2b8\uc5d0\uc11c \uc0dd\uc131\ud558\uc9c0 \uc54a\ub294 \ud30c\uc77c\ub4e4\uc740 \ubaa8\ub450 \uc0ac\ub77c\uc9c8 \uac83\uc785\ub2c8\ub2e4. \ud658\uacbd\uc124\uc815 \uc635\uc158 \ub97c \uc0ac\uc6a9\ud574 \uc5d0 \uadf8\ub300\ub85c \uc62e\uae38 \ud30c\uc77c\uc774\ub098 \ud3f4\ub354\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc911\uc694\ud55c \ub514\ub809\ud1a0\ub9ac\ub294 \uc808\ub300 \uc73c\ub85c \uc9c0\uc815\ud558\uba74 \uc548\ub429\ub2c8\ub2e4; \uc6f9 \uc11c\ubc84\ub85c \uc62e\uae30\uae30 \uc804\uc5d0 \uc784\uc2dc\ub85c \ud30c\uc77c\ub4e4\uc744 \ubcf4\uad00\ud560 \uacbd\ub85c\ub97c \uc785\ub825\ud558\uc138\uc694. Service the jekyll on localhost # \uac1c\ubc1c \uc11c\ubc84 \uc2e4\ud589, http://localhost:4000 jekyll serve # default is with --watch # default\ub85c \uc790\ub3d9 \uc7ac\uc0dd\uc131(`with --watch`) \ud65c\uc131\ud654 jekyll serve --no-watch # \ubcc0\uacbd\uc0ac\ud56d\uc744 \uac10\uc2dc\ud558\uc9c0 \uc54a\uc74c # \ubcc0\uacbd\uc0ac\ud56d \ubc1c\uc0dd \uc2dc, LiveReload \uae30\ub2a5\uc73c\ub85c \ube0c\ub77c\uc6b0\uc800\ub97c \uc0c8\ub85c\uace0\uce68 jekyll serve --livereload # \uc7ac\uc0dd\uc131 \uc18c\uc694 \uc2dc\uac04\uc744 \uc904\uc774\uae30 \uc704\ud574 \uc99d\ubd84 \uc7ac\uc0dd\uc131 \uae30\ub2a5\uc73c\ub85c \ubd80\ubd84 \ube4c\ub4dc\ub97c \uc218\ud589 jekyll serve --incremental # run under background jekyll serve --detach other options -H address : specify listen address _config.yml \uc5d0\uc11c \uc124\uc815 \uac00\ub2a5. \ud658\uacbd\uc124\uc815[https://jekyllrb-ko.github.io/docs/configuration/] Directory structure Official docs for structure Concept # markdown, textile, html \ub4f1, markup \uc5b8\uc5b4\ub85c \uc791\uc131\ub41c \ubb38\uc11c\ub4e4\uc744 \ud558\ub098 \ub610\ub294 \uc5ec\ub7ec \uacb9\uc758 layout\uc73c\ub85c \ud3ec\uc7a5. # URL \uad6c\uc131 \ubc29\uc2dd, \ub808\uc774\uc544\uc6c3\uc5d0 \ud45c\uc2dc\ud560 \ub370\uc774\ud130, \ubcc0\ud658 \uacfc\uc815\uc5d0 \ud3ec\ud568\ub41c \ub2e4\uc591\ud55c \ub3d9\uc791\ub4e4\uc744 \uc870\uc815. # \uc815\uc801 \uc6f9\uc0ac\uc774\ud2b8 \uc0dd\uc131\uc774 \ud14d\uc2a4\ud2b8 \uc218\uc815\uc73c\ub85c \uac00\ub2a5. Configurations Official docs for configuration Help jekyll help new build serve ... jekyll docs # required to install jekyll-docs","title":"Jekyll - Simply summary"},{"location":"tutorials/jekyll-simple/#jekyll-simply-summary","text":"","title":"Jekyll - Simply summary"},{"location":"tutorials/jekyll-simple/#install","text":"# Install ruby sudo apt install ruby ruby-dev build-essential # Set up environments echo '# Install Ruby Gems to ~/gems' ~/.bashrc echo 'export GEM_HOME=$HOME/gems' ~/.bashrc echo 'export PATH=$HOME/gems/bin:$PATH' ~/.bashrc source ~/.bashrc # Install jekyll gem install jekyll bundler # Check version ruby -v gem -v","title":"Install"},{"location":"tutorials/jekyll-simple/#create-new-site-with-basic-thememinima","text":"# \ud604\uc7ac \uc704\uce58\uc758 contents\ub85c ./_site\uc5d0 \uc0ac\uc774\ud2b8 \uc0dd\uc131. jekyll build with options # source/destination \uc9c0\uc815 jekyll build --destination destination jekyll build --source source --destination destination # run `jekyll build` with auto re-generation # when detect to modify any contents. jekyll build --watch","title":"Create new site with basic theme(minima)"},{"location":"tutorials/jekyll-simple/#to-change-the-default-configurations-for-developing-environments","text":"Default service URL : http://localhost:4000 To change the URL, edit url: in '_config.yml', then JEKYLL_ENV=production bundle exec jekyll build When re-build with auto-regeneration(with --watch), not update the _config.yml . \uc8fc \ud658\uacbd\uc124\uc815 \ud30c\uc77c\uc778 _config.yml \uc5d0\ub294 \uc804\uc5ed \ud658\uacbd\uc124\uc815\uacfc \ubcc0\uc218\ub4e4\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\uba70, \uc2e4\ud589 \uc2dc\uc810\uc5d0 \ud55c \ubc88\ub9cc \uc77d\uc5b4\ub4e4\uc785\ub2c8\ub2e4. \uc790\ub3d9 \uc7ac\uc0dd\uc131\uc744 \uc0ac\uc6a9\ud558\ub294 \uc911\uc774\ub77c\ub3c4, \uc644\uc804\ud788 \uc0c8\ub85c \uc2e4\ud589\ud558\uae30 \uc804\uae4c\uc9c0\ub294 _config.yml \uc758 \ubcc0\uacbd\uc0ac\ud56d\uc744 \uc77d\uc5b4\ub4e4\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc790\ub3d9 \uc7ac\uc0dd\uc131 \uacfc\uc815\uc5d0\uc11c \ub370\uc774\ud130 \ud30c\uc77c\uc740 \ub2e4\uc2dc \uc77d\uc5b4\ub4e4\uc785\ub2c8\ub2e4. Site Destination \ud3f4\ub354\ub294 \uc0ac\uc774\ud2b8 \ube4c\ub4dc \uc2dc \ucd08\uae30\ud654\ub429\ub2c8\ub2e4. \uc0ac\uc774\ud2b8 \ube4c\ub4dc \uc2dc\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc548\uc758 \ud30c\uc77c\ub4e4\uc744 \uc9c0\uc6b0\ub294 \uac83\uc774 \ub514\ud3f4\ud2b8\ub85c \uc124\uc815\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc774\ud2b8\uc5d0\uc11c \uc0dd\uc131\ud558\uc9c0 \uc54a\ub294 \ud30c\uc77c\ub4e4\uc740 \ubaa8\ub450 \uc0ac\ub77c\uc9c8 \uac83\uc785\ub2c8\ub2e4. \ud658\uacbd\uc124\uc815 \uc635\uc158 \ub97c \uc0ac\uc6a9\ud574 \uc5d0 \uadf8\ub300\ub85c \uc62e\uae38 \ud30c\uc77c\uc774\ub098 \ud3f4\ub354\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc911\uc694\ud55c \ub514\ub809\ud1a0\ub9ac\ub294 \uc808\ub300 \uc73c\ub85c \uc9c0\uc815\ud558\uba74 \uc548\ub429\ub2c8\ub2e4; \uc6f9 \uc11c\ubc84\ub85c \uc62e\uae30\uae30 \uc804\uc5d0 \uc784\uc2dc\ub85c \ud30c\uc77c\ub4e4\uc744 \ubcf4\uad00\ud560 \uacbd\ub85c\ub97c \uc785\ub825\ud558\uc138\uc694.","title":"To change the default configurations for developing environments."},{"location":"tutorials/jekyll-simple/#service-the-jekyll-on-localhost","text":"# \uac1c\ubc1c \uc11c\ubc84 \uc2e4\ud589, http://localhost:4000 jekyll serve # default is with --watch # default\ub85c \uc790\ub3d9 \uc7ac\uc0dd\uc131(`with --watch`) \ud65c\uc131\ud654 jekyll serve --no-watch # \ubcc0\uacbd\uc0ac\ud56d\uc744 \uac10\uc2dc\ud558\uc9c0 \uc54a\uc74c # \ubcc0\uacbd\uc0ac\ud56d \ubc1c\uc0dd \uc2dc, LiveReload \uae30\ub2a5\uc73c\ub85c \ube0c\ub77c\uc6b0\uc800\ub97c \uc0c8\ub85c\uace0\uce68 jekyll serve --livereload # \uc7ac\uc0dd\uc131 \uc18c\uc694 \uc2dc\uac04\uc744 \uc904\uc774\uae30 \uc704\ud574 \uc99d\ubd84 \uc7ac\uc0dd\uc131 \uae30\ub2a5\uc73c\ub85c \ubd80\ubd84 \ube4c\ub4dc\ub97c \uc218\ud589 jekyll serve --incremental # run under background jekyll serve --detach other options -H address : specify listen address _config.yml \uc5d0\uc11c \uc124\uc815 \uac00\ub2a5. \ud658\uacbd\uc124\uc815[https://jekyllrb-ko.github.io/docs/configuration/]","title":"Service the jekyll on localhost"},{"location":"tutorials/jekyll-simple/#directory-structure","text":"Official docs for structure Concept # markdown, textile, html \ub4f1, markup \uc5b8\uc5b4\ub85c \uc791\uc131\ub41c \ubb38\uc11c\ub4e4\uc744 \ud558\ub098 \ub610\ub294 \uc5ec\ub7ec \uacb9\uc758 layout\uc73c\ub85c \ud3ec\uc7a5. # URL \uad6c\uc131 \ubc29\uc2dd, \ub808\uc774\uc544\uc6c3\uc5d0 \ud45c\uc2dc\ud560 \ub370\uc774\ud130, \ubcc0\ud658 \uacfc\uc815\uc5d0 \ud3ec\ud568\ub41c \ub2e4\uc591\ud55c \ub3d9\uc791\ub4e4\uc744 \uc870\uc815. # \uc815\uc801 \uc6f9\uc0ac\uc774\ud2b8 \uc0dd\uc131\uc774 \ud14d\uc2a4\ud2b8 \uc218\uc815\uc73c\ub85c \uac00\ub2a5.","title":"Directory structure"},{"location":"tutorials/jekyll-simple/#configurations","text":"Official docs for configuration","title":"Configurations"},{"location":"tutorials/jekyll-simple/#help","text":"jekyll help new build serve ... jekyll docs # required to install jekyll-docs","title":"Help"},{"location":"tutorials/jekyll/","text":"Jekyll refer to Jekyll Official - Installation Install on Ubuntu 16 # Install ruby sudo apt-get install ruby ruby-dev build-essential # Set up environments echo '# Install Ruby Gems to ~/gems' ~/.bashrc echo 'export GEM_HOME=$HOME/gems' ~/.bashrc echo 'export PATH=$HOME/gems/bin:$PATH' ~/.bashrc source ~/.bashrc # Install jekyll gem install jekyll bundler Check/Update jekyll vertion # Check version jekyll --version gem list jekyll # Update jekyll bundle update jekyll # Update without bundle gem update jekyll # Update Rubygems gem update --system Install pre-release # Check prerequisite gem install jekyll --pre # Install specific version gem install jekyll -v '2.0.0.alpha.1' # Install development version git clone git://github.com/jekyll/jekyll.git cd jekyll script/bootstrap bundle exec rake build ls pkg/*.gem | head -n 1 | xargs gem install -l Crate new jekyll site # mkdir jekyllSite # cd jekyllSite jekyll new . # OR jekyll new path Install plugin # install paginate gem install jekyll-paginate Service jekyll site # service from localhost # -H [Host] : Host bind to # jekyll serve : localhost service jekyll serve -H 0.0.0.0 Example output root@pretest:~/jekyllTutorial# jekyll serve -H 0.0.0.0 Configuration file: /root/jekyllTutorial/_config.yml Source: /root/jekyllTutorial Destination: /root/jekyllTutorial/_site Incremental build: disabled. Enable with --incremental Generating... Jekyll Feed: Generating feed for posts done in 0.35 seconds. Auto-regeneration: enabled for '/root/jekyllTutorial' Server address: http://0.0.0.0:4000/ Server running... press ctrl-c to stop.","title":"Jekyll"},{"location":"tutorials/jekyll/#jekyll","text":"refer to Jekyll Official - Installation","title":"Jekyll"},{"location":"tutorials/jekyll/#install-on-ubuntu-16","text":"# Install ruby sudo apt-get install ruby ruby-dev build-essential # Set up environments echo '# Install Ruby Gems to ~/gems' ~/.bashrc echo 'export GEM_HOME=$HOME/gems' ~/.bashrc echo 'export PATH=$HOME/gems/bin:$PATH' ~/.bashrc source ~/.bashrc # Install jekyll gem install jekyll bundler","title":"Install on Ubuntu 16"},{"location":"tutorials/jekyll/#checkupdate-jekyll-vertion","text":"# Check version jekyll --version gem list jekyll # Update jekyll bundle update jekyll # Update without bundle gem update jekyll # Update Rubygems gem update --system","title":"Check/Update jekyll vertion"},{"location":"tutorials/jekyll/#install-pre-release","text":"# Check prerequisite gem install jekyll --pre # Install specific version gem install jekyll -v '2.0.0.alpha.1' # Install development version git clone git://github.com/jekyll/jekyll.git cd jekyll script/bootstrap bundle exec rake build ls pkg/*.gem | head -n 1 | xargs gem install -l","title":"Install pre-release"},{"location":"tutorials/jekyll/#crate-new-jekyll-site","text":"# mkdir jekyllSite # cd jekyllSite jekyll new . # OR jekyll new path","title":"Crate new jekyll site"},{"location":"tutorials/jekyll/#install-plugin","text":"# install paginate gem install jekyll-paginate","title":"Install plugin"},{"location":"tutorials/jekyll/#service-jekyll-site","text":"# service from localhost # -H [Host] : Host bind to # jekyll serve : localhost service jekyll serve -H 0.0.0.0 Example output root@pretest:~/jekyllTutorial# jekyll serve -H 0.0.0.0 Configuration file: /root/jekyllTutorial/_config.yml Source: /root/jekyllTutorial Destination: /root/jekyllTutorial/_site Incremental build: disabled. Enable with --incremental Generating... Jekyll Feed: Generating feed for posts done in 0.35 seconds. Auto-regeneration: enabled for '/root/jekyllTutorial' Server address: http://0.0.0.0:4000/ Server running... press ctrl-c to stop.","title":"Service jekyll site"},{"location":"virtualization/docker/","text":"Docker Docker Architecture How to install refer to Get Docker CE for Ubuntu CLI show docker container # show running docker containers docker ps # show all docker containers docker ps -a show docker image docker images search image docker search 'image name' pull image docker pull 'image name' examples docker pull nginx docker pull jekyll/minimal launch container docker run [options] --name 'container name' 'image name' options -d : daemon mode -p : port forwarding --name : specify container name example docker run -it --name minilinux apline docker run -d -p 8080:80 --name webserver nginx control container docker [start | restart | stop] webserver delete container docker rm [options] 'container name' options -f : force delete image docker rmi 'container name'","title":"Docker"},{"location":"virtualization/docker/#docker","text":"","title":"Docker"},{"location":"virtualization/docker/#docker-architecture","text":"","title":"Docker Architecture"},{"location":"virtualization/docker/#how-to-install","text":"refer to Get Docker CE for Ubuntu","title":"How to install"},{"location":"virtualization/docker/#cli","text":"","title":"CLI"},{"location":"virtualization/docker/#show-docker-container","text":"# show running docker containers docker ps # show all docker containers docker ps -a","title":"show docker container"},{"location":"virtualization/docker/#show-docker-image","text":"docker images","title":"show docker image"},{"location":"virtualization/docker/#search-image","text":"docker search 'image name'","title":"search image"},{"location":"virtualization/docker/#pull-image","text":"docker pull 'image name' examples docker pull nginx docker pull jekyll/minimal","title":"pull image"},{"location":"virtualization/docker/#launch-container","text":"docker run [options] --name 'container name' 'image name' options -d : daemon mode -p : port forwarding --name : specify container name example docker run -it --name minilinux apline docker run -d -p 8080:80 --name webserver nginx","title":"launch container"},{"location":"virtualization/docker/#control-container","text":"docker [start | restart | stop] webserver","title":"control container"},{"location":"virtualization/docker/#delete-container","text":"docker rm [options] 'container name' options -f : force","title":"delete container"},{"location":"virtualization/docker/#delete-image","text":"docker rmi 'container name'","title":"delete image"},{"location":"virtualization/qemu/","text":"QEMU Refer to Install KVM (QEMU)","title":"Qemu"},{"location":"virtualization/qemu/#qemu","text":"Refer to Install KVM (QEMU)","title":"QEMU"}]}